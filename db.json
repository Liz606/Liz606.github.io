{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/Chocolateyinstall.png","path":"images/Chocolateyinstall.png","modified":0,"renderable":0},{"_id":"source/images/Chocolateyinstall1.png","path":"images/Chocolateyinstall1.png","modified":0,"renderable":0},{"_id":"source/images/Chocolateyinstall2.png","path":"images/Chocolateyinstall2.png","modified":0,"renderable":0},{"_id":"source/images/Chocolateyinstall3.png","path":"images/Chocolateyinstall3.png","modified":0,"renderable":0},{"_id":"source/images/Chocolateyinstall4.png","path":"images/Chocolateyinstall4.png","modified":0,"renderable":0},{"_id":"source/images/Javascript深度拷贝1.png","path":"images/Javascript深度拷贝1.png","modified":0,"renderable":0},{"_id":"source/images/Javascript深度拷贝2.png","path":"images/Javascript深度拷贝2.png","modified":0,"renderable":0},{"_id":"source/images/Person.png","path":"images/Person.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区1.png","path":"images/使用网易云跟帖设置评论区1.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区2.png","path":"images/使用网易云跟帖设置评论区2.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区3.png","path":"images/使用网易云跟帖设置评论区3.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区4.png","path":"images/使用网易云跟帖设置评论区4.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区5.png","path":"images/使用网易云跟帖设置评论区5.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区6.png","path":"images/使用网易云跟帖设置评论区6.png","modified":0,"renderable":0},{"_id":"source/images/使用网易云跟帖设置评论区7.png","path":"images/使用网易云跟帖设置评论区7.png","modified":0,"renderable":0},{"_id":"source/images/内存分布.png","path":"images/内存分布.png","modified":0,"renderable":0},{"_id":"source/images/Javascript深度拷贝3.png","path":"images/Javascript深度拷贝3.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/bgImg.jpg","path":"images/bgImg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"35228976596016ce52777ee4244516ace9c79304","modified":1484300660529},{"_id":"source/favicon.ico","hash":"fb739d9e14b57b2f7ec99d00007920bfd06919f2","modified":1496422709141},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1482161160000},{"_id":"themes/next/.bowerrc","hash":"fefdbd669b8c805caa0a34de4aef05343a36ca9f","modified":1490342153121},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1482161160000},{"_id":"themes/next/.javascript_ignore","hash":"e7a73b5a633affdaedfc8c2a164cc0cb64a97ac9","modified":1490342123097},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1482161160000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1482161160000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1482161160000},{"_id":"themes/next/_config.yml","hash":"c869362f037044a6d8c7aaadb8bc8f0332aa64a0","modified":1496574204060},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1482161160000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1482161160000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1482161160000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1482161160000},{"_id":"source/_drafts/Git常用指令.md","hash":"d1b34a7d7ee0dac22b5d824457a21210f9e433f8","modified":1490350998830},{"_id":"source/_drafts/LeetCode-PermutationSequence.md","hash":"72fc03d2966c93c7c28290208bc4f193ae479819","modified":1484300757390},{"_id":"source/_drafts/LeetCode-TrappingRainWater.md","hash":"2c31a2518e6d4ec79522245dd3a94ae7534edae0","modified":1484477096674},{"_id":"source/_drafts/Vue+Webpack+ES6.md","hash":"d4130bec42a1ca204e76b3dca3ff23c5f2399ef0","modified":1494223609671},{"_id":"source/_drafts/毕业设计.md","hash":"f5297d8188f7c7984cbdb486bd2e02e2e3430811","modified":1487604307531},{"_id":"source/_drafts/reactNative安装.md","hash":"0aea694423167b233a482b73e77d7b123ad82caa","modified":1490941236589},{"_id":"source/_drafts/git pull“No remote repository specified”.md","hash":"43acba03e777edd6844244961e3d77d4ef2db41b","modified":1489544320443},{"_id":"source/_posts/2016总结.md","hash":"a53ccf4b15278aea9c7e675042c2c6512405808b","modified":1496419695358},{"_id":"source/_posts/JQuery创建Dom元素.md","hash":"36c1cff0e91816a0203eaed2f8909cf517af2f28","modified":1496420000492},{"_id":"source/_posts/JavaScript数组.md","hash":"27e9af164efdb94741f561afa8cfd0f2eaa0fe8a","modified":1496420011506},{"_id":"source/_posts/Javascript比较两个数组是否相等.md","hash":"08600a0ae55af33e295576e6d91c38a8d5f3e0d3","modified":1496575816311},{"_id":"source/_posts/Javascript深度拷贝.md","hash":"c25c08af643c3b2b394f3a2f73b90ce25af33e52","modified":1496420007777},{"_id":"source/_posts/Javascript获取前7天.md","hash":"d00282e6883a97152009e229fb848cc9db6ff9bc","modified":1496420004298},{"_id":"source/_posts/LeetCode-3Sum.md","hash":"b14ed96bc9adef79841ceb5a04a00ce4ab74e0c7","modified":1496419962025},{"_id":"source/_posts/LeetCode-3SumClosest.md","hash":"5a90298675466ee8720a08b7fa17b5f8952f6581","modified":1496419952907},{"_id":"source/_posts/LeetCode-NextPermutation.md","hash":"8992b05b158eb2e4777ab6dd2e4c1100bbfbc42c","modified":1496419948905},{"_id":"source/_posts/LeetCode-RemoveElement.md","hash":"762d6442f8b2714c0ae8c85c85c91f567f9c4d00","modified":1496419945057},{"_id":"source/_posts/LeetCode-两个有序数组的中值.md","hash":"25860ad4a004cdd7224b7a52b4dd7cba55168266","modified":1496419992375},{"_id":"source/_posts/LeetCode-数组去重.md","hash":"269aa7a5eea350ade539441b132118c9d47d93e6","modified":1496419988026},{"_id":"source/_posts/LeetCode-无重复元素数组的二分查找.md","hash":"6e4bdf88a9d33c7e85f7e64e34a760d1e0672514","modified":1496419980989},{"_id":"source/_posts/LeetCode-最长连续序列.md","hash":"e3c1b639ccebd27ce86f0bcabd1fea274ccb4a34","modified":1496419975183},{"_id":"source/_posts/LeetCode-有序数组去重.md","hash":"bbcfe2d8cf5f3ea35be1b822115715ea4b4c9c2e","modified":1496419825640},{"_id":"source/_posts/LeetCode-重复有序数组的二分查找.md","hash":"533f020c66d490bcb1abd559a5533f735396f4fa","modified":1496419967078},{"_id":"source/_posts/Window系统配置前端开发环境.md","hash":"1e994c3598ac7c3099dcde73fda42474b4ba896b","modified":1496419939225},{"_id":"source/_posts/jQuery-File-Upload踩坑记录.md","hash":"084430bb1e5683dfb3c52ebb5a0db685bd49fa91","modified":1496577196711},{"_id":"source/_posts/jQuery自带的拓展方法.md","hash":"18df20b09c68278237a3e5cd658cbac0073cf5d6","modified":1496419996864},{"_id":"source/_posts/jQuery设置请求头.md","hash":"43ef7403dfd9f2988f42fd7fa20147a919500e99","modified":1496576302334},{"_id":"source/_posts/使用git进行pull时进行手动重置远程仓库url.md","hash":"674f45be9b9e1745309a82676b06968a2be38e8b","modified":1496420039072},{"_id":"source/_posts/使用网易云跟帖设置评论区.md","hash":"1969bbbfcbd2b125c79f75596ca2b8873849364c","modified":1496575447897},{"_id":"source/_posts/值得反复学习的Javascrip核心.md","hash":"997fa04fb2103ed6b4ea092463e0c5469b43ec78","modified":1496420043284},{"_id":"source/_posts/元素隐藏总结.md","hash":"ce760a98b224ce6da4040dcb1d179b24251ad70e","modified":1496420034749},{"_id":"source/_posts/几种继承方式的比较.md","hash":"9962d9d4627214a6547079e3984ed3a92ea432c7","modified":1496420031363},{"_id":"source/_posts/垂直居中和水平居中总结.md","hash":"b6032d50ea21851ebbfc369eebf96b912afd2afd","modified":1496420027838},{"_id":"source/_posts/模块式开发的一些思考.md","hash":"ba0562a60119de9126586008b54902bcea6e092c","modified":1496420023617},{"_id":"source/_posts/烂熟于心的客户端Javascript.md","hash":"3f571507f14d0f9250960a19b047ee5cb3b4df0d","modified":1496420017999},{"_id":"source/about/index.md","hash":"08bcc273a836d06b2a22d25d492db2013b9b5492","modified":1490347273172},{"_id":"source/categories/index.md","hash":"0c5099bfc3386ea07dcaca3d7cd2d1d7b2851713","modified":1482850918042},{"_id":"source/images/Chocolateyinstall.png","hash":"9af32dcf918c57d4da42c35ff439f910f6a885a1","modified":1490845442553},{"_id":"source/images/Chocolateyinstall1.png","hash":"28a95fe0928c0401fca78d8f5ec39c73e01453ae","modified":1490841878317},{"_id":"source/images/Chocolateyinstall2.png","hash":"411050c8f0d40c585ea4b589e4e3f8a80cdbe9dc","modified":1490842205307},{"_id":"source/images/Chocolateyinstall3.png","hash":"39bd7b82a50a4ee74029369d1aec0a6fdd9afb76","modified":1490842693602},{"_id":"source/images/Chocolateyinstall4.png","hash":"34740e5949dbf1a3e01ff6adf03ab6586eb66a45","modified":1490848209392},{"_id":"source/images/Javascript深度拷贝1.png","hash":"d9af6bced08cea1eac43c5ffac9e45d705450305","modified":1488768454987},{"_id":"source/images/Javascript深度拷贝2.png","hash":"d3c0cfc2d890fd88d0cfd9f6f3866f0026fe6101","modified":1488768460871},{"_id":"source/images/Person.png","hash":"f09f83e4bfde718761c15419c70bc574ec894455","modified":1483352593899},{"_id":"source/images/使用网易云跟帖设置评论区1.png","hash":"a2106436b67f5b4667deaffea1c34977b3e963e4","modified":1496572123599},{"_id":"source/images/使用网易云跟帖设置评论区2.png","hash":"500e53815cbef019d9bd2c8682f9c8a12febdf89","modified":1496572657472},{"_id":"source/images/使用网易云跟帖设置评论区3.png","hash":"8a632b25e7525268292a86a40f629eba499c0124","modified":1496574530294},{"_id":"source/images/使用网易云跟帖设置评论区4.png","hash":"cb5815a99ee97550efa2814c26a607388e2f5dc6","modified":1496574569904},{"_id":"source/images/使用网易云跟帖设置评论区5.png","hash":"5bd4cbaaf413f12a329d188fb088b0aaa21dc8ef","modified":1496574481000},{"_id":"source/images/使用网易云跟帖设置评论区6.png","hash":"e28b1432fe95990edcf5d8d6b17d79879c8d68fc","modified":1496574804553},{"_id":"source/images/使用网易云跟帖设置评论区7.png","hash":"c678479d811ab0c5fbfc422d836bce9c56e118cf","modified":1496574969412},{"_id":"source/images/内存分布.png","hash":"4c8c873835846da12007c1f2e73ecbb1c38db611","modified":1483339438048},{"_id":"source/tags/index.md","hash":"b41544ed3a09f8e73c427b9d061f7c7e05ad871e","modified":1482850872996},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1482161160000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1482161160000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1482161160000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1482161160000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1482161160000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1482161160000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1482161160000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1482161160000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1482161160000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1482161160000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1482161160000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1482161160000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1482161160000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1482161160000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1482161160000},{"_id":"themes/next/layout/_layout.swig","hash":"fd989743c820eb18317414f165fead5b6d328735","modified":1490354323064},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1482161160000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1482886603304},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1482161160000},{"_id":"themes/next/layout/page.swig","hash":"37f90a1f21cfd1aeec0689da7a4b664fec338723","modified":1483608828517},{"_id":"themes/next/layout/post.swig","hash":"d0d7f253a92b3cb4534e6b2528785753b5d04c07","modified":1490354299933},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1482161160000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1482161160000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1482161160000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1482161160000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1482161160000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1482161160000},{"_id":"source/images/Javascript深度拷贝3.png","hash":"1e21942fef548d5c6f7407e0e34fb8116d7ede69","modified":1488768468209},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496416441492},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"source/images/avatar.jpg","hash":"a7a7af5a2b0492b07fab10a1da6a6b0ab5b72c68","modified":1496421281499},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1482161160000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1482161160000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1482161160000},{"_id":"themes/next/layout/_macro/post.swig","hash":"dcf9245bba8756d124381041cb74d8ba5e8003cb","modified":1496416342904},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1482161160000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1482161160000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1482161160000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b1d240697ef1bd229c882dfffc5fde8d95546605","modified":1496574311513},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1482161160000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"73cace561e2d64bf0a6857980b673eb761db03a4","modified":1482844867855},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1482161160000},{"_id":"themes/next/layout/_partials/header.swig","hash":"5696ee15fc21eb3a6416902afcf1df454497c552","modified":1482161160000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1482161160000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1482161160000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1482161160000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1482161160000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1482161160000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1482161160000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1482161160000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1482161160000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1482161160000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1482161160000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1482161160000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1482161160000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1482161160000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1482161160000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1482161160000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1482161160000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482161160000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482161160000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1482161160000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1482161160000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1482161160000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496418538949},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1482161160000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1482161160000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1482161160000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1482161160000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1482161160000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"dc8a7bd00e3e9325db5a4ce2d4326cc195c1fa4d","modified":1496574624209},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1482161160000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"28fc7e003e9a3645369f235376d00a2efe6cfef2","modified":1496421917718},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bef514826ebf9eb6e99bb2b0d72285106658a1ec","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1482161160000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"7b4661a8c89bc51803ace5f986c9b8189915e21c","modified":1482851369891},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1482161160000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1482161160000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1482161160000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1482161160000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1482161160000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1482161160000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1482843997471},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1482161160000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1482161160000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1482161160000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1482844657401},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"9779bd527d34d111b089ba494db5a0b0aa9b7ef1","modified":1496574620064},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"a7672ffae0dff09c4e64590d3294fedad285e1db","modified":1490355909131},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1482935077960},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1482161160000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1482762811113},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1482761960102},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4dfdb9b766947dabaff01fae84f41e8896486817","modified":1490413223440},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7e899c4c0aa1312666f2534a4700667d1bfd88da","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1482161160000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1482161160000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1482161160000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"a32418d69f34b058e6b2420c3155e41ded134470","modified":1496421914651},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"b4ed07de72d5f10d8e0e9ce29dc5a11eadafa4a6","modified":1482818150267},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"ddf599e558138dc4d8ef23b76b230fceb2a2e64c","modified":1482818941449},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"3a6fc07638656f72a1ef0ea7267b772e430444e4","modified":1482828155421},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1490356320904},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1482761184885},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"21a11e08a8bffa64cb46cfeeca92cbe44cd6fd60","modified":1490412341106},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c28c5b2f18fa800e1150637bd93331f42f98e408","modified":1490413266579},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"df1d99327ab943cbe77105b3f890a98e7f198d5e","modified":1482843070497},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"5347697775d0616d5f236e568bfb571ec9a16ad8","modified":1482841917469},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e613ef6b980a5ab37c32434d357fbbdcb02ada38","modified":1482848919264},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"fed2e94ac33d77e2bf93ccf60b66cfa611e0571e","modified":1482848489394},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1483749121603},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1482161160000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1482161160000},{"_id":"themes/next/source/images/bgImg.jpg","hash":"042d70a16107f4103775a6f5d1c8632d15e61e64","modified":1478411545022},{"_id":"public/404.html","hash":"7e5d0cdfe7dd46a0a50dfc8425dc75034b754a2e","modified":1496577264692},{"_id":"public/about/index.html","hash":"82689fd038b880b3ca7495438eefef96d2229b1a","modified":1496577264707},{"_id":"public/categories/index.html","hash":"06a207b2d5f2818ae509f717c2ae9f610dfb3343","modified":1496577264708},{"_id":"public/tags/index.html","hash":"b9a683c4577313d7c481679f1d92a657800f6914","modified":1496577264708},{"_id":"public/archives/index.html","hash":"108bb2e42eb6bb509ad499b649a8303a1d2571a2","modified":1496577264708},{"_id":"public/archives/page/2/index.html","hash":"67fda344b8d535accf9457540cc23d4be91f83ce","modified":1496577264708},{"_id":"public/archives/page/3/index.html","hash":"5b318db9aef4003020798147f8bf7d1305198d2b","modified":1496577264708},{"_id":"public/archives/page/4/index.html","hash":"8993bccfd77fb80daff9994060900fc9d83b8d7c","modified":1496577264708},{"_id":"public/archives/page/5/index.html","hash":"02f33d80873ef3c969d847475377eb1a2df4add4","modified":1496577264708},{"_id":"public/archives/2016/index.html","hash":"0db047b462c9eb64eb7bb90197bc97a7d7af1ff1","modified":1496577264708},{"_id":"public/archives/2016/page/2/index.html","hash":"603d9b9003f34f87713002a58b374de31ea49d6f","modified":1496577264708},{"_id":"public/archives/2016/12/index.html","hash":"e466abd1e601b674233f96393b107935dac4caa4","modified":1496577264708},{"_id":"public/archives/2016/12/page/2/index.html","hash":"eb211e2955a63023aaf9a9d8f7614c1f7dd0cfd7","modified":1496577264708},{"_id":"public/archives/2017/index.html","hash":"45e2c56b62aefe29a0bea13c051a3b563b8a2cef","modified":1496577264709},{"_id":"public/archives/2017/page/2/index.html","hash":"b05f261bb9f990240d61607917c42b20b16c0da6","modified":1496577264709},{"_id":"public/archives/2017/page/3/index.html","hash":"e065fd4f15ad4c4c04081ef1b3edc23206e789d3","modified":1496577264709},{"_id":"public/archives/2017/page/4/index.html","hash":"e7e9186cc57b768110dd86de85c5d2dea710a59e","modified":1496577264709},{"_id":"public/archives/2017/01/index.html","hash":"9e8ef5f829eeb3ff7bddbb4fe758726b36643d15","modified":1496577264709},{"_id":"public/archives/2017/01/page/2/index.html","hash":"dc40be522ff70cf8b8d14d5c17bb56ced52805ec","modified":1496577264709},{"_id":"public/archives/2017/02/index.html","hash":"952aeece973d94024c928d2d579ddd32ae378d3d","modified":1496577264709},{"_id":"public/archives/2017/03/index.html","hash":"8d948f42556f28aa329830f1c590e9032ab29061","modified":1496577264709},{"_id":"public/archives/2017/06/index.html","hash":"a5ba79561c646d181ddf428dee31578c92b89e9c","modified":1496577264709},{"_id":"public/categories/开发工具/index.html","hash":"5edb73f9c43c0d1995dc85bffd7f88f503562e06","modified":1496577264709},{"_id":"public/categories/arithmetic/index.html","hash":"b968f060773e83053ad8416ab52ab07d69b48da6","modified":1496577264709},{"_id":"public/categories/arithmetic/page/2/index.html","hash":"a5431bcb93661fbd3c68d01666cb58dd2ffd042e","modified":1496577264709},{"_id":"public/categories/essay/index.html","hash":"11069bb69d25337c4acbf2fad06b94f717a8c214","modified":1496577264709},{"_id":"public/categories/javascript/index.html","hash":"873ec91e7a7b88bb0591ff86d8ef7c2fa00fe8a7","modified":1496577264709},{"_id":"public/categories/javascript/page/2/index.html","hash":"b1dee89ede7ae714be37b32e60639d4cfd79b164","modified":1496577264709},{"_id":"public/categories/Tools/index.html","hash":"f5795dd6e3b249ba309af60e1f2451e06241dc0b","modified":1496577264710},{"_id":"public/categories/CSS/index.html","hash":"b77fbc97c89b8e9ff3bd9d67fb68d2f52f0c63a2","modified":1496577264710},{"_id":"public/categories/Programming/index.html","hash":"c6232b1fbf8a212d3d024d1550978382083f6a1c","modified":1496577264710},{"_id":"public/tags/LeetCode/index.html","hash":"94b71cdad7344d39d7ccd699c3a022784e017458","modified":1496577264710},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"aa0793a7fed76fae43043ce0d99912417fc6ccbc","modified":1496577264710},{"_id":"public/tags/数组/index.html","hash":"ea71ac027aa07a784ff48a11b75fda011da73340","modified":1496577264710},{"_id":"public/tags/数组/page/2/index.html","hash":"8f0820df0a92992db6736d20bb0273d2f9c36c2f","modified":1496577264710},{"_id":"public/tags/数组/page/3/index.html","hash":"0008b2deaf65d2bf1dfdac2beb5fd1ac3691285c","modified":1496577264710},{"_id":"public/tags/总结/index.html","hash":"d5de78cbe60be4f154f2b089a09d9251b293680c","modified":1496577264711},{"_id":"public/tags/JavaScript/index.html","hash":"5602a0f1dd33d86131bbe11b8c8bd01ff2a1d6a1","modified":1496577264716},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"4c09d98b762f765c2af5869c8f475a0b7347508e","modified":1496577264717},{"_id":"public/tags/Tips/index.html","hash":"a9e8da39e4dab5588a28ef799ce792eb4950213d","modified":1496577264717},{"_id":"public/tags/算法/index.html","hash":"623a16a73283f94b52b7e747a0bd6d21b1b5ca2e","modified":1496577264717},{"_id":"public/tags/查找/index.html","hash":"a01641820fe10e0ee366affa75f49c27710490bf","modified":1496577264717},{"_id":"public/tags/树/index.html","hash":"f017c76cd7641c61168531b07de9d21cc02583ef","modified":1496577264717},{"_id":"public/tags/Tools/index.html","hash":"6db9aac866f252fa13c93d29582e6bfa4a0696c9","modified":1496577264717},{"_id":"public/tags/git/index.html","hash":"353d06469ce594edcddca6d085560453dd0c011f","modified":1496577264717},{"_id":"public/tags/CSS/index.html","hash":"679e62f4280abedaf149f381df6aefb438390782","modified":1496577264717},{"_id":"public/tags/思考/index.html","hash":"7af389f778283141772673da1f1ebde9a5649e2e","modified":1496577264718},{"_id":"public/posts/Tools/2017-06-04-使用网易云跟帖设置评论区.html","hash":"ef79325cfc0b19574ed31b54d3a62309177b5d05","modified":1496577264718},{"_id":"public/posts/Programming/2017-03-16-模块式开发的一些思考.html","hash":"3cd3f7aeb31f68fa54227d03af037219de2ec15d","modified":1496577264718},{"_id":"public/posts/javascript/2017-03-12-几种继承方式的比较.html","hash":"ef53123f45ab3ef51a8d96188f9eb04bf800ef4f","modified":1496577264718},{"_id":"public/posts/CSS/2017-03-06-垂直居中和水平居中总结.html","hash":"4a048033bf82bbed30b009e5a4a30bc378b2c8e4","modified":1496577264718},{"_id":"public/posts/javascript/2017-03-06-Javascript深度拷贝.html","hash":"f71e88cff8975d170ba04de909e1ce0a54d1207e","modified":1496577264718},{"_id":"public/posts/CSS/2017-03-01-元素隐藏总结.html","hash":"5794b12f2ea603070dfe7b31fa979acb6391d45f","modified":1496577264719},{"_id":"public/posts/javascript/2017-02-18-JavaScript数组.html","hash":"9babf682a3dc14c12e7e2aac68d0b2fe7eb3bc9f","modified":1496577264719},{"_id":"public/posts/javascript/2017-02-16-jQuery自带的拓展方法.html","hash":"e4dd72ba553ae4091fc9dac12aa5db4c28724fd0","modified":1496577264719},{"_id":"public/posts/javascript/2017-02-10-JQuery创建Dom元素.html","hash":"7b6a76118040722db2fa7099f8fbdd06cda76416","modified":1496577264720},{"_id":"public/posts/javascript/2017-02-07-Javascript获取前7天.html","hash":"0cfe2ab102d02863b517daa1c76391a9ecfada88","modified":1496577264720},{"_id":"public/posts/Tools/2017-01-15-使用git进行pull时进行手动重置远程仓库url.html","hash":"2a6e9b65064dc09c1b8763c4eb7e01a71c4115c7","modified":1496577264720},{"_id":"public/posts/javascript/2017-01-13-烂熟于心的客户端Javascript.html","hash":"398aa1a1c443c466c1597afba7c0a64e232c537f","modified":1496577264720},{"_id":"public/posts/arithmetic/2017-01-10-LeetCode-NextPermutation.html","hash":"89de61bcad074ab59b593ac2712ec3d7df1dabbc","modified":1496577264720},{"_id":"public/posts/arithmetic/2017-01-08-LeetCode-RemoveElement.html","hash":"0075d1da30a1da521984ab98347c74fadf7b3387","modified":1496577264720},{"_id":"public/posts/arithmetic/2017-01-05-LeetCode-3SumClosest.html","hash":"fbf28cdecd764775ad441dde2779f009427b779e","modified":1496577264720},{"_id":"public/posts/arithmetic/2017-01-04-LeetCode-3Sum.html","hash":"eb1d5b1e2d532eba68bed6689904d97b60663571","modified":1496577264720},{"_id":"public/posts/arithmetic/2017-01-03-LeetCode-最长连续序列.html","hash":"e03080af5573663019a4a23b791f9bfbc9fd2fe4","modified":1496577264720},{"_id":"public/posts/javascript/2017-01-02-值得反复学习的Javascrip核心.html","hash":"59c2d8f94625876be6ed871837679d3a88a20925","modified":1496577264721},{"_id":"public/posts/arithmetic/2017-01-02-LeetCode-两个有序数组的中值.html","hash":"3bba62afd9ccc3706df7cfee2665d268b6b4a648","modified":1496577264721},{"_id":"public/posts/arithmetic/2016-12-31-LeetCode-重复有序数组的二分查找.html","hash":"edc4ad26cee589997dc306311cb0dcb8e47352a8","modified":1496577264721},{"_id":"public/posts/arithmetic/2016-12-30-LeetCode-无重复元素数组的二分查找.html","hash":"8bc5cbfbad82ece42c649cc684eb962885972f73","modified":1496577264721},{"_id":"public/posts/开发工具/2016-12-29-Window系统配置前端开发环境.html","hash":"461b5ab18962d907435b485c1866bea748c33aef","modified":1496577264721},{"_id":"public/posts/arithmetic/2016-12-29-LeetCode-有序数组去重.html","hash":"8d86d67938fc63df260b657bef39c68eabdab9fc","modified":1496577264721},{"_id":"public/posts/arithmetic/2016-12-28-LeetCode-数组去重.html","hash":"87b8ca9849e918e4560292642023960e8c85747f","modified":1496577264721},{"_id":"public/posts/essay/2016-12-28-2016总结.html","hash":"e697dfec07a17bc3f4d55d59344310618523d917","modified":1496577264721},{"_id":"public/index.html","hash":"7e8895738dfd9d561096e5a09c24f6c57571b20b","modified":1496577264722},{"_id":"public/page/2/index.html","hash":"89e06f9d5dd257d6954b13906617db9c2eb21b4b","modified":1496577264722},{"_id":"public/page/3/index.html","hash":"fb49867e9e44f1a3c42240012f7ca86dc35031f9","modified":1496577264722},{"_id":"public/page/4/index.html","hash":"a54beab11641a098f1401da03272bd2df47ff40d","modified":1496577264722},{"_id":"public/page/5/index.html","hash":"2fa2dadc7215081c96da973e7a4db7d388475f3b","modified":1496577264722},{"_id":"public/posts/javascript/2017-04-24-Javascript比较两个数组是否相等.html","hash":"28ccb81414cd6b4b4f102db3e48750cd7ebb7d86","modified":1496577264724},{"_id":"public/archives/page/6/index.html","hash":"8df640de189920494e46784d0659f39f87c959bc","modified":1496577264724},{"_id":"public/archives/2017/page/5/index.html","hash":"94386749c23d0869f3fc2925672bd40e88c7c4ff","modified":1496577264724},{"_id":"public/archives/2017/04/index.html","hash":"aa14036299d78588f19b82f63860267bd1c139c2","modified":1496577264724},{"_id":"public/posts/uncategorized/2017-04-20-jQuery设置请求头.html","hash":"a2eb55b09a4784b5be63e0d74fd9460b30ec87c5","modified":1496577264725},{"_id":"public/posts/javascript/2017-04-19-jQuery-File-Upload踩坑记录.html","hash":"f0cab61036b8c36914cdfbc933f515afa11f1b2c","modified":1496577264725},{"_id":"public/page/6/index.html","hash":"93aceadc71812b8e331b6315905ccbfd0a48b5a0","modified":1496577264725}],"Category":[{"name":"开发工具","_id":"cj3imx2we0005doex29s0ocrq"},{"name":"算法","_id":"cj3imx2ws000bdoexqb8hevfy"},{"name":"随笔","_id":"cj3imx2xb000ndoex4jj22f61"},{"name":"JavaScript","_id":"cj3imx2xj000vdoexqg4uiidn"},{"name":"Tools","_id":"cj3imx2zb002jdoexdt57ip4f"},{"name":"CSS","_id":"cj3imx2zx0031doex02nrks1e"},{"name":"Programming","_id":"cj3imx306003ddoexph4inu1e"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - Liz'blog</title>\n\t<meta name=\"description\" content=\"404错误，页面不存在！\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t \n</body>\n\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - Liz'blog</title>\n\t<meta name=\"description\" content=\"404错误，页面不存在！\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t \n</body>\n\n</html>","date":"2017-01-13T09:44:20.591Z","updated":"2017-01-13T09:44:20.529Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj3imx2n40000doexim61kvyk","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - Liz'blog</title>\n\t<meta name=\"description\" content=\"404错误，页面不存在！\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t \n</body>\n\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - Liz'blog</title>\n\t<meta name=\"description\" content=\"404错误，页面不存在！\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t \n</body>\n\n</html>"},{"title":"about","date":"2017-01-05T09:27:47.000Z","_content":"\n## 关于我\n就读于重庆科技学院，计算机科学与技术专业，主攻方向前端开发。\n熟悉操作系统原理及数据结构，有一定编程基础。\n现刷LeetCode旨在将理论运用于实践，提高编程能力。\n学习前端技术两年，熟悉Html、Css、Javascript，熟练运用JQuery、bootstrap、Amaze UI等前端框架。\n独立开发多个电商网站的前端部分，其中有PC端SPA，响应式多页面应用，微信端HTML5等。\n熟练使用Webpack前端自动化部署工具流，熟练使用github进行团队协作。\n\n## 个人经历\n2014.12   \tGoogle产学合作专业综合改革项目-大学生创新训练项目优秀奖\n2015.05     中国青年App重庆“北部新区互联网产业园杯”优秀奖\n2015.06 \t首届中国“互联网+”大学生创新创业大赛 -Free Travelling优秀奖\n2016.06     重庆市大学生“安码杯”网络安全竞赛三等奖\n\n## 个人作品\n以下作品皆为独立自主完成。\n- [海航公益](http://liz-crown.cn/project5/index.html) -----移动端\n- [卓尚服饰](http://liz-crown.cn/project2/index.html)  -----移动端\n- [万之冠](http://liz-crown.cn/project1/index.html)  -----PC端\n- [慈善促进会](http://liz-crown.cn/project3/index.html) -----PC端\n- [千百惠](http://liz-crown.cn/project4/index.html)  -----响应式\n- [卡利亚尼](http://liz-crown.cn/project6/index.html) -----响应式\n\n\n## 个人感悟  \n其实真的非常幸运自己生在这样一个伟大的科技时代，希望通过自己的努力，能奉献滋养我成长的社会，与中国互联网一同成长。\n道阻且长，冰冻三尺非一日之寒。踏上这条CS的征程时就注定了是学无止境的一生。\n## 联系方式\nTel: 13368344495\nQQ：1105394023\nweiChat: az1105394023\nEmail: 1105394023@qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-05 17:27:47\n---\n\n## 关于我\n就读于重庆科技学院，计算机科学与技术专业，主攻方向前端开发。\n熟悉操作系统原理及数据结构，有一定编程基础。\n现刷LeetCode旨在将理论运用于实践，提高编程能力。\n学习前端技术两年，熟悉Html、Css、Javascript，熟练运用JQuery、bootstrap、Amaze UI等前端框架。\n独立开发多个电商网站的前端部分，其中有PC端SPA，响应式多页面应用，微信端HTML5等。\n熟练使用Webpack前端自动化部署工具流，熟练使用github进行团队协作。\n\n## 个人经历\n2014.12   \tGoogle产学合作专业综合改革项目-大学生创新训练项目优秀奖\n2015.05     中国青年App重庆“北部新区互联网产业园杯”优秀奖\n2015.06 \t首届中国“互联网+”大学生创新创业大赛 -Free Travelling优秀奖\n2016.06     重庆市大学生“安码杯”网络安全竞赛三等奖\n\n## 个人作品\n以下作品皆为独立自主完成。\n- [海航公益](http://liz-crown.cn/project5/index.html) -----移动端\n- [卓尚服饰](http://liz-crown.cn/project2/index.html)  -----移动端\n- [万之冠](http://liz-crown.cn/project1/index.html)  -----PC端\n- [慈善促进会](http://liz-crown.cn/project3/index.html) -----PC端\n- [千百惠](http://liz-crown.cn/project4/index.html)  -----响应式\n- [卡利亚尼](http://liz-crown.cn/project6/index.html) -----响应式\n\n\n## 个人感悟  \n其实真的非常幸运自己生在这样一个伟大的科技时代，希望通过自己的努力，能奉献滋养我成长的社会，与中国互联网一同成长。\n道阻且长，冰冻三尺非一日之寒。踏上这条CS的征程时就注定了是学无止境的一生。\n## 联系方式\nTel: 13368344495\nQQ：1105394023\nweiChat: az1105394023\nEmail: 1105394023@qq.com","updated":"2017-03-24T09:21:13.172Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3imx2w20002doex542fd7g6","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>就读于重庆科技学院，计算机科学与技术专业，主攻方向前端开发。<br>熟悉操作系统原理及数据结构，有一定编程基础。<br>现刷LeetCode旨在将理论运用于实践，提高编程能力。<br>学习前端技术两年，熟悉Html、Css、Javascript，熟练运用JQuery、bootstrap、Amaze UI等前端框架。<br>独立开发多个电商网站的前端部分，其中有PC端SPA，响应式多页面应用，微信端HTML5等。<br>熟练使用Webpack前端自动化部署工具流，熟练使用github进行团队协作。</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>2014.12       Google产学合作专业综合改革项目-大学生创新训练项目优秀奖<br>2015.05     中国青年App重庆“北部新区互联网产业园杯”优秀奖<br>2015.06     首届中国“互联网+”大学生创新创业大赛 -Free Travelling优秀奖<br>2016.06     重庆市大学生“安码杯”网络安全竞赛三等奖</p>\n<h2 id=\"个人作品\"><a href=\"#个人作品\" class=\"headerlink\" title=\"个人作品\"></a>个人作品</h2><p>以下作品皆为独立自主完成。</p>\n<ul>\n<li><a href=\"http://liz-crown.cn/project5/index.html\" target=\"_blank\" rel=\"external\">海航公益</a> —–移动端</li>\n<li><a href=\"http://liz-crown.cn/project2/index.html\" target=\"_blank\" rel=\"external\">卓尚服饰</a>  —–移动端</li>\n<li><a href=\"http://liz-crown.cn/project1/index.html\" target=\"_blank\" rel=\"external\">万之冠</a>  —–PC端</li>\n<li><a href=\"http://liz-crown.cn/project3/index.html\" target=\"_blank\" rel=\"external\">慈善促进会</a> —–PC端</li>\n<li><a href=\"http://liz-crown.cn/project4/index.html\" target=\"_blank\" rel=\"external\">千百惠</a>  —–响应式</li>\n<li><a href=\"http://liz-crown.cn/project6/index.html\" target=\"_blank\" rel=\"external\">卡利亚尼</a> —–响应式</li>\n</ul>\n<h2 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h2><p>其实真的非常幸运自己生在这样一个伟大的科技时代，希望通过自己的努力，能奉献滋养我成长的社会，与中国互联网一同成长。<br>道阻且长，冰冻三尺非一日之寒。踏上这条CS的征程时就注定了是学无止境的一生。</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>Tel: 13368344495<br>QQ：1105394023<br>weiChat: az1105394023<br>Email: 1105394023@qq.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>就读于重庆科技学院，计算机科学与技术专业，主攻方向前端开发。<br>熟悉操作系统原理及数据结构，有一定编程基础。<br>现刷LeetCode旨在将理论运用于实践，提高编程能力。<br>学习前端技术两年，熟悉Html、Css、Javascript，熟练运用JQuery、bootstrap、Amaze UI等前端框架。<br>独立开发多个电商网站的前端部分，其中有PC端SPA，响应式多页面应用，微信端HTML5等。<br>熟练使用Webpack前端自动化部署工具流，熟练使用github进行团队协作。</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>2014.12       Google产学合作专业综合改革项目-大学生创新训练项目优秀奖<br>2015.05     中国青年App重庆“北部新区互联网产业园杯”优秀奖<br>2015.06     首届中国“互联网+”大学生创新创业大赛 -Free Travelling优秀奖<br>2016.06     重庆市大学生“安码杯”网络安全竞赛三等奖</p>\n<h2 id=\"个人作品\"><a href=\"#个人作品\" class=\"headerlink\" title=\"个人作品\"></a>个人作品</h2><p>以下作品皆为独立自主完成。</p>\n<ul>\n<li><a href=\"http://liz-crown.cn/project5/index.html\">海航公益</a> —–移动端</li>\n<li><a href=\"http://liz-crown.cn/project2/index.html\">卓尚服饰</a>  —–移动端</li>\n<li><a href=\"http://liz-crown.cn/project1/index.html\">万之冠</a>  —–PC端</li>\n<li><a href=\"http://liz-crown.cn/project3/index.html\">慈善促进会</a> —–PC端</li>\n<li><a href=\"http://liz-crown.cn/project4/index.html\">千百惠</a>  —–响应式</li>\n<li><a href=\"http://liz-crown.cn/project6/index.html\">卡利亚尼</a> —–响应式</li>\n</ul>\n<h2 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h2><p>其实真的非常幸运自己生在这样一个伟大的科技时代，希望通过自己的努力，能奉献滋养我成长的社会，与中国互联网一同成长。<br>道阻且长，冰冻三尺非一日之寒。踏上这条CS的征程时就注定了是学无止境的一生。</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>Tel: 13368344495<br>QQ：1105394023<br>weiChat: az1105394023<br>Email: 1105394023@qq.com</p>\n"},{"title":"categories","date":"2016-12-27T04:44:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-27 12:44:55\ntype: \"categories\"\n---\n","updated":"2016-12-27T15:01:58.042Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj3imx2wa0004doexh1cpi83w","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-27T04:42:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-27 12:42:27\ntype: \"tags\"\n---\n","updated":"2016-12-27T15:01:12.996Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj3imx2wh0008doexhitt3roo","content":"","excerpt":"","more":""}],"Post":[{"title":"Git常用指令","photos":["/images/bg1.jpg"],"date":"2017-03-06T06:25:56.000Z","description":"Git常用指令记录。","_content":"\n---\n\nGit常用指令记录。\n\n复制并粘贴下面的JS代码到您的网页，你可以便捷使用友荐推荐工具并能免费获得数据分析和数据管理功能\n<!-- UY BEGIN -->\n<div id=\"uyan_frame\"></div>\n<script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=2128495\"></script>\n<!-- UY END -->","source":"_drafts/Git常用指令.md","raw":"---\ntitle: Git常用指令\nphotos: /images/bg1.jpg\ndate: 2017-03-06 14:25:56\ncategories: 开发工具\ntags: Tool\ndescription: Git常用指令记录。\n---\n\n---\n\nGit常用指令记录。\n\n复制并粘贴下面的JS代码到您的网页，你可以便捷使用友荐推荐工具并能免费获得数据分析和数据管理功能\n<!-- UY BEGIN -->\n<div id=\"uyan_frame\"></div>\n<script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=2128495\"></script>\n<!-- UY END -->","slug":"Git常用指令","published":0,"updated":"2017-03-24T10:23:18.830Z","comments":1,"layout":"post","link":"","_id":"cj3imx2vw0001doex9dnd3c18","content":"<hr>\n<p>Git常用指令记录。</p>\n<p>复制并粘贴下面的JS代码到您的网页，你可以便捷使用友荐推荐工具并能免费获得数据分析和数据管理功能<br><!-- UY BEGIN --></p>\n<p><div id=\"uyan_frame\"></div></p>\n<p><script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=2128495\"></script><br><!-- UY END --></p>\n","excerpt":"","more":"<hr>\n<p>Git常用指令记录。</p>\n<p>复制并粘贴下面的JS代码到您的网页，你可以便捷使用友荐推荐工具并能免费获得数据分析和数据管理功能<br><!-- UY BEGIN --></p>\n<p><div id=\"uyan_frame\"></div></p>\n<p><script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=2128495\"></script><br><!-- UY END --></p>\n"},{"title":"Permutation Sequence","photos":["/images/bg15.jpg"],"date":"2017-01-13T09:16:12.000Z","description":"the set contains a total of n! unique permutations.Given n and k, return the kth permutation sequence.Note, Given n will be between 1 and 9 inclusive.一个大小为n的集合，有n!个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个1到9的n,求其第k个排序顺序是多少。","_content":"\n---\n> the set [1,2,3,…,n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the kth permutation sequence.\nNote: Given n will be between 1 and 9 inclusive.\n> 一个大小为n的集合[1,2,3,…,n]，有n！个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个[1,9]的n,求其第k个排序顺序是多少。\n\n分析：\n成年人，做事暴力一点，调用k-1次NextPermutation，求出k个序列，既得。可是我们只需要第k个序列，有违写算法的初衷。额，和谐社会，暴力不可取啊···多读书。\n\n","source":"_drafts/LeetCode-PermutationSequence.md","raw":"---\ntitle: Permutation Sequence\nphotos: /images/bg15.jpg\ndate: 2017-01-13 17:16:12\ncategories: 算法\ntags: [ LeetCode, 数组]\ndescription: the set contains a total of n! unique permutations.Given n and k, return the kth permutation sequence.Note, Given n will be between 1 and 9 inclusive.一个大小为n的集合，有n!个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个1到9的n,求其第k个排序顺序是多少。\n---\n\n---\n> the set [1,2,3,…,n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the kth permutation sequence.\nNote: Given n will be between 1 and 9 inclusive.\n> 一个大小为n的集合[1,2,3,…,n]，有n！个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个[1,9]的n,求其第k个排序顺序是多少。\n\n分析：\n成年人，做事暴力一点，调用k-1次NextPermutation，求出k个序列，既得。可是我们只需要第k个序列，有违写算法的初衷。额，和谐社会，暴力不可取啊···多读书。\n\n","slug":"LeetCode-PermutationSequence","published":0,"updated":"2017-01-13T09:45:57.390Z","comments":1,"layout":"post","link":"","_id":"cj3imx2w60003doexfhiz3hdz","content":"<hr>\n<blockquote>\n<p>the set [1,2,3,…,n] contains a total of n! unique permutations.<br>By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):<br>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.<br>Note: Given n will be between 1 and 9 inclusive.<br>一个大小为n的集合[1,2,3,…,n]，有n！个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个[1,9]的n,求其第k个排序顺序是多少。</p>\n</blockquote>\n<p>分析：<br>成年人，做事暴力一点，调用k-1次NextPermutation，求出k个序列，既得。可是我们只需要第k个序列，有违写算法的初衷。额，和谐社会，暴力不可取啊···多读书。</p>\n","excerpt":"","more":"<hr>\n<blockquote>\n<p>the set [1,2,3,…,n] contains a total of n! unique permutations.<br>By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):<br>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.<br>Note: Given n will be between 1 and 9 inclusive.<br>一个大小为n的集合[1,2,3,…,n]，有n！个排序，将n!个排序按排序顺序从小到大又可以排序。给出一个[1,9]的n,求其第k个排序顺序是多少。</p>\n</blockquote>\n<p>分析：<br>成年人，做事暴力一点，调用k-1次NextPermutation，求出k个序列，既得。可是我们只需要第k个序列，有违写算法的初衷。额，和谐社会，暴力不可取啊···多读书。</p>\n"},{"title":"Trapping Rain Water","photos":["/images/bg10.jpg"],"date":"2017-01-15T10:44:03.000Z","description":"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap aer raining. For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.","_content":"\n---","source":"_drafts/LeetCode-TrappingRainWater.md","raw":"---\ntitle: Trapping Rain Water\nphotos: /images/bg10.jpg\ndate: 2017-01-15 18:44:03\ncategories: 算法\ntags: [LeetCode,数组]\ndescription: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap aer raining. For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.\n---\n\n---","slug":"LeetCode-TrappingRainWater","published":0,"updated":"2017-01-15T10:44:56.674Z","comments":1,"layout":"post","link":"","_id":"cj3imx2wg0007doexe940cv9w","content":"<hr>\n","excerpt":"","more":"<hr>\n"},{"_content":"#### 安装vue\n`npm install -g vue-cli`\n#### 初始化vue模板\n`vue init webpack [project name]`\n#### 运行 Demo\n`cd project`\n\n`npm install`\n\n`npm run dev`\n\n`npm run build`\n#### vue热加载\n`npm install vue-hot-reload-api --save-dev`\n#### 使用element-ui\n`npm install element-ui --save`\n \nrouter/index.js解读：\n- name: 'Login'---->路由名称，不会渲染到页面，只会在调试台显示\n- component: Login---->加载模块名称，与import模块名称一致\n\n\n\nvue项目结构\n├─build\n├─config\n├─node_modules\n├─staitic\n├─test\n├─src\n│ ├─assets\n│ │  └─images\n│ ├─components\n│ │   ├─Vlink.vue\n│ │   ├─404.vue\n│ │   └─index.vue\n│ ├─layouts\n│ │   └─Main.vue\n│ ├─pages\n│ │   ├─404.vue\n│ │   └─index.vue\n│ └─router\n│     ├─index.js//路由设置文件\n│     └─routes.js//路由配置文件\n└─index.html\n\n\n\n\n\n\n\n\n\n使用element-ui\n```\nimport Vue from 'vue'\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-default/index.css'\n\nVue.use(ElementUI)\n```\n配置element-ui组件按需引入\n安装babel-plugin-component\n`npm install babel-plugin-component --dev`\n修改.babelrc 为：\n```\n{\n  \"presets\": [\n    [\"env\", { \"es2015\":{ \"modules\": false } }],\"stage-2\"\n  ],\n  \"plugins\": [[\"component\", [\n    {\n      \"libraryName\": \"element-ui\",\n      \"styleLibraryName\": \"theme-default\"\n    }\n  ]]],\n  \"comments\": false,\n  \"env\": {\n    \"test\": {\n      \"presets\": [\"env\", \"stage-2\"],\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}\n\n```\n使用按需加载组件\n完整组件列表以 [components.json](https://github.com/ElemeFE/element/blob/dev/components.json) 为准\n```\nimport Vue from 'vue'\nimport { Button, Select } from 'element-ui'\nimport 'element-ui/lib/theme-default/index.css'\n\nVue.use(Button)\nVue.use(Select)\n```","source":"_drafts/Vue+Webpack+ES6.md","raw":"#### 安装vue\n`npm install -g vue-cli`\n#### 初始化vue模板\n`vue init webpack [project name]`\n#### 运行 Demo\n`cd project`\n\n`npm install`\n\n`npm run dev`\n\n`npm run build`\n#### vue热加载\n`npm install vue-hot-reload-api --save-dev`\n#### 使用element-ui\n`npm install element-ui --save`\n \nrouter/index.js解读：\n- name: 'Login'---->路由名称，不会渲染到页面，只会在调试台显示\n- component: Login---->加载模块名称，与import模块名称一致\n\n\n\nvue项目结构\n├─build\n├─config\n├─node_modules\n├─staitic\n├─test\n├─src\n│ ├─assets\n│ │  └─images\n│ ├─components\n│ │   ├─Vlink.vue\n│ │   ├─404.vue\n│ │   └─index.vue\n│ ├─layouts\n│ │   └─Main.vue\n│ ├─pages\n│ │   ├─404.vue\n│ │   └─index.vue\n│ └─router\n│     ├─index.js//路由设置文件\n│     └─routes.js//路由配置文件\n└─index.html\n\n\n\n\n\n\n\n\n\n使用element-ui\n```\nimport Vue from 'vue'\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-default/index.css'\n\nVue.use(ElementUI)\n```\n配置element-ui组件按需引入\n安装babel-plugin-component\n`npm install babel-plugin-component --dev`\n修改.babelrc 为：\n```\n{\n  \"presets\": [\n    [\"env\", { \"es2015\":{ \"modules\": false } }],\"stage-2\"\n  ],\n  \"plugins\": [[\"component\", [\n    {\n      \"libraryName\": \"element-ui\",\n      \"styleLibraryName\": \"theme-default\"\n    }\n  ]]],\n  \"comments\": false,\n  \"env\": {\n    \"test\": {\n      \"presets\": [\"env\", \"stage-2\"],\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}\n\n```\n使用按需加载组件\n完整组件列表以 [components.json](https://github.com/ElemeFE/element/blob/dev/components.json) 为准\n```\nimport Vue from 'vue'\nimport { Button, Select } from 'element-ui'\nimport 'element-ui/lib/theme-default/index.css'\n\nVue.use(Button)\nVue.use(Select)\n```","slug":"Vue+Webpack+ES6","published":0,"date":"2017-03-31T07:56:07.673Z","updated":"2017-05-08T06:06:49.671Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2wj0009doexs5uxepkq","content":"<h4 id=\"安装vue\"><a href=\"#安装vue\" class=\"headerlink\" title=\"安装vue\"></a>安装vue</h4><p><code>npm install -g vue-cli</code></p>\n<h4 id=\"初始化vue模板\"><a href=\"#初始化vue模板\" class=\"headerlink\" title=\"初始化vue模板\"></a>初始化vue模板</h4><p><code>vue init webpack [project name]</code></p>\n<h4 id=\"运行-Demo\"><a href=\"#运行-Demo\" class=\"headerlink\" title=\"运行 Demo\"></a>运行 Demo</h4><p><code>cd project</code></p>\n<p><code>npm install</code></p>\n<p><code>npm run dev</code></p>\n<p><code>npm run build</code></p>\n<h4 id=\"vue热加载\"><a href=\"#vue热加载\" class=\"headerlink\" title=\"vue热加载\"></a>vue热加载</h4><p><code>npm install vue-hot-reload-api --save-dev</code></p>\n<h4 id=\"使用element-ui\"><a href=\"#使用element-ui\" class=\"headerlink\" title=\"使用element-ui\"></a>使用element-ui</h4><p><code>npm install element-ui --save</code></p>\n<p>router/index.js解读：</p>\n<ul>\n<li>name: ‘Login’—-&gt;路由名称，不会渲染到页面，只会在调试台显示</li>\n<li>component: Login—-&gt;加载模块名称，与import模块名称一致</li>\n</ul>\n<p>vue项目结构<br>├─build<br>├─config<br>├─node_modules<br>├─staitic<br>├─test<br>├─src<br>│ ├─assets<br>│ │  └─images<br>│ ├─components<br>│ │   ├─Vlink.vue<br>│ │   ├─404.vue<br>│ │   └─index.vue<br>│ ├─layouts<br>│ │   └─Main.vue<br>│ ├─pages<br>│ │   ├─404.vue<br>│ │   └─index.vue<br>│ └─router<br>│     ├─index.js//路由设置文件<br>│     └─routes.js//路由配置文件<br>└─index.html</p>\n<p>使用element-ui<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import ElementUI from &apos;element-ui&apos;</div><div class=\"line\">import &apos;element-ui/lib/theme-default/index.css&apos;</div><div class=\"line\"></div><div class=\"line\">Vue.use(ElementUI)</div></pre></td></tr></table></figure></p>\n<p>配置element-ui组件按需引入<br>安装babel-plugin-component<br><code>npm install babel-plugin-component --dev</code><br>修改.babelrc 为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;presets&quot;: [</div><div class=\"line\">    [&quot;env&quot;, &#123; &quot;es2015&quot;:&#123; &quot;modules&quot;: false &#125; &#125;],&quot;stage-2&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;plugins&quot;: [[&quot;component&quot;, [</div><div class=\"line\">    &#123;</div><div class=\"line\">      &quot;libraryName&quot;: &quot;element-ui&quot;,</div><div class=\"line\">      &quot;styleLibraryName&quot;: &quot;theme-default&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]]],</div><div class=\"line\">  &quot;comments&quot;: false,</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &#123;</div><div class=\"line\">      &quot;presets&quot;: [&quot;env&quot;, &quot;stage-2&quot;],</div><div class=\"line\">      &quot;plugins&quot;: [ &quot;istanbul&quot; ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用按需加载组件<br>完整组件列表以 <a href=\"https://github.com/ElemeFE/element/blob/dev/components.json\" target=\"_blank\" rel=\"external\">components.json</a> 为准<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import &#123; Button, Select &#125; from &apos;element-ui&apos;</div><div class=\"line\">import &apos;element-ui/lib/theme-default/index.css&apos;</div><div class=\"line\"></div><div class=\"line\">Vue.use(Button)</div><div class=\"line\">Vue.use(Select)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"安装vue\"><a href=\"#安装vue\" class=\"headerlink\" title=\"安装vue\"></a>安装vue</h4><p><code>npm install -g vue-cli</code></p>\n<h4 id=\"初始化vue模板\"><a href=\"#初始化vue模板\" class=\"headerlink\" title=\"初始化vue模板\"></a>初始化vue模板</h4><p><code>vue init webpack [project name]</code></p>\n<h4 id=\"运行-Demo\"><a href=\"#运行-Demo\" class=\"headerlink\" title=\"运行 Demo\"></a>运行 Demo</h4><p><code>cd project</code></p>\n<p><code>npm install</code></p>\n<p><code>npm run dev</code></p>\n<p><code>npm run build</code></p>\n<h4 id=\"vue热加载\"><a href=\"#vue热加载\" class=\"headerlink\" title=\"vue热加载\"></a>vue热加载</h4><p><code>npm install vue-hot-reload-api --save-dev</code></p>\n<h4 id=\"使用element-ui\"><a href=\"#使用element-ui\" class=\"headerlink\" title=\"使用element-ui\"></a>使用element-ui</h4><p><code>npm install element-ui --save</code></p>\n<p>router/index.js解读：</p>\n<ul>\n<li>name: ‘Login’—-&gt;路由名称，不会渲染到页面，只会在调试台显示</li>\n<li>component: Login—-&gt;加载模块名称，与import模块名称一致</li>\n</ul>\n<p>vue项目结构<br>├─build<br>├─config<br>├─node_modules<br>├─staitic<br>├─test<br>├─src<br>│ ├─assets<br>│ │  └─images<br>│ ├─components<br>│ │   ├─Vlink.vue<br>│ │   ├─404.vue<br>│ │   └─index.vue<br>│ ├─layouts<br>│ │   └─Main.vue<br>│ ├─pages<br>│ │   ├─404.vue<br>│ │   └─index.vue<br>│ └─router<br>│     ├─index.js//路由设置文件<br>│     └─routes.js//路由配置文件<br>└─index.html</p>\n<p>使用element-ui<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import ElementUI from &apos;element-ui&apos;</div><div class=\"line\">import &apos;element-ui/lib/theme-default/index.css&apos;</div><div class=\"line\"></div><div class=\"line\">Vue.use(ElementUI)</div></pre></td></tr></table></figure></p>\n<p>配置element-ui组件按需引入<br>安装babel-plugin-component<br><code>npm install babel-plugin-component --dev</code><br>修改.babelrc 为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;presets&quot;: [</div><div class=\"line\">    [&quot;env&quot;, &#123; &quot;es2015&quot;:&#123; &quot;modules&quot;: false &#125; &#125;],&quot;stage-2&quot;</div><div class=\"line\">  ],</div><div class=\"line\">  &quot;plugins&quot;: [[&quot;component&quot;, [</div><div class=\"line\">    &#123;</div><div class=\"line\">      &quot;libraryName&quot;: &quot;element-ui&quot;,</div><div class=\"line\">      &quot;styleLibraryName&quot;: &quot;theme-default&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]]],</div><div class=\"line\">  &quot;comments&quot;: false,</div><div class=\"line\">  &quot;env&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &#123;</div><div class=\"line\">      &quot;presets&quot;: [&quot;env&quot;, &quot;stage-2&quot;],</div><div class=\"line\">      &quot;plugins&quot;: [ &quot;istanbul&quot; ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用按需加载组件<br>完整组件列表以 <a href=\"https://github.com/ElemeFE/element/blob/dev/components.json\">components.json</a> 为准<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;</div><div class=\"line\">import &#123; Button, Select &#125; from &apos;element-ui&apos;</div><div class=\"line\">import &apos;element-ui/lib/theme-default/index.css&apos;</div><div class=\"line\"></div><div class=\"line\">Vue.use(Button)</div><div class=\"line\">Vue.use(Select)</div></pre></td></tr></table></figure></p>\n"},{"layout":"draft","title":"毕业设计","date":"2016-12-29T03:21:23.000Z","_content":"\n要求：\n>1.\t开发操作系统原理教学辅助软件，能够对进程的状态转换、进程同步、信号量机制、处理机的高中低级调度、先来先服务调度算法、短作业优先调度算法、高响应比优先调度算法开发演示；\n>2.\t开发存储管理方面中分区分配中的首次适应分配、最佳分配、最差分配以及分页、分段内存管理方面开发等方面开发动态演示系统；\n>3.\t产品提供PC端和移动端，针对教师用户提供以上课堂演示功能、集体在线测试功能、班级学习情况收集功能、学习情况掌握分析功能。\n>4.\t针对学生用户提供课堂演示功能及集体在线测试结果收藏，向老师发起匿名或实名答疑功能及时效性主题讨论组功能；\n>5.针对开发过程撰写毕业论文。 \n\n\nSVG\n\n前端网站搭建\n\nnodejs后台\n\n\n进程的\n\t状态转换\n\t进程同步\n\t信号量机制\n\t处理机的高中低级调度\n\t先来先服务调度算法\n\t短作业优先调度算法\n\t高响应比优先调度算法\n\n存储管理方面\n\t分区分配中的\n\t\t首次适应分配\n\t\t最佳分配\n\t\t最差分配\n\t以及分页、分段内存管理方面\n\nPC端和移动端\nPC端\n\t课堂演示功能\n\t集体在线测试功能\n\t班级学习情况收集功能\n\t学习情况掌握分析功能\n移动端\n\t课堂演示功能\n\t集体在线测试及结果收藏\n\t向老师发起匿名或实名答疑功能\n\t同学间时效性主题讨论组功能\n\n\n\n\n\t原型开发\n\n\t主题色#0099FF\n\tLOGO http://www.qt86.com/\n\t     14.汉仪花蝶体简  \n\t     #ffffff  #0099FF\n\t     logo位置x:50,y:0;width:250px,height:50px;\n\t     背景色：#e9f1f6\n\t     侧边栏：#4b5cc4\n\n\n\nbug\n子元素同时设置float和absolute\n父元素有内边距\n此时子元素宽度百分百","source":"_drafts/毕业设计.md","raw":"layout: draft\ntitle: 毕业设计\ndate: 2016-12-29 11:21:23\ntags:\n---\n\n要求：\n>1.\t开发操作系统原理教学辅助软件，能够对进程的状态转换、进程同步、信号量机制、处理机的高中低级调度、先来先服务调度算法、短作业优先调度算法、高响应比优先调度算法开发演示；\n>2.\t开发存储管理方面中分区分配中的首次适应分配、最佳分配、最差分配以及分页、分段内存管理方面开发等方面开发动态演示系统；\n>3.\t产品提供PC端和移动端，针对教师用户提供以上课堂演示功能、集体在线测试功能、班级学习情况收集功能、学习情况掌握分析功能。\n>4.\t针对学生用户提供课堂演示功能及集体在线测试结果收藏，向老师发起匿名或实名答疑功能及时效性主题讨论组功能；\n>5.针对开发过程撰写毕业论文。 \n\n\nSVG\n\n前端网站搭建\n\nnodejs后台\n\n\n进程的\n\t状态转换\n\t进程同步\n\t信号量机制\n\t处理机的高中低级调度\n\t先来先服务调度算法\n\t短作业优先调度算法\n\t高响应比优先调度算法\n\n存储管理方面\n\t分区分配中的\n\t\t首次适应分配\n\t\t最佳分配\n\t\t最差分配\n\t以及分页、分段内存管理方面\n\nPC端和移动端\nPC端\n\t课堂演示功能\n\t集体在线测试功能\n\t班级学习情况收集功能\n\t学习情况掌握分析功能\n移动端\n\t课堂演示功能\n\t集体在线测试及结果收藏\n\t向老师发起匿名或实名答疑功能\n\t同学间时效性主题讨论组功能\n\n\n\n\n\t原型开发\n\n\t主题色#0099FF\n\tLOGO http://www.qt86.com/\n\t     14.汉仪花蝶体简  \n\t     #ffffff  #0099FF\n\t     logo位置x:50,y:0;width:250px,height:50px;\n\t     背景色：#e9f1f6\n\t     侧边栏：#4b5cc4\n\n\n\nbug\n子元素同时设置float和absolute\n父元素有内边距\n此时子元素宽度百分百","slug":"毕业设计","published":0,"updated":"2017-02-20T15:25:07.531Z","comments":1,"photos":[],"link":"","_id":"cj3imx2wq000adoexwne4gb4v","content":"<p>要求：</p>\n<blockquote>\n<ol>\n<li>开发操作系统原理教学辅助软件，能够对进程的状态转换、进程同步、信号量机制、处理机的高中低级调度、先来先服务调度算法、短作业优先调度算法、高响应比优先调度算法开发演示；</li>\n<li>开发存储管理方面中分区分配中的首次适应分配、最佳分配、最差分配以及分页、分段内存管理方面开发等方面开发动态演示系统；</li>\n<li>产品提供PC端和移动端，针对教师用户提供以上课堂演示功能、集体在线测试功能、班级学习情况收集功能、学习情况掌握分析功能。</li>\n<li>针对学生用户提供课堂演示功能及集体在线测试结果收藏，向老师发起匿名或实名答疑功能及时效性主题讨论组功能；<br>5.针对开发过程撰写毕业论文。 </li>\n</ol>\n</blockquote>\n<p>SVG</p>\n<p>前端网站搭建</p>\n<p>nodejs后台</p>\n<p>进程的<br>    状态转换<br>    进程同步<br>    信号量机制<br>    处理机的高中低级调度<br>    先来先服务调度算法<br>    短作业优先调度算法<br>    高响应比优先调度算法</p>\n<p>存储管理方面<br>    分区分配中的<br>        首次适应分配<br>        最佳分配<br>        最差分配<br>    以及分页、分段内存管理方面</p>\n<p>PC端和移动端<br>PC端<br>    课堂演示功能<br>    集体在线测试功能<br>    班级学习情况收集功能<br>    学习情况掌握分析功能<br>移动端<br>    课堂演示功能<br>    集体在线测试及结果收藏<br>    向老师发起匿名或实名答疑功能<br>    同学间时效性主题讨论组功能</p>\n<pre><code>原型开发\n\n主题色#0099FF\nLOGO http://www.qt86.com/\n     14.汉仪花蝶体简  \n     #ffffff  #0099FF\n     logo位置x:50,y:0;width:250px,height:50px;\n     背景色：#e9f1f6\n     侧边栏：#4b5cc4\n</code></pre><p>bug<br>子元素同时设置float和absolute<br>父元素有内边距<br>此时子元素宽度百分百</p>\n","excerpt":"","more":"<p>要求：</p>\n<blockquote>\n<ol>\n<li>开发操作系统原理教学辅助软件，能够对进程的状态转换、进程同步、信号量机制、处理机的高中低级调度、先来先服务调度算法、短作业优先调度算法、高响应比优先调度算法开发演示；</li>\n<li>开发存储管理方面中分区分配中的首次适应分配、最佳分配、最差分配以及分页、分段内存管理方面开发等方面开发动态演示系统；</li>\n<li>产品提供PC端和移动端，针对教师用户提供以上课堂演示功能、集体在线测试功能、班级学习情况收集功能、学习情况掌握分析功能。</li>\n<li>针对学生用户提供课堂演示功能及集体在线测试结果收藏，向老师发起匿名或实名答疑功能及时效性主题讨论组功能；<br>5.针对开发过程撰写毕业论文。 </li>\n</ol>\n</blockquote>\n<p>SVG</p>\n<p>前端网站搭建</p>\n<p>nodejs后台</p>\n<p>进程的<br>    状态转换<br>    进程同步<br>    信号量机制<br>    处理机的高中低级调度<br>    先来先服务调度算法<br>    短作业优先调度算法<br>    高响应比优先调度算法</p>\n<p>存储管理方面<br>    分区分配中的<br>        首次适应分配<br>        最佳分配<br>        最差分配<br>    以及分页、分段内存管理方面</p>\n<p>PC端和移动端<br>PC端<br>    课堂演示功能<br>    集体在线测试功能<br>    班级学习情况收集功能<br>    学习情况掌握分析功能<br>移动端<br>    课堂演示功能<br>    集体在线测试及结果收藏<br>    向老师发起匿名或实名答疑功能<br>    同学间时效性主题讨论组功能</p>\n<pre><code>原型开发\n\n主题色#0099FF\nLOGO http://www.qt86.com/\n     14.汉仪花蝶体简  \n     #ffffff  #0099FF\n     logo位置x:50,y:0;width:250px,height:50px;\n     背景色：#e9f1f6\n     侧边栏：#4b5cc4\n</code></pre><p>bug<br>子元素同时设置float和absolute<br>父元素有内边距<br>此时子元素宽度百分百</p>\n"},{"_content":"\n#### 安装Chocolatey\n\n- 以管理员身份运行CMD:\n\n\t[Chocolatey官网](https://chocolatey.org/install)\n\n\t`\n\t@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\t`\n\t\n\t![](/images/Chocolateyinstall.png)\n\n- 检查安装情况\n\n\t`chocolatey help`\n\n\t![](/images/Chocolateyinstall1.png)\n\t\n\t`choco feature enable -n useFipsCompliantChecksums`\n\n\t![](/images/Chocolateyinstall2.png)\n\n- 添加seuic源\n\n\t```\n\t\tchoco source add -n=seuic -s\"http://choco.seuic.info/nuget/\" \n\t\tchoco source remove -n=chocolatey\n\t\tchoco source add -n=chocolatey -s\"https://chocolatey.org/api/v2/\"  --priority=3\n\t```\n\t![](/images/Chocolateyinstall3.png)\n\n\n\n#### 安装androidstudio\nandroidstudio依赖android-sdk和jdk8,android-sdk依赖jdk8。\n\nchoco安装时会自动安装依赖:`cinst androidstudio -y -s\"seuic\"`\n\n![](/images/Chocolateyinstall4.png)\n\n\n#### DownLoading components for androidstudio 及 Setting \n\n根据chocolatey安装命令行报告找到Android SDK正确安装位置进行安装\n并配置ANDROID_HOME环境变量路径\n\n#### 安装Python2\n\n\t`choco install python2`\n\n#### 安装React Native的命令行工具（react-native-cli）\n\n`npm install -g react-native-cli`\n\n#### 环境变量配置\nANDROID_HOME `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2`\n\nadb `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\platform-tools`\n\nandroid-sdk `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2`\n\nandroid-sdk/tools `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\tools`\n\njdk8 `C:\\Program Files\\Java\\jdk1.8.0_102`\n\n#### 安装Genymotion\n\n登陆官网，注册账号，下载带有VBox的安装包\n\n[安装Genymotion教程](http://jingyan.baidu.com/article/8ebacdf02a5c3649f65cd5f0.html)\n","source":"_drafts/reactNative安装.md","raw":"\n#### 安装Chocolatey\n\n- 以管理员身份运行CMD:\n\n\t[Chocolatey官网](https://chocolatey.org/install)\n\n\t`\n\t@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\t`\n\t\n\t![](/images/Chocolateyinstall.png)\n\n- 检查安装情况\n\n\t`chocolatey help`\n\n\t![](/images/Chocolateyinstall1.png)\n\t\n\t`choco feature enable -n useFipsCompliantChecksums`\n\n\t![](/images/Chocolateyinstall2.png)\n\n- 添加seuic源\n\n\t```\n\t\tchoco source add -n=seuic -s\"http://choco.seuic.info/nuget/\" \n\t\tchoco source remove -n=chocolatey\n\t\tchoco source add -n=chocolatey -s\"https://chocolatey.org/api/v2/\"  --priority=3\n\t```\n\t![](/images/Chocolateyinstall3.png)\n\n\n\n#### 安装androidstudio\nandroidstudio依赖android-sdk和jdk8,android-sdk依赖jdk8。\n\nchoco安装时会自动安装依赖:`cinst androidstudio -y -s\"seuic\"`\n\n![](/images/Chocolateyinstall4.png)\n\n\n#### DownLoading components for androidstudio 及 Setting \n\n根据chocolatey安装命令行报告找到Android SDK正确安装位置进行安装\n并配置ANDROID_HOME环境变量路径\n\n#### 安装Python2\n\n\t`choco install python2`\n\n#### 安装React Native的命令行工具（react-native-cli）\n\n`npm install -g react-native-cli`\n\n#### 环境变量配置\nANDROID_HOME `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2`\n\nadb `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\platform-tools`\n\nandroid-sdk `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2`\n\nandroid-sdk/tools `C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\tools`\n\njdk8 `C:\\Program Files\\Java\\jdk1.8.0_102`\n\n#### 安装Genymotion\n\n登陆官网，注册账号，下载带有VBox的安装包\n\n[安装Genymotion教程](http://jingyan.baidu.com/article/8ebacdf02a5c3649f65cd5f0.html)\n","slug":"reactNative安装","published":0,"date":"2017-03-30T02:31:45.008Z","updated":"2017-03-31T06:20:36.589Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2wu000edoexlljjjxe7","content":"<h4 id=\"安装Chocolatey\"><a href=\"#安装Chocolatey\" class=\"headerlink\" title=\"安装Chocolatey\"></a>安装Chocolatey</h4><ul>\n<li><p>以管理员身份运行CMD:</p>\n<p>  <a href=\"https://chocolatey.org/install\" target=\"_blank\" rel=\"external\">Chocolatey官网</a></p>\n<p>  <code>@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin&quot;</code></p>\n<p>  <img src=\"/images/Chocolateyinstall.png\" alt=\"\"></p>\n</li>\n<li><p>检查安装情况</p>\n<p>  <code>chocolatey help</code></p>\n<p>  <img src=\"/images/Chocolateyinstall1.png\" alt=\"\"></p>\n<p>  <code>choco feature enable -n useFipsCompliantChecksums</code></p>\n<p>  <img src=\"/images/Chocolateyinstall2.png\" alt=\"\"></p>\n</li>\n<li><p>添加seuic源</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco source add -n=seuic -s&quot;http://choco.seuic.info/nuget/&quot; </div><div class=\"line\">choco source remove -n=chocolatey</div><div class=\"line\">choco source add -n=chocolatey -s&quot;https://chocolatey.org/api/v2/&quot;  --priority=3</div></pre></td></tr></table></figure>\n<p>  <img src=\"/images/Chocolateyinstall3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"安装androidstudio\"><a href=\"#安装androidstudio\" class=\"headerlink\" title=\"安装androidstudio\"></a>安装androidstudio</h4><p>androidstudio依赖android-sdk和jdk8,android-sdk依赖jdk8。</p>\n<p>choco安装时会自动安装依赖:<code>cinst androidstudio -y -s&quot;seuic&quot;</code></p>\n<p><img src=\"/images/Chocolateyinstall4.png\" alt=\"\"></p>\n<h4 id=\"DownLoading-components-for-androidstudio-及-Setting\"><a href=\"#DownLoading-components-for-androidstudio-及-Setting\" class=\"headerlink\" title=\"DownLoading components for androidstudio 及 Setting\"></a>DownLoading components for androidstudio 及 Setting</h4><p>根据chocolatey安装命令行报告找到Android SDK正确安装位置进行安装<br>并配置ANDROID_HOME环境变量路径</p>\n<h4 id=\"安装Python2\"><a href=\"#安装Python2\" class=\"headerlink\" title=\"安装Python2\"></a>安装Python2</h4><pre><code>`choco install python2`\n</code></pre><h4 id=\"安装React-Native的命令行工具（react-native-cli）\"><a href=\"#安装React-Native的命令行工具（react-native-cli）\" class=\"headerlink\" title=\"安装React Native的命令行工具（react-native-cli）\"></a>安装React Native的命令行工具（react-native-cli）</h4><p><code>npm install -g react-native-cli</code></p>\n<h4 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h4><p>ANDROID_HOME <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2</code></p>\n<p>adb <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\platform-tools</code></p>\n<p>android-sdk <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2</code></p>\n<p>android-sdk/tools <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\tools</code></p>\n<p>jdk8 <code>C:\\Program Files\\Java\\jdk1.8.0_102</code></p>\n<h4 id=\"安装Genymotion\"><a href=\"#安装Genymotion\" class=\"headerlink\" title=\"安装Genymotion\"></a>安装Genymotion</h4><p>登陆官网，注册账号，下载带有VBox的安装包</p>\n<p><a href=\"http://jingyan.baidu.com/article/8ebacdf02a5c3649f65cd5f0.html\" target=\"_blank\" rel=\"external\">安装Genymotion教程</a></p>\n","excerpt":"","more":"<h4 id=\"安装Chocolatey\"><a href=\"#安装Chocolatey\" class=\"headerlink\" title=\"安装Chocolatey\"></a>安装Chocolatey</h4><ul>\n<li><p>以管理员身份运行CMD:</p>\n<p>  <a href=\"https://chocolatey.org/install\">Chocolatey官网</a></p>\n<p>  <code>@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin&quot;</code></p>\n<p>  <img src=\"/images/Chocolateyinstall.png\" alt=\"\"></p>\n</li>\n<li><p>检查安装情况</p>\n<p>  <code>chocolatey help</code></p>\n<p>  <img src=\"/images/Chocolateyinstall1.png\" alt=\"\"></p>\n<p>  <code>choco feature enable -n useFipsCompliantChecksums</code></p>\n<p>  <img src=\"/images/Chocolateyinstall2.png\" alt=\"\"></p>\n</li>\n<li><p>添加seuic源</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco source add -n=seuic -s&quot;http://choco.seuic.info/nuget/&quot; </div><div class=\"line\">choco source remove -n=chocolatey</div><div class=\"line\">choco source add -n=chocolatey -s&quot;https://chocolatey.org/api/v2/&quot;  --priority=3</div></pre></td></tr></table></figure>\n<p>  <img src=\"/images/Chocolateyinstall3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"安装androidstudio\"><a href=\"#安装androidstudio\" class=\"headerlink\" title=\"安装androidstudio\"></a>安装androidstudio</h4><p>androidstudio依赖android-sdk和jdk8,android-sdk依赖jdk8。</p>\n<p>choco安装时会自动安装依赖:<code>cinst androidstudio -y -s&quot;seuic&quot;</code></p>\n<p><img src=\"/images/Chocolateyinstall4.png\" alt=\"\"></p>\n<h4 id=\"DownLoading-components-for-androidstudio-及-Setting\"><a href=\"#DownLoading-components-for-androidstudio-及-Setting\" class=\"headerlink\" title=\"DownLoading components for androidstudio 及 Setting\"></a>DownLoading components for androidstudio 及 Setting</h4><p>根据chocolatey安装命令行报告找到Android SDK正确安装位置进行安装<br>并配置ANDROID_HOME环境变量路径</p>\n<h4 id=\"安装Python2\"><a href=\"#安装Python2\" class=\"headerlink\" title=\"安装Python2\"></a>安装Python2</h4><pre><code>`choco install python2`\n</code></pre><h4 id=\"安装React-Native的命令行工具（react-native-cli）\"><a href=\"#安装React-Native的命令行工具（react-native-cli）\" class=\"headerlink\" title=\"安装React Native的命令行工具（react-native-cli）\"></a>安装React Native的命令行工具（react-native-cli）</h4><p><code>npm install -g react-native-cli</code></p>\n<h4 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h4><p>ANDROID_HOME <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2</code></p>\n<p>adb <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\platform-tools</code></p>\n<p>android-sdk <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2</code></p>\n<p>android-sdk/tools <code>C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey\\android-sdk\\24.4.1.2\\tools</code></p>\n<p>jdk8 <code>C:\\Program Files\\Java\\jdk1.8.0_102</code></p>\n<h4 id=\"安装Genymotion\"><a href=\"#安装Genymotion\" class=\"headerlink\" title=\"安装Genymotion\"></a>安装Genymotion</h4><p>登陆官网，注册账号，下载带有VBox的安装包</p>\n<p><a href=\"http://jingyan.baidu.com/article/8ebacdf02a5c3649f65cd5f0.html\">安装Genymotion教程</a></p>\n"},{"_content":"有些用户在使用git pull命令更新本地项目的时候会遇到“No remote repository specified……”的错误，那么要如何解决呢？\n\ngit pull\n\nfatal: No remote repository specified.  Please, specify either a URL or a\n\nremote name from which new revisions should be fetched.\n\n其实出问题的原因是.git/config的配置出问题了。\n\n解决方法：\n\n修改“.git”文件夹里面的“config”文件的url就可以了：\n\n[core]\n\n        repositoryformatversion = 0\n\n        filemode = true\n\n        bare = false\n\n        logallrefupdates = true\n\n        ignorecase = true\n\n        precomposeunicode = false\n\n[remote \"origin\"]\n\n        url = https://github.com/checkfrank/checkfrank.github.io.git\n\n        fetch = +refs/heads/*:refs/remotes/origin/*\n\n        pushurl = https://github.com/checkfrank/checkfrank.github.io.git\n\n[branch \"master\"]\n\n        remote = origin\n\n        merge = refs/heads/master\n\n把其中换成你项目的地址就可以了：\n\nurl = https://github.com/CrossLee/xxx.git\n\npushurl = https://github.com/CrossLee/xxx.git","source":"_drafts/git pull“No remote repository specified”.md","raw":"有些用户在使用git pull命令更新本地项目的时候会遇到“No remote repository specified……”的错误，那么要如何解决呢？\n\ngit pull\n\nfatal: No remote repository specified.  Please, specify either a URL or a\n\nremote name from which new revisions should be fetched.\n\n其实出问题的原因是.git/config的配置出问题了。\n\n解决方法：\n\n修改“.git”文件夹里面的“config”文件的url就可以了：\n\n[core]\n\n        repositoryformatversion = 0\n\n        filemode = true\n\n        bare = false\n\n        logallrefupdates = true\n\n        ignorecase = true\n\n        precomposeunicode = false\n\n[remote \"origin\"]\n\n        url = https://github.com/checkfrank/checkfrank.github.io.git\n\n        fetch = +refs/heads/*:refs/remotes/origin/*\n\n        pushurl = https://github.com/checkfrank/checkfrank.github.io.git\n\n[branch \"master\"]\n\n        remote = origin\n\n        merge = refs/heads/master\n\n把其中换成你项目的地址就可以了：\n\nurl = https://github.com/CrossLee/xxx.git\n\npushurl = https://github.com/CrossLee/xxx.git","slug":"git pull“No remote repository specified”","published":0,"date":"2017-03-15T02:18:18.948Z","updated":"2017-03-15T02:18:40.443Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2ww000gdoex4i9z5jnh","content":"<p>有些用户在使用git pull命令更新本地项目的时候会遇到“No remote repository specified……”的错误，那么要如何解决呢？</p>\n<p>git pull</p>\n<p>fatal: No remote repository specified.  Please, specify either a URL or a</p>\n<p>remote name from which new revisions should be fetched.</p>\n<p>其实出问题的原因是.git/config的配置出问题了。</p>\n<p>解决方法：</p>\n<p>修改“.git”文件夹里面的“config”文件的url就可以了：</p>\n<p>[core]</p>\n<pre><code>repositoryformatversion = 0\n\nfilemode = true\n\nbare = false\n\nlogallrefupdates = true\n\nignorecase = true\n\nprecomposeunicode = false\n</code></pre><p>[remote “origin”]</p>\n<pre><code>url = https://github.com/checkfrank/checkfrank.github.io.git\n\nfetch = +refs/heads/*:refs/remotes/origin/*\n\npushurl = https://github.com/checkfrank/checkfrank.github.io.git\n</code></pre><p>[branch “master”]</p>\n<pre><code>remote = origin\n\nmerge = refs/heads/master\n</code></pre><p>把其中换成你项目的地址就可以了：</p>\n<p>url = <a href=\"https://github.com/CrossLee/xxx.git\" target=\"_blank\" rel=\"external\">https://github.com/CrossLee/xxx.git</a></p>\n<p>pushurl = <a href=\"https://github.com/CrossLee/xxx.git\" target=\"_blank\" rel=\"external\">https://github.com/CrossLee/xxx.git</a></p>\n","excerpt":"","more":"<p>有些用户在使用git pull命令更新本地项目的时候会遇到“No remote repository specified……”的错误，那么要如何解决呢？</p>\n<p>git pull</p>\n<p>fatal: No remote repository specified.  Please, specify either a URL or a</p>\n<p>remote name from which new revisions should be fetched.</p>\n<p>其实出问题的原因是.git/config的配置出问题了。</p>\n<p>解决方法：</p>\n<p>修改“.git”文件夹里面的“config”文件的url就可以了：</p>\n<p>[core]</p>\n<pre><code>repositoryformatversion = 0\n\nfilemode = true\n\nbare = false\n\nlogallrefupdates = true\n\nignorecase = true\n\nprecomposeunicode = false\n</code></pre><p>[remote “origin”]</p>\n<pre><code>url = https://github.com/checkfrank/checkfrank.github.io.git\n\nfetch = +refs/heads/*:refs/remotes/origin/*\n\npushurl = https://github.com/checkfrank/checkfrank.github.io.git\n</code></pre><p>[branch “master”]</p>\n<pre><code>remote = origin\n\nmerge = refs/heads/master\n</code></pre><p>把其中换成你项目的地址就可以了：</p>\n<p>url = <a href=\"https://github.com/CrossLee/xxx.git\">https://github.com/CrossLee/xxx.git</a></p>\n<p>pushurl = <a href=\"https://github.com/CrossLee/xxx.git\">https://github.com/CrossLee/xxx.git</a></p>\n"},{"title":"冬夜星星","date":"2016-12-28T05:07:52.000Z","photos":["images/bg1.jpg"],"_content":"人生是一条漫长而遥远的路，何止这一程。一个时期的终结，就是下一程的起点，我们没有选择，我们莫如所从，唯有坦然、直面。\n<!--more-->\n### 前言\n2016终于要过去了。\n\n于我而言，这一年是非凡的一年，充满艰辛、挣扎、迷惘，大概所有消极词汇用在这里都不为过吧。不过，都说成长大都是带着痛的，我既然带着这样的痛，那就不可避免的要成长。亦或是，我在前面的那段生命里，活得太过欢乐自在，欠下了成长的债，今年，一并都找上门了。今生只言温暖不诉殇，过去就让他过去吧。给那段时光画上句点，总是要往前走的。\n\n\n### 跌跌撞撞\n这一年虽然都在学习，但是实质上收获很少。\n3月到8月，将近5个月的时间确实在学习前端、写代码，也写过几个项目，不能说虚度，但是由于基础薄弱，对技术并不能很好的掌握。前期系统的对HTML、CSS、JavaScript进行了梳理，对已经掌握的知识进行了巩固，也补充学习了一部分之前遗漏的知识，例如对象拷贝,事件捕获机制，浏览器渲染过程等知识。后期跟随前端风潮，学习使用webpack，能够正常开发项目，以至于后面做的项目都是在Webpack搭建的环境下完成的。而在React和Vue之间始终不能做出痛快的抉择，大概是鱼和熊掌不可兼得又有各有所爱的偏执两者不可调和的缘故吧，想要玩最火最时尚，可是实在无法忍受JSX的写法。我的天，不是说好的要分离要解耦的吗？HTML，CSS混着来，看着真难受。讲真在用React写过一个实时评论的小玩意儿后再难出手···也浅涉Nodejs开发，搭建了一个简单的服务器。是的Nodejs确实很棒，大概就是因为他提供的是较为底层较为内核的方法给予了开发者更多自由，而高并发特性，大大提高CPU利用率和系统吞吐量，能在短时间处理大量任务，让用户程序快速得到响应，听起来就觉得不得了。是的，我准备在毕业设计里，搭上这班极速飞车( > 3 < )。\n\n8到12月一直在准备考研，虽然加强了对操作系统和数据结构的学习，但始终是缺乏实践。不过也好在对数据结构和操作系统的重温，对单线程、多线程，树、图排序等抽象问题有了很大的进步，不知道对后面的学习能不能来点Max助力。不过真的好开心，终于结束了自虐的考研，终于又可以做自己想做的事情了。\n\n学习永无止境，更不可以不规划不总结。\n\n### 新一年的展望\n\n* 英语词汇量过5500。考研确实背了很多，但并不熟练，5500一年实在不是什么大目标，但重在坚持。\n* 坚持刷算法。既然薄弱，那就克服。\n\n\n\n\n","source":"_posts/2016总结.md","raw":"---\ntitle: 冬夜星星\ndate: 2016-12-28 13:07:52\ncategories: 随笔\ntags: 总结\nphotos: images/bg1.jpg\n\n\n---\n人生是一条漫长而遥远的路，何止这一程。一个时期的终结，就是下一程的起点，我们没有选择，我们莫如所从，唯有坦然、直面。\n<!--more-->\n### 前言\n2016终于要过去了。\n\n于我而言，这一年是非凡的一年，充满艰辛、挣扎、迷惘，大概所有消极词汇用在这里都不为过吧。不过，都说成长大都是带着痛的，我既然带着这样的痛，那就不可避免的要成长。亦或是，我在前面的那段生命里，活得太过欢乐自在，欠下了成长的债，今年，一并都找上门了。今生只言温暖不诉殇，过去就让他过去吧。给那段时光画上句点，总是要往前走的。\n\n\n### 跌跌撞撞\n这一年虽然都在学习，但是实质上收获很少。\n3月到8月，将近5个月的时间确实在学习前端、写代码，也写过几个项目，不能说虚度，但是由于基础薄弱，对技术并不能很好的掌握。前期系统的对HTML、CSS、JavaScript进行了梳理，对已经掌握的知识进行了巩固，也补充学习了一部分之前遗漏的知识，例如对象拷贝,事件捕获机制，浏览器渲染过程等知识。后期跟随前端风潮，学习使用webpack，能够正常开发项目，以至于后面做的项目都是在Webpack搭建的环境下完成的。而在React和Vue之间始终不能做出痛快的抉择，大概是鱼和熊掌不可兼得又有各有所爱的偏执两者不可调和的缘故吧，想要玩最火最时尚，可是实在无法忍受JSX的写法。我的天，不是说好的要分离要解耦的吗？HTML，CSS混着来，看着真难受。讲真在用React写过一个实时评论的小玩意儿后再难出手···也浅涉Nodejs开发，搭建了一个简单的服务器。是的Nodejs确实很棒，大概就是因为他提供的是较为底层较为内核的方法给予了开发者更多自由，而高并发特性，大大提高CPU利用率和系统吞吐量，能在短时间处理大量任务，让用户程序快速得到响应，听起来就觉得不得了。是的，我准备在毕业设计里，搭上这班极速飞车( > 3 < )。\n\n8到12月一直在准备考研，虽然加强了对操作系统和数据结构的学习，但始终是缺乏实践。不过也好在对数据结构和操作系统的重温，对单线程、多线程，树、图排序等抽象问题有了很大的进步，不知道对后面的学习能不能来点Max助力。不过真的好开心，终于结束了自虐的考研，终于又可以做自己想做的事情了。\n\n学习永无止境，更不可以不规划不总结。\n\n### 新一年的展望\n\n* 英语词汇量过5500。考研确实背了很多，但并不熟练，5500一年实在不是什么大目标，但重在坚持。\n* 坚持刷算法。既然薄弱，那就克服。\n\n\n\n\n","slug":"2016总结","published":1,"updated":"2017-06-02T16:08:15.358Z","comments":1,"layout":"post","link":"","_id":"cj3imx2x1000jdoexi6kl860l","content":"<p>人生是一条漫长而遥远的路，何止这一程。一个时期的终结，就是下一程的起点，我们没有选择，我们莫如所从，唯有坦然、直面。<br><a id=\"more\"></a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>2016终于要过去了。</p>\n<p>于我而言，这一年是非凡的一年，充满艰辛、挣扎、迷惘，大概所有消极词汇用在这里都不为过吧。不过，都说成长大都是带着痛的，我既然带着这样的痛，那就不可避免的要成长。亦或是，我在前面的那段生命里，活得太过欢乐自在，欠下了成长的债，今年，一并都找上门了。今生只言温暖不诉殇，过去就让他过去吧。给那段时光画上句点，总是要往前走的。</p>\n<h3 id=\"跌跌撞撞\"><a href=\"#跌跌撞撞\" class=\"headerlink\" title=\"跌跌撞撞\"></a>跌跌撞撞</h3><p>这一年虽然都在学习，但是实质上收获很少。<br>3月到8月，将近5个月的时间确实在学习前端、写代码，也写过几个项目，不能说虚度，但是由于基础薄弱，对技术并不能很好的掌握。前期系统的对HTML、CSS、JavaScript进行了梳理，对已经掌握的知识进行了巩固，也补充学习了一部分之前遗漏的知识，例如对象拷贝,事件捕获机制，浏览器渲染过程等知识。后期跟随前端风潮，学习使用webpack，能够正常开发项目，以至于后面做的项目都是在Webpack搭建的环境下完成的。而在React和Vue之间始终不能做出痛快的抉择，大概是鱼和熊掌不可兼得又有各有所爱的偏执两者不可调和的缘故吧，想要玩最火最时尚，可是实在无法忍受JSX的写法。我的天，不是说好的要分离要解耦的吗？HTML，CSS混着来，看着真难受。讲真在用React写过一个实时评论的小玩意儿后再难出手···也浅涉Nodejs开发，搭建了一个简单的服务器。是的Nodejs确实很棒，大概就是因为他提供的是较为底层较为内核的方法给予了开发者更多自由，而高并发特性，大大提高CPU利用率和系统吞吐量，能在短时间处理大量任务，让用户程序快速得到响应，听起来就觉得不得了。是的，我准备在毕业设计里，搭上这班极速飞车( &gt; 3 &lt; )。</p>\n<p>8到12月一直在准备考研，虽然加强了对操作系统和数据结构的学习，但始终是缺乏实践。不过也好在对数据结构和操作系统的重温，对单线程、多线程，树、图排序等抽象问题有了很大的进步，不知道对后面的学习能不能来点Max助力。不过真的好开心，终于结束了自虐的考研，终于又可以做自己想做的事情了。</p>\n<p>学习永无止境，更不可以不规划不总结。</p>\n<h3 id=\"新一年的展望\"><a href=\"#新一年的展望\" class=\"headerlink\" title=\"新一年的展望\"></a>新一年的展望</h3><ul>\n<li>英语词汇量过5500。考研确实背了很多，但并不熟练，5500一年实在不是什么大目标，但重在坚持。</li>\n<li>坚持刷算法。既然薄弱，那就克服。</li>\n</ul>\n","excerpt":"<p>人生是一条漫长而遥远的路，何止这一程。一个时期的终结，就是下一程的起点，我们没有选择，我们莫如所从，唯有坦然、直面。<br>","more":"</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>2016终于要过去了。</p>\n<p>于我而言，这一年是非凡的一年，充满艰辛、挣扎、迷惘，大概所有消极词汇用在这里都不为过吧。不过，都说成长大都是带着痛的，我既然带着这样的痛，那就不可避免的要成长。亦或是，我在前面的那段生命里，活得太过欢乐自在，欠下了成长的债，今年，一并都找上门了。今生只言温暖不诉殇，过去就让他过去吧。给那段时光画上句点，总是要往前走的。</p>\n<h3 id=\"跌跌撞撞\"><a href=\"#跌跌撞撞\" class=\"headerlink\" title=\"跌跌撞撞\"></a>跌跌撞撞</h3><p>这一年虽然都在学习，但是实质上收获很少。<br>3月到8月，将近5个月的时间确实在学习前端、写代码，也写过几个项目，不能说虚度，但是由于基础薄弱，对技术并不能很好的掌握。前期系统的对HTML、CSS、JavaScript进行了梳理，对已经掌握的知识进行了巩固，也补充学习了一部分之前遗漏的知识，例如对象拷贝,事件捕获机制，浏览器渲染过程等知识。后期跟随前端风潮，学习使用webpack，能够正常开发项目，以至于后面做的项目都是在Webpack搭建的环境下完成的。而在React和Vue之间始终不能做出痛快的抉择，大概是鱼和熊掌不可兼得又有各有所爱的偏执两者不可调和的缘故吧，想要玩最火最时尚，可是实在无法忍受JSX的写法。我的天，不是说好的要分离要解耦的吗？HTML，CSS混着来，看着真难受。讲真在用React写过一个实时评论的小玩意儿后再难出手···也浅涉Nodejs开发，搭建了一个简单的服务器。是的Nodejs确实很棒，大概就是因为他提供的是较为底层较为内核的方法给予了开发者更多自由，而高并发特性，大大提高CPU利用率和系统吞吐量，能在短时间处理大量任务，让用户程序快速得到响应，听起来就觉得不得了。是的，我准备在毕业设计里，搭上这班极速飞车( &gt; 3 &lt; )。</p>\n<p>8到12月一直在准备考研，虽然加强了对操作系统和数据结构的学习，但始终是缺乏实践。不过也好在对数据结构和操作系统的重温，对单线程、多线程，树、图排序等抽象问题有了很大的进步，不知道对后面的学习能不能来点Max助力。不过真的好开心，终于结束了自虐的考研，终于又可以做自己想做的事情了。</p>\n<p>学习永无止境，更不可以不规划不总结。</p>\n<h3 id=\"新一年的展望\"><a href=\"#新一年的展望\" class=\"headerlink\" title=\"新一年的展望\"></a>新一年的展望</h3><ul>\n<li>英语词汇量过5500。考研确实背了很多，但并不熟练，5500一年实在不是什么大目标，但重在坚持。</li>\n<li>坚持刷算法。既然薄弱，那就克服。</li>\n</ul>"},{"title":"动态创建DOM元素","date":"2017-02-10T13:51:20.000Z","_content":"在实际开发过程中，经常需要动态添加元素。\n<!--more-->\n#### JQuery创建DOM元素 ####\n\nHTML\n```\n<div class=\"pc-container\">\n</div>\n```\n\nJQuery\n```\nvar container = $('.pc-container');\n$('<img>').attr({\n            src:'images/star.png'\n        }).css({\n                top:'50px',\n                left:'50px',\n                transform:'scale(.5) rotateZ(90deg)',\n                position: 'absolute'\n }).addClass('myImg').appendTo('.pc-container');\n```\n\n\n\n\n#### JavaScript创建DOM元素 ####\n\nHTML\n```\n<div class=\"pc-container\">\n</div>\n```\nJavaScript\n```\nvar container=document.getElementsByClassName('.pc-container')[0];\nvar div=document.createElement('div');\ndiv.setAttribute('id','example');// div.id = \"example\";div.className = \"slogan\";\ndiv.style.width='120px';\ncontainer.appendChild(div);\n```\n\n\n\n#### 插入元素的几种方法 ####\n\n这里顺便总结一下插入元素的几种方法\n\n** JavaScript：**\nelement1.appendChild(element2); 在element1的内部结尾追加element2.\n\n** JQuery: **\n```\n$(A).append(content|fn) 在匹配的元素A内部结尾追加内容 \n$(A).appendTo(B) 将A的内容追加到B内部结尾 \n$(A).prepend(content) 在匹配的元素A内部的开头插入content内容 \n$(A).prependTo(B) 将匹配到的A元素追加到B的开头\n\n$(A).after(content) 在匹配的元素A之后插入内容content \n$(A).before(content) 在匹配的元素A之前插入内容content \n$(A).insertAfter(B) 将A的内容追加到B之后 \n$(A).insertBefore(B) 将A的内容追加到B之前\n```\n\n","source":"_posts/JQuery创建Dom元素.md","raw":"---\ntitle: 动态创建DOM元素\ndate: 2017-02-10 21:51:20\ncategories: JavaScript\ntags: JavaScript\n---\n在实际开发过程中，经常需要动态添加元素。\n<!--more-->\n#### JQuery创建DOM元素 ####\n\nHTML\n```\n<div class=\"pc-container\">\n</div>\n```\n\nJQuery\n```\nvar container = $('.pc-container');\n$('<img>').attr({\n            src:'images/star.png'\n        }).css({\n                top:'50px',\n                left:'50px',\n                transform:'scale(.5) rotateZ(90deg)',\n                position: 'absolute'\n }).addClass('myImg').appendTo('.pc-container');\n```\n\n\n\n\n#### JavaScript创建DOM元素 ####\n\nHTML\n```\n<div class=\"pc-container\">\n</div>\n```\nJavaScript\n```\nvar container=document.getElementsByClassName('.pc-container')[0];\nvar div=document.createElement('div');\ndiv.setAttribute('id','example');// div.id = \"example\";div.className = \"slogan\";\ndiv.style.width='120px';\ncontainer.appendChild(div);\n```\n\n\n\n#### 插入元素的几种方法 ####\n\n这里顺便总结一下插入元素的几种方法\n\n** JavaScript：**\nelement1.appendChild(element2); 在element1的内部结尾追加element2.\n\n** JQuery: **\n```\n$(A).append(content|fn) 在匹配的元素A内部结尾追加内容 \n$(A).appendTo(B) 将A的内容追加到B内部结尾 \n$(A).prepend(content) 在匹配的元素A内部的开头插入content内容 \n$(A).prependTo(B) 将匹配到的A元素追加到B的开头\n\n$(A).after(content) 在匹配的元素A之后插入内容content \n$(A).before(content) 在匹配的元素A之前插入内容content \n$(A).insertAfter(B) 将A的内容追加到B之后 \n$(A).insertBefore(B) 将A的内容追加到B之前\n```\n\n","slug":"JQuery创建Dom元素","published":1,"updated":"2017-06-02T16:13:20.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2x6000kdoex1di3txbp","content":"<p>在实际开发过程中，经常需要动态添加元素。<br><a id=\"more\"></a></p>\n<h4 id=\"JQuery创建DOM元素\"><a href=\"#JQuery创建DOM元素\" class=\"headerlink\" title=\"JQuery创建DOM元素\"></a>JQuery创建DOM元素</h4><p>HTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pc-container&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>JQuery<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var container = $(&apos;.pc-container&apos;);</div><div class=\"line\">$(&apos;&lt;img&gt;&apos;).attr(&#123;</div><div class=\"line\">            src:&apos;images/star.png&apos;</div><div class=\"line\">        &#125;).css(&#123;</div><div class=\"line\">                top:&apos;50px&apos;,</div><div class=\"line\">                left:&apos;50px&apos;,</div><div class=\"line\">                transform:&apos;scale(.5) rotateZ(90deg)&apos;,</div><div class=\"line\">                position: &apos;absolute&apos;</div><div class=\"line\"> &#125;).addClass(&apos;myImg&apos;).appendTo(&apos;.pc-container&apos;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript创建DOM元素\"><a href=\"#JavaScript创建DOM元素\" class=\"headerlink\" title=\"JavaScript创建DOM元素\"></a>JavaScript创建DOM元素</h4><p>HTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pc-container&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>JavaScript<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var container=document.getElementsByClassName(&apos;.pc-container&apos;)[0];</div><div class=\"line\">var div=document.createElement(&apos;div&apos;);</div><div class=\"line\">div.setAttribute(&apos;id&apos;,&apos;example&apos;);// div.id = &quot;example&quot;;div.className = &quot;slogan&quot;;</div><div class=\"line\">div.style.width=&apos;120px&apos;;</div><div class=\"line\">container.appendChild(div);</div></pre></td></tr></table></figure></p>\n<h4 id=\"插入元素的几种方法\"><a href=\"#插入元素的几种方法\" class=\"headerlink\" title=\"插入元素的几种方法\"></a>插入元素的几种方法</h4><p>这里顺便总结一下插入元素的几种方法</p>\n<p><strong> JavaScript：</strong><br>element1.appendChild(element2); 在element1的内部结尾追加element2.</p>\n<p><strong> JQuery: </strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(A).append(content|fn) 在匹配的元素A内部结尾追加内容 </div><div class=\"line\">$(A).appendTo(B) 将A的内容追加到B内部结尾 </div><div class=\"line\">$(A).prepend(content) 在匹配的元素A内部的开头插入content内容 </div><div class=\"line\">$(A).prependTo(B) 将匹配到的A元素追加到B的开头</div><div class=\"line\"></div><div class=\"line\">$(A).after(content) 在匹配的元素A之后插入内容content </div><div class=\"line\">$(A).before(content) 在匹配的元素A之前插入内容content </div><div class=\"line\">$(A).insertAfter(B) 将A的内容追加到B之后 </div><div class=\"line\">$(A).insertBefore(B) 将A的内容追加到B之前</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>在实际开发过程中，经常需要动态添加元素。<br>","more":"</p>\n<h4 id=\"JQuery创建DOM元素\"><a href=\"#JQuery创建DOM元素\" class=\"headerlink\" title=\"JQuery创建DOM元素\"></a>JQuery创建DOM元素</h4><p>HTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pc-container&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>JQuery<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var container = $(&apos;.pc-container&apos;);</div><div class=\"line\">$(&apos;&lt;img&gt;&apos;).attr(&#123;</div><div class=\"line\">            src:&apos;images/star.png&apos;</div><div class=\"line\">        &#125;).css(&#123;</div><div class=\"line\">                top:&apos;50px&apos;,</div><div class=\"line\">                left:&apos;50px&apos;,</div><div class=\"line\">                transform:&apos;scale(.5) rotateZ(90deg)&apos;,</div><div class=\"line\">                position: &apos;absolute&apos;</div><div class=\"line\"> &#125;).addClass(&apos;myImg&apos;).appendTo(&apos;.pc-container&apos;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript创建DOM元素\"><a href=\"#JavaScript创建DOM元素\" class=\"headerlink\" title=\"JavaScript创建DOM元素\"></a>JavaScript创建DOM元素</h4><p>HTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pc-container&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>JavaScript<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var container=document.getElementsByClassName(&apos;.pc-container&apos;)[0];</div><div class=\"line\">var div=document.createElement(&apos;div&apos;);</div><div class=\"line\">div.setAttribute(&apos;id&apos;,&apos;example&apos;);// div.id = &quot;example&quot;;div.className = &quot;slogan&quot;;</div><div class=\"line\">div.style.width=&apos;120px&apos;;</div><div class=\"line\">container.appendChild(div);</div></pre></td></tr></table></figure></p>\n<h4 id=\"插入元素的几种方法\"><a href=\"#插入元素的几种方法\" class=\"headerlink\" title=\"插入元素的几种方法\"></a>插入元素的几种方法</h4><p>这里顺便总结一下插入元素的几种方法</p>\n<p><strong> JavaScript：</strong><br>element1.appendChild(element2); 在element1的内部结尾追加element2.</p>\n<p><strong> JQuery: </strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(A).append(content|fn) 在匹配的元素A内部结尾追加内容 </div><div class=\"line\">$(A).appendTo(B) 将A的内容追加到B内部结尾 </div><div class=\"line\">$(A).prepend(content) 在匹配的元素A内部的开头插入content内容 </div><div class=\"line\">$(A).prependTo(B) 将匹配到的A元素追加到B的开头</div><div class=\"line\"></div><div class=\"line\">$(A).after(content) 在匹配的元素A之后插入内容content </div><div class=\"line\">$(A).before(content) 在匹配的元素A之前插入内容content </div><div class=\"line\">$(A).insertAfter(B) 将A的内容追加到B之后 </div><div class=\"line\">$(A).insertBefore(B) 将A的内容追加到B之前</div></pre></td></tr></table></figure></p>"},{"title":"JavaScript数组","date":"2017-02-18T14:24:19.000Z","_content":"数组在javascript中是一种特殊对象，拥有许多方法。数组在JavaScript中功能强大，非常有必要熟练掌握。\n\n<!--more-->\n### 创建数组 ###\n\n#### []操作符\n  \n```\n\tvar Arr=[];\n\tArr.length;//0\n\tvar Arr=[1,2,3,4,5];\n\tArr.length;//5\n```\n\n#### 调用Array构造函数\n\n```\nvar Arr=new Array(1,2,3,4,5);\nconsole.log(Arr.length);//5\nvar Arr=new Array(10);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407105230640)\n\n\n### 数组的各种方法 ###\n\n#### split()生成数组\n\n以某分隔符将字符串分成几部分，并将每部分作为一个元素保存于一个新建的数组中。\n\n```\nvar str='nice to meet you';\nvar arr=str.split(\" \");\nfor(var i=0;i<arr.length;i++){\n\tconsole.log(arr[i]);\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407110758114)\n\n\n\n#### indexOf()&lastIndexOf()索引\n\n用来查找传进来的参数在目标数组中是否存在，并返回其第一次出现的索引，否则返回-1。**lastIndexOf()**与indexOf()类似，只是从后开始检索，返回其最后一次出现的索引。\n```\nvar arr=['hi','hello','halo','hello'];\nconsole.log(arr.indexOf('hello');\nconsole.log(arr.lastIndexOf('hello'));\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407111640493)\n\n\n\n#### jion()&toString()数组转化字符串\n\n在jion()没有参数的情况下， jion()、toString()都将数组转化为以逗号分隔的字符串。当jion()带参数，则数组被转化为由该参数为分隔符的字符串\n\n```\nvar arr=['hi','hello','halo','hello'];\nconsole.log(arr.join());\nconsole.log(arr.toString());\nconsole.log(arr.join('||'));\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407112507949)\n\n\n#### splice()&concat()由已有数组创建新数组\n\nconcat()合并多个数组，A.concat(B,C)将生成一个新数组，并且顺序由A->C;\nsplice(a,b,c)有三个参数，功能也由这三个参数决定，当只有一个参数时和slice只有一个参数一样从该参数为索引一直截取到最后一个元素,当只有两个参数时，则意味从索引a开始截取b个元素，当有三个参数时则意味从索引a开始截取b个元素并在此索引处插入c元素，c元素可以为多个元素。\nsplice会生成新的数组也会改变旧数组。\n\n\n\n```\nvar arr1=['hi1','hello1','halo1','hello1'];\nvar arr2=['hi2','hello2','halo2','hello2'];\nconsole.log(arr1.join());\nconsole.log(arr2.join());\nvar arr3=arr1.concat(arr2);\nvar arr4=arr1.splice(2,1);\nconsole.log(arr1.join());\nconsole.log(arr2.join());\nconsole.log(arr3.join());\nconsole.log(arr4.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407113746642)\n\n\n\n#### push()&unshift()为数组添加元素\n \npush()将元素添加到数组末尾。\nunshift()将元素添加到数组开头。\n\n```\nvar arr=['b','c','d'];\nconsole.log(arr.join());\narr.push('e');\nconsole.log(arr.join());\narr.unshift('a');\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115105772)\n\n\n\n#### pop()&shift()为数组删除元素\n \npop()将数组末尾元素删除。\nshift()将数组开头元素删除。\n```\nvar arr=['a','b','c','d','e'];\nconsole.log(arr.join());\narr.pop();\nconsole.log(arr.join());\narr.shift();\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115302069)\n\n\n\n\n#### reverse()&sort()为数组排序\n \n[sort详解](http://m.blog.csdn.net/article/details?id=51043357)\nreverse()数组元素倒序排列。\n\n```\nvar arr=['a','b','c','d','e'];\nconsole.log(arr.join());\narr.reverse();\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115825446)\n\n\n\n\n\n#### 不生成新数组的迭代器\n    \n\n- forEach()接受一个函数作为参数，对数组每一个元素执行该函数。该函数没有返回值。他是**只读**操作，不会改变原始数组，如果希望改变元素数组··目前我没想到使用什么方法，姑且先使用map（），将生成了新元素的数组赋值到原始数组达到目的。\n\n```\nvar arr=[1,2,3,4,5,6];\nfunction square(num){\n\tconsole.log(num+'的平方为'+num*num)\n}\narr.forEach(square);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407123208508)\n\n- every()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，如果对于所有的元素该函数都返回true，则every()返回true。\n\n- some()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，只要有一个元素执行该函数返回true，则some()返回true。\n\n- reduce()接受一个函数作为参数，对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。\n\n```\nvar arr=[1,2,3,4,5,6,7,8,9];\nfunction add(e,f) {\n\treturn e+f;\n}\nvar arrStr=arr.reduce(add);\nconsole.log(arr.join());\nconsole.log(arrStr);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407124159324)\n- reduceRight()接受一个函数作为参数，倒序对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。\n\n```\nvar arr=['1','2','3','4','5','6','7','8','9'];\nfunction add(e,f) {\n\treturn e+f;\n}\nvar arrStr1=arr.reduce(add);\nvar arrStr2=arr.reduceRight(add);\nconsole.log(arr.join());\nconsole.log(arrStr1);\nconsole.log(arrStr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407124317137)\n\n\n\n\n#### 生成新数组的迭代器\n \n\nmap()与 forEach()类似，接受一个函数作为参数，对数组每一个元素执行该函数，但该函数有返回值。\n\n```\nvar arr1=[1,2,3,4,5,6];\nfunction square(num){\n\treturn num*num;\n}\nvar arr2=arr1.map(square);\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407130959055)\n\nfilter与every()相似接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，filter会返回一个新数组，新数组包括执行该函数返回值为true的所有元素。\n\n```\nvar arr1=[1,2,3,4,5,6];\nfunction iseven(num){\n\treturn num%2==0;\n}\nvar arr2=arr1.filter(iseven);\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407131410932)\n\n\n\n#### 复制数组\n \n- 浅度复制\n浅度复制即将一个数组直接赋值给另一个数组，这只是为原先的数组增加了一个引用而已。\n\n```\nvar arr1=[1,2,3,4,5,6];\nvar arr2=arr1;\n\nconsole.log(arr1);\nconsole.log(arr2);\narr1[0]=9999;\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407131837309)\n\n- 深度复制\n我们可以自定义一个深度复制copy()方法\n\n\t```\n\tvar arr1=[1,2,3,4,5,6];\n\tvar arr2;\n\tcopy(arr1,arr2);\n\tconsole.log(arr1.join());\n\tconsole.log(arr2.join());\n\n\tarr1[0]=9999;\n\tconsole.log(arr1.join());\n\tconsole.log(arr2.join());\n\tfunction copy (arr1,arr2) {\n\t\tfor (var i = 0; i <arr1.length; i++) {\n\t\t\tarr2[i]=arr1[i];\n\t\t};\n\t}\n\t```\n![这里写图片描述](http://img.blog.csdn.net/20160407132652062)\n\n\n\n#### 创建二维数组\n \n\n```\nArray.matrix=function(row,col,int){\n\tvar arr=[];\n\tfor (var i = 0; i < row; i++) {\n\t\tvar cols=[];\n\t\tfor (var j = 0; j < col; j++) {\n\t\t\tcols[j]=int;\n\t\t};\n\t\tarr[i]=cols;\n\t};\n\treturn arr;\n}\nvar nums=Array.matrix(5,5,'Liz');\nconsole.log(nums.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160408084309336)\n\n\n\n#### 创建参差不齐的\n \n其实只要知道了行数就行了。\n先创建N行1列的数组，有需要再往里面添加便是\n\n \n#### 处理二维数组\n \n一般分两种，按行遍历和按列遍历。\n","source":"_posts/JavaScript数组.md","raw":"---\ntitle: JavaScript数组\ndate: 2017-02-18 22:24:19\ncategories: JavaScript\ntags: [JavaScript,数组]\n\n---\n数组在javascript中是一种特殊对象，拥有许多方法。数组在JavaScript中功能强大，非常有必要熟练掌握。\n\n<!--more-->\n### 创建数组 ###\n\n#### []操作符\n  \n```\n\tvar Arr=[];\n\tArr.length;//0\n\tvar Arr=[1,2,3,4,5];\n\tArr.length;//5\n```\n\n#### 调用Array构造函数\n\n```\nvar Arr=new Array(1,2,3,4,5);\nconsole.log(Arr.length);//5\nvar Arr=new Array(10);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407105230640)\n\n\n### 数组的各种方法 ###\n\n#### split()生成数组\n\n以某分隔符将字符串分成几部分，并将每部分作为一个元素保存于一个新建的数组中。\n\n```\nvar str='nice to meet you';\nvar arr=str.split(\" \");\nfor(var i=0;i<arr.length;i++){\n\tconsole.log(arr[i]);\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407110758114)\n\n\n\n#### indexOf()&lastIndexOf()索引\n\n用来查找传进来的参数在目标数组中是否存在，并返回其第一次出现的索引，否则返回-1。**lastIndexOf()**与indexOf()类似，只是从后开始检索，返回其最后一次出现的索引。\n```\nvar arr=['hi','hello','halo','hello'];\nconsole.log(arr.indexOf('hello');\nconsole.log(arr.lastIndexOf('hello'));\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407111640493)\n\n\n\n#### jion()&toString()数组转化字符串\n\n在jion()没有参数的情况下， jion()、toString()都将数组转化为以逗号分隔的字符串。当jion()带参数，则数组被转化为由该参数为分隔符的字符串\n\n```\nvar arr=['hi','hello','halo','hello'];\nconsole.log(arr.join());\nconsole.log(arr.toString());\nconsole.log(arr.join('||'));\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407112507949)\n\n\n#### splice()&concat()由已有数组创建新数组\n\nconcat()合并多个数组，A.concat(B,C)将生成一个新数组，并且顺序由A->C;\nsplice(a,b,c)有三个参数，功能也由这三个参数决定，当只有一个参数时和slice只有一个参数一样从该参数为索引一直截取到最后一个元素,当只有两个参数时，则意味从索引a开始截取b个元素，当有三个参数时则意味从索引a开始截取b个元素并在此索引处插入c元素，c元素可以为多个元素。\nsplice会生成新的数组也会改变旧数组。\n\n\n\n```\nvar arr1=['hi1','hello1','halo1','hello1'];\nvar arr2=['hi2','hello2','halo2','hello2'];\nconsole.log(arr1.join());\nconsole.log(arr2.join());\nvar arr3=arr1.concat(arr2);\nvar arr4=arr1.splice(2,1);\nconsole.log(arr1.join());\nconsole.log(arr2.join());\nconsole.log(arr3.join());\nconsole.log(arr4.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407113746642)\n\n\n\n#### push()&unshift()为数组添加元素\n \npush()将元素添加到数组末尾。\nunshift()将元素添加到数组开头。\n\n```\nvar arr=['b','c','d'];\nconsole.log(arr.join());\narr.push('e');\nconsole.log(arr.join());\narr.unshift('a');\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115105772)\n\n\n\n#### pop()&shift()为数组删除元素\n \npop()将数组末尾元素删除。\nshift()将数组开头元素删除。\n```\nvar arr=['a','b','c','d','e'];\nconsole.log(arr.join());\narr.pop();\nconsole.log(arr.join());\narr.shift();\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115302069)\n\n\n\n\n#### reverse()&sort()为数组排序\n \n[sort详解](http://m.blog.csdn.net/article/details?id=51043357)\nreverse()数组元素倒序排列。\n\n```\nvar arr=['a','b','c','d','e'];\nconsole.log(arr.join());\narr.reverse();\nconsole.log(arr.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407115825446)\n\n\n\n\n\n#### 不生成新数组的迭代器\n    \n\n- forEach()接受一个函数作为参数，对数组每一个元素执行该函数。该函数没有返回值。他是**只读**操作，不会改变原始数组，如果希望改变元素数组··目前我没想到使用什么方法，姑且先使用map（），将生成了新元素的数组赋值到原始数组达到目的。\n\n```\nvar arr=[1,2,3,4,5,6];\nfunction square(num){\n\tconsole.log(num+'的平方为'+num*num)\n}\narr.forEach(square);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407123208508)\n\n- every()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，如果对于所有的元素该函数都返回true，则every()返回true。\n\n- some()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，只要有一个元素执行该函数返回true，则some()返回true。\n\n- reduce()接受一个函数作为参数，对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。\n\n```\nvar arr=[1,2,3,4,5,6,7,8,9];\nfunction add(e,f) {\n\treturn e+f;\n}\nvar arrStr=arr.reduce(add);\nconsole.log(arr.join());\nconsole.log(arrStr);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407124159324)\n- reduceRight()接受一个函数作为参数，倒序对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。\n\n```\nvar arr=['1','2','3','4','5','6','7','8','9'];\nfunction add(e,f) {\n\treturn e+f;\n}\nvar arrStr1=arr.reduce(add);\nvar arrStr2=arr.reduceRight(add);\nconsole.log(arr.join());\nconsole.log(arrStr1);\nconsole.log(arrStr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407124317137)\n\n\n\n\n#### 生成新数组的迭代器\n \n\nmap()与 forEach()类似，接受一个函数作为参数，对数组每一个元素执行该函数，但该函数有返回值。\n\n```\nvar arr1=[1,2,3,4,5,6];\nfunction square(num){\n\treturn num*num;\n}\nvar arr2=arr1.map(square);\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407130959055)\n\nfilter与every()相似接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，filter会返回一个新数组，新数组包括执行该函数返回值为true的所有元素。\n\n```\nvar arr1=[1,2,3,4,5,6];\nfunction iseven(num){\n\treturn num%2==0;\n}\nvar arr2=arr1.filter(iseven);\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407131410932)\n\n\n\n#### 复制数组\n \n- 浅度复制\n浅度复制即将一个数组直接赋值给另一个数组，这只是为原先的数组增加了一个引用而已。\n\n```\nvar arr1=[1,2,3,4,5,6];\nvar arr2=arr1;\n\nconsole.log(arr1);\nconsole.log(arr2);\narr1[0]=9999;\nconsole.log(arr1);\nconsole.log(arr2);\n```\n![这里写图片描述](http://img.blog.csdn.net/20160407131837309)\n\n- 深度复制\n我们可以自定义一个深度复制copy()方法\n\n\t```\n\tvar arr1=[1,2,3,4,5,6];\n\tvar arr2;\n\tcopy(arr1,arr2);\n\tconsole.log(arr1.join());\n\tconsole.log(arr2.join());\n\n\tarr1[0]=9999;\n\tconsole.log(arr1.join());\n\tconsole.log(arr2.join());\n\tfunction copy (arr1,arr2) {\n\t\tfor (var i = 0; i <arr1.length; i++) {\n\t\t\tarr2[i]=arr1[i];\n\t\t};\n\t}\n\t```\n![这里写图片描述](http://img.blog.csdn.net/20160407132652062)\n\n\n\n#### 创建二维数组\n \n\n```\nArray.matrix=function(row,col,int){\n\tvar arr=[];\n\tfor (var i = 0; i < row; i++) {\n\t\tvar cols=[];\n\t\tfor (var j = 0; j < col; j++) {\n\t\t\tcols[j]=int;\n\t\t};\n\t\tarr[i]=cols;\n\t};\n\treturn arr;\n}\nvar nums=Array.matrix(5,5,'Liz');\nconsole.log(nums.join());\n```\n![这里写图片描述](http://img.blog.csdn.net/20160408084309336)\n\n\n\n#### 创建参差不齐的\n \n其实只要知道了行数就行了。\n先创建N行1列的数组，有需要再往里面添加便是\n\n \n#### 处理二维数组\n \n一般分两种，按行遍历和按列遍历。\n","slug":"JavaScript数组","published":1,"updated":"2017-06-02T16:13:31.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xc000odoexb37slupg","content":"<p>数组在javascript中是一种特殊对象，拥有许多方法。数组在JavaScript中功能强大，非常有必要熟练掌握。</p>\n<a id=\"more\"></a>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"[]操作符\"></a>[]操作符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Arr=[];</div><div class=\"line\">Arr.length;//0</div><div class=\"line\">var Arr=[1,2,3,4,5];</div><div class=\"line\">Arr.length;//5</div></pre></td></tr></table></figure>\n<h4 id=\"调用Array构造函数\"><a href=\"#调用Array构造函数\" class=\"headerlink\" title=\"调用Array构造函数\"></a>调用Array构造函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Arr=new Array(1,2,3,4,5);</div><div class=\"line\">console.log(Arr.length);//5</div><div class=\"line\">var Arr=new Array(10);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407105230640\" alt=\"这里写图片描述\"></p>\n<h3 id=\"数组的各种方法\"><a href=\"#数组的各种方法\" class=\"headerlink\" title=\"数组的各种方法\"></a>数组的各种方法</h3><h4 id=\"split-生成数组\"><a href=\"#split-生成数组\" class=\"headerlink\" title=\"split()生成数组\"></a>split()生成数组</h4><p>以某分隔符将字符串分成几部分，并将每部分作为一个元素保存于一个新建的数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str=&apos;nice to meet you&apos;;</div><div class=\"line\">var arr=str.split(&quot; &quot;);</div><div class=\"line\">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">\tconsole.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407110758114\" alt=\"这里写图片描述\"></p>\n<h4 id=\"indexOf-amp-lastIndexOf-索引\"><a href=\"#indexOf-amp-lastIndexOf-索引\" class=\"headerlink\" title=\"indexOf()&amp;lastIndexOf()索引\"></a>indexOf()&amp;lastIndexOf()索引</h4><p>用来查找传进来的参数在目标数组中是否存在，并返回其第一次出现的索引，否则返回-1。<strong>lastIndexOf()</strong>与indexOf()类似，只是从后开始检索，返回其最后一次出现的索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;hi&apos;,&apos;hello&apos;,&apos;halo&apos;,&apos;hello&apos;];</div><div class=\"line\">console.log(arr.indexOf(&apos;hello&apos;);</div><div class=\"line\">console.log(arr.lastIndexOf(&apos;hello&apos;));</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160407111640493\" alt=\"这里写图片描述\"></p>\n<h4 id=\"jion-amp-toString-数组转化字符串\"><a href=\"#jion-amp-toString-数组转化字符串\" class=\"headerlink\" title=\"jion()&amp;toString()数组转化字符串\"></a>jion()&amp;toString()数组转化字符串</h4><p>在jion()没有参数的情况下， jion()、toString()都将数组转化为以逗号分隔的字符串。当jion()带参数，则数组被转化为由该参数为分隔符的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;hi&apos;,&apos;hello&apos;,&apos;halo&apos;,&apos;hello&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arr.toString());</div><div class=\"line\">console.log(arr.join(&apos;||&apos;));</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407112507949\" alt=\"这里写图片描述\"></p>\n<h4 id=\"splice-amp-concat-由已有数组创建新数组\"><a href=\"#splice-amp-concat-由已有数组创建新数组\" class=\"headerlink\" title=\"splice()&amp;concat()由已有数组创建新数组\"></a>splice()&amp;concat()由已有数组创建新数组</h4><p>concat()合并多个数组，A.concat(B,C)将生成一个新数组，并且顺序由A-&gt;C;<br>splice(a,b,c)有三个参数，功能也由这三个参数决定，当只有一个参数时和slice只有一个参数一样从该参数为索引一直截取到最后一个元素,当只有两个参数时，则意味从索引a开始截取b个元素，当有三个参数时则意味从索引a开始截取b个元素并在此索引处插入c元素，c元素可以为多个元素。<br>splice会生成新的数组也会改变旧数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[&apos;hi1&apos;,&apos;hello1&apos;,&apos;halo1&apos;,&apos;hello1&apos;];</div><div class=\"line\">var arr2=[&apos;hi2&apos;,&apos;hello2&apos;,&apos;halo2&apos;,&apos;hello2&apos;];</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">var arr3=arr1.concat(arr2);</div><div class=\"line\">var arr4=arr1.splice(2,1);</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">console.log(arr3.join());</div><div class=\"line\">console.log(arr4.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407113746642\" alt=\"这里写图片描述\"></p>\n<h4 id=\"push-amp-unshift-为数组添加元素\"><a href=\"#push-amp-unshift-为数组添加元素\" class=\"headerlink\" title=\"push()&amp;unshift()为数组添加元素\"></a>push()&amp;unshift()为数组添加元素</h4><p>push()将元素添加到数组末尾。<br>unshift()将元素添加到数组开头。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;b&apos;,&apos;c&apos;,&apos;d&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.push(&apos;e&apos;);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.unshift(&apos;a&apos;);</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407115105772\" alt=\"这里写图片描述\"></p>\n<h4 id=\"pop-amp-shift-为数组删除元素\"><a href=\"#pop-amp-shift-为数组删除元素\" class=\"headerlink\" title=\"pop()&amp;shift()为数组删除元素\"></a>pop()&amp;shift()为数组删除元素</h4><p>pop()将数组末尾元素删除。<br>shift()将数组开头元素删除。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.pop();</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.shift();</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160407115302069\" alt=\"这里写图片描述\"></p>\n<h4 id=\"reverse-amp-sort-为数组排序\"><a href=\"#reverse-amp-sort-为数组排序\" class=\"headerlink\" title=\"reverse()&amp;sort()为数组排序\"></a>reverse()&amp;sort()为数组排序</h4><p><a href=\"http://m.blog.csdn.net/article/details?id=51043357\" target=\"_blank\" rel=\"external\">sort详解</a><br>reverse()数组元素倒序排列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.reverse();</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407115825446\" alt=\"这里写图片描述\"></p>\n<h4 id=\"不生成新数组的迭代器\"><a href=\"#不生成新数组的迭代器\" class=\"headerlink\" title=\"不生成新数组的迭代器\"></a>不生成新数组的迭代器</h4><ul>\n<li>forEach()接受一个函数作为参数，对数组每一个元素执行该函数。该函数没有返回值。他是<strong>只读</strong>操作，不会改变原始数组，如果希望改变元素数组··目前我没想到使用什么方法，姑且先使用map（），将生成了新元素的数组赋值到原始数组达到目的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,4,5,6];</div><div class=\"line\">function square(num)&#123;</div><div class=\"line\">\tconsole.log(num+&apos;的平方为&apos;+num*num)</div><div class=\"line\">&#125;</div><div class=\"line\">arr.forEach(square);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407123208508\" alt=\"这里写图片描述\"></p>\n<ul>\n<li><p>every()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，如果对于所有的元素该函数都返回true，则every()返回true。</p>\n</li>\n<li><p>some()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，只要有一个元素执行该函数返回true，则some()返回true。</p>\n</li>\n<li><p>reduce()接受一个函数作为参数，对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,4,5,6,7,8,9];</div><div class=\"line\">function add(e,f) &#123;</div><div class=\"line\">\treturn e+f;</div><div class=\"line\">&#125;</div><div class=\"line\">var arrStr=arr.reduce(add);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arrStr);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407124159324\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>reduceRight()接受一个函数作为参数，倒序对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;];</div><div class=\"line\">function add(e,f) &#123;</div><div class=\"line\">\treturn e+f;</div><div class=\"line\">&#125;</div><div class=\"line\">var arrStr1=arr.reduce(add);</div><div class=\"line\">var arrStr2=arr.reduceRight(add);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arrStr1);</div><div class=\"line\">console.log(arrStr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407124317137\" alt=\"这里写图片描述\"></p>\n<h4 id=\"生成新数组的迭代器\"><a href=\"#生成新数组的迭代器\" class=\"headerlink\" title=\"生成新数组的迭代器\"></a>生成新数组的迭代器</h4><p>map()与 forEach()类似，接受一个函数作为参数，对数组每一个元素执行该函数，但该函数有返回值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">function square(num)&#123;</div><div class=\"line\">\treturn num*num;</div><div class=\"line\">&#125;</div><div class=\"line\">var arr2=arr1.map(square);</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407130959055\" alt=\"这里写图片描述\"></p>\n<p>filter与every()相似接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，filter会返回一个新数组，新数组包括执行该函数返回值为true的所有元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">function iseven(num)&#123;</div><div class=\"line\">\treturn num%2==0;</div><div class=\"line\">&#125;</div><div class=\"line\">var arr2=arr1.filter(iseven);</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407131410932\" alt=\"这里写图片描述\"></p>\n<h4 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h4><ul>\n<li>浅度复制<br>浅度复制即将一个数组直接赋值给另一个数组，这只是为原先的数组增加了一个引用而已。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">var arr2=arr1;</div><div class=\"line\"></div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div><div class=\"line\">arr1[0]=9999;</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407131837309\" alt=\"这里写图片描述\"></p>\n<ul>\n<li><p>深度复制<br>我们可以自定义一个深度复制copy()方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">var arr2;</div><div class=\"line\">copy(arr1,arr2);</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\"></div><div class=\"line\">arr1[0]=9999;</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">function copy (arr1,arr2) &#123;</div><div class=\"line\">\tfor (var i = 0; i &lt;arr1.length; i++) &#123;</div><div class=\"line\">\t\tarr2[i]=arr1[i];</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20160407132652062\" alt=\"这里写图片描述\"></p>\n<h4 id=\"创建二维数组\"><a href=\"#创建二维数组\" class=\"headerlink\" title=\"创建二维数组\"></a>创建二维数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.matrix=function(row,col,int)&#123;</div><div class=\"line\">\tvar arr=[];</div><div class=\"line\">\tfor (var i = 0; i &lt; row; i++) &#123;</div><div class=\"line\">\t\tvar cols=[];</div><div class=\"line\">\t\tfor (var j = 0; j &lt; col; j++) &#123;</div><div class=\"line\">\t\t\tcols[j]=int;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\tarr[i]=cols;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div><div class=\"line\">var nums=Array.matrix(5,5,&apos;Liz&apos;);</div><div class=\"line\">console.log(nums.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160408084309336\" alt=\"这里写图片描述\"></p>\n<h4 id=\"创建参差不齐的\"><a href=\"#创建参差不齐的\" class=\"headerlink\" title=\"创建参差不齐的\"></a>创建参差不齐的</h4><p>其实只要知道了行数就行了。<br>先创建N行1列的数组，有需要再往里面添加便是</p>\n<h4 id=\"处理二维数组\"><a href=\"#处理二维数组\" class=\"headerlink\" title=\"处理二维数组\"></a>处理二维数组</h4><p>一般分两种，按行遍历和按列遍历。</p>\n","excerpt":"<p>数组在javascript中是一种特殊对象，拥有许多方法。数组在JavaScript中功能强大，非常有必要熟练掌握。</p>","more":"<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"[]操作符\"></a>[]操作符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Arr=[];</div><div class=\"line\">Arr.length;//0</div><div class=\"line\">var Arr=[1,2,3,4,5];</div><div class=\"line\">Arr.length;//5</div></pre></td></tr></table></figure>\n<h4 id=\"调用Array构造函数\"><a href=\"#调用Array构造函数\" class=\"headerlink\" title=\"调用Array构造函数\"></a>调用Array构造函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Arr=new Array(1,2,3,4,5);</div><div class=\"line\">console.log(Arr.length);//5</div><div class=\"line\">var Arr=new Array(10);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407105230640\" alt=\"这里写图片描述\"></p>\n<h3 id=\"数组的各种方法\"><a href=\"#数组的各种方法\" class=\"headerlink\" title=\"数组的各种方法\"></a>数组的各种方法</h3><h4 id=\"split-生成数组\"><a href=\"#split-生成数组\" class=\"headerlink\" title=\"split()生成数组\"></a>split()生成数组</h4><p>以某分隔符将字符串分成几部分，并将每部分作为一个元素保存于一个新建的数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str=&apos;nice to meet you&apos;;</div><div class=\"line\">var arr=str.split(&quot; &quot;);</div><div class=\"line\">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">\tconsole.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407110758114\" alt=\"这里写图片描述\"></p>\n<h4 id=\"indexOf-amp-lastIndexOf-索引\"><a href=\"#indexOf-amp-lastIndexOf-索引\" class=\"headerlink\" title=\"indexOf()&amp;lastIndexOf()索引\"></a>indexOf()&amp;lastIndexOf()索引</h4><p>用来查找传进来的参数在目标数组中是否存在，并返回其第一次出现的索引，否则返回-1。<strong>lastIndexOf()</strong>与indexOf()类似，只是从后开始检索，返回其最后一次出现的索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;hi&apos;,&apos;hello&apos;,&apos;halo&apos;,&apos;hello&apos;];</div><div class=\"line\">console.log(arr.indexOf(&apos;hello&apos;);</div><div class=\"line\">console.log(arr.lastIndexOf(&apos;hello&apos;));</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160407111640493\" alt=\"这里写图片描述\"></p>\n<h4 id=\"jion-amp-toString-数组转化字符串\"><a href=\"#jion-amp-toString-数组转化字符串\" class=\"headerlink\" title=\"jion()&amp;toString()数组转化字符串\"></a>jion()&amp;toString()数组转化字符串</h4><p>在jion()没有参数的情况下， jion()、toString()都将数组转化为以逗号分隔的字符串。当jion()带参数，则数组被转化为由该参数为分隔符的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;hi&apos;,&apos;hello&apos;,&apos;halo&apos;,&apos;hello&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arr.toString());</div><div class=\"line\">console.log(arr.join(&apos;||&apos;));</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407112507949\" alt=\"这里写图片描述\"></p>\n<h4 id=\"splice-amp-concat-由已有数组创建新数组\"><a href=\"#splice-amp-concat-由已有数组创建新数组\" class=\"headerlink\" title=\"splice()&amp;concat()由已有数组创建新数组\"></a>splice()&amp;concat()由已有数组创建新数组</h4><p>concat()合并多个数组，A.concat(B,C)将生成一个新数组，并且顺序由A-&gt;C;<br>splice(a,b,c)有三个参数，功能也由这三个参数决定，当只有一个参数时和slice只有一个参数一样从该参数为索引一直截取到最后一个元素,当只有两个参数时，则意味从索引a开始截取b个元素，当有三个参数时则意味从索引a开始截取b个元素并在此索引处插入c元素，c元素可以为多个元素。<br>splice会生成新的数组也会改变旧数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[&apos;hi1&apos;,&apos;hello1&apos;,&apos;halo1&apos;,&apos;hello1&apos;];</div><div class=\"line\">var arr2=[&apos;hi2&apos;,&apos;hello2&apos;,&apos;halo2&apos;,&apos;hello2&apos;];</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">var arr3=arr1.concat(arr2);</div><div class=\"line\">var arr4=arr1.splice(2,1);</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">console.log(arr3.join());</div><div class=\"line\">console.log(arr4.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407113746642\" alt=\"这里写图片描述\"></p>\n<h4 id=\"push-amp-unshift-为数组添加元素\"><a href=\"#push-amp-unshift-为数组添加元素\" class=\"headerlink\" title=\"push()&amp;unshift()为数组添加元素\"></a>push()&amp;unshift()为数组添加元素</h4><p>push()将元素添加到数组末尾。<br>unshift()将元素添加到数组开头。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;b&apos;,&apos;c&apos;,&apos;d&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.push(&apos;e&apos;);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.unshift(&apos;a&apos;);</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407115105772\" alt=\"这里写图片描述\"></p>\n<h4 id=\"pop-amp-shift-为数组删除元素\"><a href=\"#pop-amp-shift-为数组删除元素\" class=\"headerlink\" title=\"pop()&amp;shift()为数组删除元素\"></a>pop()&amp;shift()为数组删除元素</h4><p>pop()将数组末尾元素删除。<br>shift()将数组开头元素删除。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.pop();</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.shift();</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160407115302069\" alt=\"这里写图片描述\"></p>\n<h4 id=\"reverse-amp-sort-为数组排序\"><a href=\"#reverse-amp-sort-为数组排序\" class=\"headerlink\" title=\"reverse()&amp;sort()为数组排序\"></a>reverse()&amp;sort()为数组排序</h4><p><a href=\"http://m.blog.csdn.net/article/details?id=51043357\">sort详解</a><br>reverse()数组元素倒序排列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;];</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">arr.reverse();</div><div class=\"line\">console.log(arr.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407115825446\" alt=\"这里写图片描述\"></p>\n<h4 id=\"不生成新数组的迭代器\"><a href=\"#不生成新数组的迭代器\" class=\"headerlink\" title=\"不生成新数组的迭代器\"></a>不生成新数组的迭代器</h4><ul>\n<li>forEach()接受一个函数作为参数，对数组每一个元素执行该函数。该函数没有返回值。他是<strong>只读</strong>操作，不会改变原始数组，如果希望改变元素数组··目前我没想到使用什么方法，姑且先使用map（），将生成了新元素的数组赋值到原始数组达到目的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,4,5,6];</div><div class=\"line\">function square(num)&#123;</div><div class=\"line\">\tconsole.log(num+&apos;的平方为&apos;+num*num)</div><div class=\"line\">&#125;</div><div class=\"line\">arr.forEach(square);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407123208508\" alt=\"这里写图片描述\"></p>\n<ul>\n<li><p>every()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，如果对于所有的元素该函数都返回true，则every()返回true。</p>\n</li>\n<li><p>some()接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，只要有一个元素执行该函数返回true，则some()返回true。</p>\n</li>\n<li><p>reduce()接受一个函数作为参数，对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[1,2,3,4,5,6,7,8,9];</div><div class=\"line\">function add(e,f) &#123;</div><div class=\"line\">\treturn e+f;</div><div class=\"line\">&#125;</div><div class=\"line\">var arrStr=arr.reduce(add);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arrStr);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407124159324\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>reduceRight()接受一个函数作为参数，倒序对数组每一个元素执行该函数返回一个值，reduce会对结果进行累加，最后返回累加值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;];</div><div class=\"line\">function add(e,f) &#123;</div><div class=\"line\">\treturn e+f;</div><div class=\"line\">&#125;</div><div class=\"line\">var arrStr1=arr.reduce(add);</div><div class=\"line\">var arrStr2=arr.reduceRight(add);</div><div class=\"line\">console.log(arr.join());</div><div class=\"line\">console.log(arrStr1);</div><div class=\"line\">console.log(arrStr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407124317137\" alt=\"这里写图片描述\"></p>\n<h4 id=\"生成新数组的迭代器\"><a href=\"#生成新数组的迭代器\" class=\"headerlink\" title=\"生成新数组的迭代器\"></a>生成新数组的迭代器</h4><p>map()与 forEach()类似，接受一个函数作为参数，对数组每一个元素执行该函数，但该函数有返回值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">function square(num)&#123;</div><div class=\"line\">\treturn num*num;</div><div class=\"line\">&#125;</div><div class=\"line\">var arr2=arr1.map(square);</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407130959055\" alt=\"这里写图片描述\"></p>\n<p>filter与every()相似接受一个返回值为bool类型的的函数，对数组每一个元素执行该函数，filter会返回一个新数组，新数组包括执行该函数返回值为true的所有元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">function iseven(num)&#123;</div><div class=\"line\">\treturn num%2==0;</div><div class=\"line\">&#125;</div><div class=\"line\">var arr2=arr1.filter(iseven);</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407131410932\" alt=\"这里写图片描述\"></p>\n<h4 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h4><ul>\n<li>浅度复制<br>浅度复制即将一个数组直接赋值给另一个数组，这只是为原先的数组增加了一个引用而已。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">var arr2=arr1;</div><div class=\"line\"></div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div><div class=\"line\">arr1[0]=9999;</div><div class=\"line\">console.log(arr1);</div><div class=\"line\">console.log(arr2);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160407131837309\" alt=\"这里写图片描述\"></p>\n<ul>\n<li><p>深度复制<br>我们可以自定义一个深度复制copy()方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1=[1,2,3,4,5,6];</div><div class=\"line\">var arr2;</div><div class=\"line\">copy(arr1,arr2);</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\"></div><div class=\"line\">arr1[0]=9999;</div><div class=\"line\">console.log(arr1.join());</div><div class=\"line\">console.log(arr2.join());</div><div class=\"line\">function copy (arr1,arr2) &#123;</div><div class=\"line\">\tfor (var i = 0; i &lt;arr1.length; i++) &#123;</div><div class=\"line\">\t\tarr2[i]=arr1[i];</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20160407132652062\" alt=\"这里写图片描述\"></p>\n<h4 id=\"创建二维数组\"><a href=\"#创建二维数组\" class=\"headerlink\" title=\"创建二维数组\"></a>创建二维数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.matrix=function(row,col,int)&#123;</div><div class=\"line\">\tvar arr=[];</div><div class=\"line\">\tfor (var i = 0; i &lt; row; i++) &#123;</div><div class=\"line\">\t\tvar cols=[];</div><div class=\"line\">\t\tfor (var j = 0; j &lt; col; j++) &#123;</div><div class=\"line\">\t\t\tcols[j]=int;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\tarr[i]=cols;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div><div class=\"line\">var nums=Array.matrix(5,5,&apos;Liz&apos;);</div><div class=\"line\">console.log(nums.join());</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160408084309336\" alt=\"这里写图片描述\"></p>\n<h4 id=\"创建参差不齐的\"><a href=\"#创建参差不齐的\" class=\"headerlink\" title=\"创建参差不齐的\"></a>创建参差不齐的</h4><p>其实只要知道了行数就行了。<br>先创建N行1列的数组，有需要再往里面添加便是</p>\n<h4 id=\"处理二维数组\"><a href=\"#处理二维数组\" class=\"headerlink\" title=\"处理二维数组\"></a>处理二维数组</h4><p>一般分两种，按行遍历和按列遍历。</p>"},{"title":"Javascript比较两个数组是否相等","date":"2017-04-24T11:21:06.000Z","_content":"使用Javascript比较两个数组是否相等，我们可以怎么做呢？我暂时使用···\n<!--more-->\n\n- 首先判断长度\n- 再排序\n- 转化为字符串\n- 做比较\n```\nif (Arr1.length!=Arr2.length) {\n     return true;\n }else{\n     if (Arr1.sort().toString()!= Arr2.sort().toString()) {\n         return true;\n     };\n }\n```","source":"_posts/Javascript比较两个数组是否相等.md","raw":"---\ntitle: Javascript比较两个数组是否相等\ndate: 2017-4-24 19:21:06\ncategories: JavaScript\ntags: JavaScript\n---\n使用Javascript比较两个数组是否相等，我们可以怎么做呢？我暂时使用···\n<!--more-->\n\n- 首先判断长度\n- 再排序\n- 转化为字符串\n- 做比较\n```\nif (Arr1.length!=Arr2.length) {\n     return true;\n }else{\n     if (Arr1.sort().toString()!= Arr2.sort().toString()) {\n         return true;\n     };\n }\n```","slug":"Javascript比较两个数组是否相等","published":1,"updated":"2017-06-04T11:30:16.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xe000qdoexiro58km9","content":"<p>使用Javascript比较两个数组是否相等，我们可以怎么做呢？我暂时使用···<br><a id=\"more\"></a></p>\n<ul>\n<li>首先判断长度</li>\n<li>再排序</li>\n<li>转化为字符串</li>\n<li>做比较<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Arr1.length!=Arr2.length) &#123;</div><div class=\"line\">     return true;</div><div class=\"line\"> &#125;else&#123;</div><div class=\"line\">     if (Arr1.sort().toString()!= Arr2.sort().toString()) &#123;</div><div class=\"line\">         return true;</div><div class=\"line\">     &#125;;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<p>使用Javascript比较两个数组是否相等，我们可以怎么做呢？我暂时使用···<br>","more":"</p>\n<ul>\n<li>首先判断长度</li>\n<li>再排序</li>\n<li>转化为字符串</li>\n<li>做比较<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Arr1.length!=Arr2.length) &#123;</div><div class=\"line\">     return true;</div><div class=\"line\"> &#125;else&#123;</div><div class=\"line\">     if (Arr1.sort().toString()!= Arr2.sort().toString()) &#123;</div><div class=\"line\">         return true;</div><div class=\"line\">     &#125;;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"Javascript深度拷贝","date":"2017-03-06T01:43:04.000Z","_content":"\n前端面试里经常会提到对象拷贝问题，这个问题之所以重要是因为他可以很好的反映被面试者对于Javascript语言的掌握程度。对象拷贝里涉及了Javascript语言核心内容，如其6个基本类型、Object和数组的区别，如何判断是Object还是数组等~\n<!--more-->\n首先我们来虚构一个复制的对象，其属性包括一个对象，一个数组，一个对象方法，一个原型方法及一个原型属性。\n\n```\n function Child(){\n    this.name=\"Liz\";\n    this.favorite=['sleep','delicacy','study'];\n    this.friends={\n        ctt:{\n            name:'Ctt',\n            age:'22'\n        },\n        cyt:{\n            name:'Cyt',\n            age:'22'\n        }\n    };\n    this.say=function() {\n        console.log('Child.say');\n    };\n }\n Child.prototype.age=\"21\";\n Child.prototype.sayProto=function() {\n        console.log('Child.prototype.say');\n    };\n```\n\n分析该对象，我们需要对其属性类型进行差别对待。\n\n 1. 基本数据类型，如“number，string，boolean”可直接赋值。\n 2. 引用类型（对象），这里需要特别处理Array。\n 3. 是否复制原对象的原型方法\n\n由以上分析，我们拟定复制流程\n\n 1. 创建空对象，即sub.\n 2. 采用for in遍历原始对象，即sup.\n 3. 遍历过程中筛选需要复制的属性，并判断sup属性类型.（筛选方法见4）\n\t  3.1 当为基本数据类型时直接复制\n\t  3.2 当为对象类型时（typeof sup[i]==='object'）,进一步判断该属性是否为数组（Object.prototype.toSting.call(arg)===\"[object Array]\"）.\n\t  3.2.1 当为一般对象类型时，将sub[i]创建为对象。回到第一步处理sup[i]与sub[i]的深度复制。\n\t  3.2.2 当为数组类型时，将sub[i]创建为数组。回到第一步处理sup[i]与sub[i]的深度复制。\n 4. 我们可以通过object.hasOwnProperty[prop]来筛选原始对象的方法及静态属性，如果不使用filter，则会遍历所有属性，包括原型方法和属性。\n\t  \n```\nfunction extendDeep(sup,sub){\n    var i,\n    toStr=Object.prototype.toString;\n    aStr=\"[object Array]\";\n    sub=sub||{};\n    for(i in sup){\n        if (sup.hasOwnProperty(i)) {\n            if (typeof sup[i]==='object') {\n                sub[i]=toStr.call(sup[i])===aStr?[]:{};\n                extendDeep(sup[i],sub[i]);\n            }else{\n                sub[i]=sup[i];\n            }\n        }\n    }\n    return sub;\n}\n```\n应用\n\n```\n var child1=new Child();\n var child2=extendDeep(child1);\n console.log(child1);\n console.log(child2);\n```\n事件是检验真理的唯一标准\n![这里写图片描述](/images/Javascript深度拷贝1.png)\n注意红框部分，为了证明两个对象相互独立，给他来点好玩的···\n\n```\n child2.favorite.push(\"reading\");\n```\n看看结果如何\n![这里写图片描述](/images/Javascript深度拷贝2.png)\n如此完美！！！\n\n**注意**\n![这里写图片描述](/images/Javascript深度拷贝3.png)\n采用hasOwnProperty()进行过滤将只会克隆静态属性，不能找到原型方法。由上图很容易看到，克隆结果的'__proto__'的constructor是指向object的","source":"_posts/Javascript深度拷贝.md","raw":"---\ntitle: Javascript深度拷贝\ndate: 2017-03-06 09:43:04\ncategories: JavaScript\ntags: JavaScript\n\n---\n\n前端面试里经常会提到对象拷贝问题，这个问题之所以重要是因为他可以很好的反映被面试者对于Javascript语言的掌握程度。对象拷贝里涉及了Javascript语言核心内容，如其6个基本类型、Object和数组的区别，如何判断是Object还是数组等~\n<!--more-->\n首先我们来虚构一个复制的对象，其属性包括一个对象，一个数组，一个对象方法，一个原型方法及一个原型属性。\n\n```\n function Child(){\n    this.name=\"Liz\";\n    this.favorite=['sleep','delicacy','study'];\n    this.friends={\n        ctt:{\n            name:'Ctt',\n            age:'22'\n        },\n        cyt:{\n            name:'Cyt',\n            age:'22'\n        }\n    };\n    this.say=function() {\n        console.log('Child.say');\n    };\n }\n Child.prototype.age=\"21\";\n Child.prototype.sayProto=function() {\n        console.log('Child.prototype.say');\n    };\n```\n\n分析该对象，我们需要对其属性类型进行差别对待。\n\n 1. 基本数据类型，如“number，string，boolean”可直接赋值。\n 2. 引用类型（对象），这里需要特别处理Array。\n 3. 是否复制原对象的原型方法\n\n由以上分析，我们拟定复制流程\n\n 1. 创建空对象，即sub.\n 2. 采用for in遍历原始对象，即sup.\n 3. 遍历过程中筛选需要复制的属性，并判断sup属性类型.（筛选方法见4）\n\t  3.1 当为基本数据类型时直接复制\n\t  3.2 当为对象类型时（typeof sup[i]==='object'）,进一步判断该属性是否为数组（Object.prototype.toSting.call(arg)===\"[object Array]\"）.\n\t  3.2.1 当为一般对象类型时，将sub[i]创建为对象。回到第一步处理sup[i]与sub[i]的深度复制。\n\t  3.2.2 当为数组类型时，将sub[i]创建为数组。回到第一步处理sup[i]与sub[i]的深度复制。\n 4. 我们可以通过object.hasOwnProperty[prop]来筛选原始对象的方法及静态属性，如果不使用filter，则会遍历所有属性，包括原型方法和属性。\n\t  \n```\nfunction extendDeep(sup,sub){\n    var i,\n    toStr=Object.prototype.toString;\n    aStr=\"[object Array]\";\n    sub=sub||{};\n    for(i in sup){\n        if (sup.hasOwnProperty(i)) {\n            if (typeof sup[i]==='object') {\n                sub[i]=toStr.call(sup[i])===aStr?[]:{};\n                extendDeep(sup[i],sub[i]);\n            }else{\n                sub[i]=sup[i];\n            }\n        }\n    }\n    return sub;\n}\n```\n应用\n\n```\n var child1=new Child();\n var child2=extendDeep(child1);\n console.log(child1);\n console.log(child2);\n```\n事件是检验真理的唯一标准\n![这里写图片描述](/images/Javascript深度拷贝1.png)\n注意红框部分，为了证明两个对象相互独立，给他来点好玩的···\n\n```\n child2.favorite.push(\"reading\");\n```\n看看结果如何\n![这里写图片描述](/images/Javascript深度拷贝2.png)\n如此完美！！！\n\n**注意**\n![这里写图片描述](/images/Javascript深度拷贝3.png)\n采用hasOwnProperty()进行过滤将只会克隆静态属性，不能找到原型方法。由上图很容易看到，克隆结果的'__proto__'的constructor是指向object的","slug":"Javascript深度拷贝","published":1,"updated":"2017-06-02T16:13:27.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xi000udoexf85ta0l2","content":"<p>前端面试里经常会提到对象拷贝问题，这个问题之所以重要是因为他可以很好的反映被面试者对于Javascript语言的掌握程度。对象拷贝里涉及了Javascript语言核心内容，如其6个基本类型、Object和数组的区别，如何判断是Object还是数组等~<br><a id=\"more\"></a><br>首先我们来虚构一个复制的对象，其属性包括一个对象，一个数组，一个对象方法，一个原型方法及一个原型属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Child()&#123;</div><div class=\"line\">   this.name=&quot;Liz&quot;;</div><div class=\"line\">   this.favorite=[&apos;sleep&apos;,&apos;delicacy&apos;,&apos;study&apos;];</div><div class=\"line\">   this.friends=&#123;</div><div class=\"line\">       ctt:&#123;</div><div class=\"line\">           name:&apos;Ctt&apos;,</div><div class=\"line\">           age:&apos;22&apos;</div><div class=\"line\">       &#125;,</div><div class=\"line\">       cyt:&#123;</div><div class=\"line\">           name:&apos;Cyt&apos;,</div><div class=\"line\">           age:&apos;22&apos;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\">   this.say=function() &#123;</div><div class=\"line\">       console.log(&apos;Child.say&apos;);</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype.age=&quot;21&quot;;</div><div class=\"line\">Child.prototype.sayProto=function() &#123;</div><div class=\"line\">       console.log(&apos;Child.prototype.say&apos;);</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p>分析该对象，我们需要对其属性类型进行差别对待。</p>\n<ol>\n<li>基本数据类型，如“number，string，boolean”可直接赋值。</li>\n<li>引用类型（对象），这里需要特别处理Array。</li>\n<li>是否复制原对象的原型方法</li>\n</ol>\n<p>由以上分析，我们拟定复制流程</p>\n<ol>\n<li>创建空对象，即sub.</li>\n<li>采用for in遍历原始对象，即sup.</li>\n<li>遍历过程中筛选需要复制的属性，并判断sup属性类型.（筛选方法见4）<br>  3.1 当为基本数据类型时直接复制<br>  3.2 当为对象类型时（typeof sup[i]===’object’）,进一步判断该属性是否为数组（Object.prototype.toSting.call(arg)===”[object Array]”）.<br>  3.2.1 当为一般对象类型时，将sub[i]创建为对象。回到第一步处理sup[i]与sub[i]的深度复制。<br>  3.2.2 当为数组类型时，将sub[i]创建为数组。回到第一步处理sup[i]与sub[i]的深度复制。</li>\n<li>我们可以通过object.hasOwnProperty[prop]来筛选原始对象的方法及静态属性，如果不使用filter，则会遍历所有属性，包括原型方法和属性。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function extendDeep(sup,sub)&#123;</div><div class=\"line\">    var i,</div><div class=\"line\">    toStr=Object.prototype.toString;</div><div class=\"line\">    aStr=&quot;[object Array]&quot;;</div><div class=\"line\">    sub=sub||&#123;&#125;;</div><div class=\"line\">    for(i in sup)&#123;</div><div class=\"line\">        if (sup.hasOwnProperty(i)) &#123;</div><div class=\"line\">            if (typeof sup[i]===&apos;object&apos;) &#123;</div><div class=\"line\">                sub[i]=toStr.call(sup[i])===aStr?[]:&#123;&#125;;</div><div class=\"line\">                extendDeep(sup[i],sub[i]);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                sub[i]=sup[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sub;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var child1=new Child();</div><div class=\"line\">var child2=extendDeep(child1);</div><div class=\"line\">console.log(child1);</div><div class=\"line\">console.log(child2);</div></pre></td></tr></table></figure>\n<p>事件是检验真理的唯一标准<br><img src=\"/images/Javascript深度拷贝1.png\" alt=\"这里写图片描述\"><br>注意红框部分，为了证明两个对象相互独立，给他来点好玩的···</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child2.favorite.push(&quot;reading&quot;);</div></pre></td></tr></table></figure>\n<p>看看结果如何<br><img src=\"/images/Javascript深度拷贝2.png\" alt=\"这里写图片描述\"><br>如此完美！！！</p>\n<p><strong>注意</strong><br><img src=\"/images/Javascript深度拷贝3.png\" alt=\"这里写图片描述\"><br>采用hasOwnProperty()进行过滤将只会克隆静态属性，不能找到原型方法。由上图很容易看到，克隆结果的’<strong>proto</strong>‘的constructor是指向object的</p>\n","excerpt":"<p>前端面试里经常会提到对象拷贝问题，这个问题之所以重要是因为他可以很好的反映被面试者对于Javascript语言的掌握程度。对象拷贝里涉及了Javascript语言核心内容，如其6个基本类型、Object和数组的区别，如何判断是Object还是数组等~<br>","more":"<br>首先我们来虚构一个复制的对象，其属性包括一个对象，一个数组，一个对象方法，一个原型方法及一个原型属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Child()&#123;</div><div class=\"line\">   this.name=&quot;Liz&quot;;</div><div class=\"line\">   this.favorite=[&apos;sleep&apos;,&apos;delicacy&apos;,&apos;study&apos;];</div><div class=\"line\">   this.friends=&#123;</div><div class=\"line\">       ctt:&#123;</div><div class=\"line\">           name:&apos;Ctt&apos;,</div><div class=\"line\">           age:&apos;22&apos;</div><div class=\"line\">       &#125;,</div><div class=\"line\">       cyt:&#123;</div><div class=\"line\">           name:&apos;Cyt&apos;,</div><div class=\"line\">           age:&apos;22&apos;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\">   this.say=function() &#123;</div><div class=\"line\">       console.log(&apos;Child.say&apos;);</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype.age=&quot;21&quot;;</div><div class=\"line\">Child.prototype.sayProto=function() &#123;</div><div class=\"line\">       console.log(&apos;Child.prototype.say&apos;);</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p>分析该对象，我们需要对其属性类型进行差别对待。</p>\n<ol>\n<li>基本数据类型，如“number，string，boolean”可直接赋值。</li>\n<li>引用类型（对象），这里需要特别处理Array。</li>\n<li>是否复制原对象的原型方法</li>\n</ol>\n<p>由以上分析，我们拟定复制流程</p>\n<ol>\n<li>创建空对象，即sub.</li>\n<li>采用for in遍历原始对象，即sup.</li>\n<li>遍历过程中筛选需要复制的属性，并判断sup属性类型.（筛选方法见4）<br>  3.1 当为基本数据类型时直接复制<br>  3.2 当为对象类型时（typeof sup[i]===’object’）,进一步判断该属性是否为数组（Object.prototype.toSting.call(arg)===”[object Array]”）.<br>  3.2.1 当为一般对象类型时，将sub[i]创建为对象。回到第一步处理sup[i]与sub[i]的深度复制。<br>  3.2.2 当为数组类型时，将sub[i]创建为数组。回到第一步处理sup[i]与sub[i]的深度复制。</li>\n<li>我们可以通过object.hasOwnProperty[prop]来筛选原始对象的方法及静态属性，如果不使用filter，则会遍历所有属性，包括原型方法和属性。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function extendDeep(sup,sub)&#123;</div><div class=\"line\">    var i,</div><div class=\"line\">    toStr=Object.prototype.toString;</div><div class=\"line\">    aStr=&quot;[object Array]&quot;;</div><div class=\"line\">    sub=sub||&#123;&#125;;</div><div class=\"line\">    for(i in sup)&#123;</div><div class=\"line\">        if (sup.hasOwnProperty(i)) &#123;</div><div class=\"line\">            if (typeof sup[i]===&apos;object&apos;) &#123;</div><div class=\"line\">                sub[i]=toStr.call(sup[i])===aStr?[]:&#123;&#125;;</div><div class=\"line\">                extendDeep(sup[i],sub[i]);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                sub[i]=sup[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sub;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var child1=new Child();</div><div class=\"line\">var child2=extendDeep(child1);</div><div class=\"line\">console.log(child1);</div><div class=\"line\">console.log(child2);</div></pre></td></tr></table></figure>\n<p>事件是检验真理的唯一标准<br><img src=\"/images/Javascript深度拷贝1.png\" alt=\"这里写图片描述\"><br>注意红框部分，为了证明两个对象相互独立，给他来点好玩的···</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child2.favorite.push(&quot;reading&quot;);</div></pre></td></tr></table></figure>\n<p>看看结果如何<br><img src=\"/images/Javascript深度拷贝2.png\" alt=\"这里写图片描述\"><br>如此完美！！！</p>\n<p><strong>注意</strong><br><img src=\"/images/Javascript深度拷贝3.png\" alt=\"这里写图片描述\"><br>采用hasOwnProperty()进行过滤将只会克隆静态属性，不能找到原型方法。由上图很容易看到，克隆结果的’<strong>proto</strong>‘的constructor是指向object的</p>"},{"title":"JavaScript获取前7天","date":"2017-02-07T14:06:04.000Z","_content":"在项目中需要获取前7天的数据，需要向后台传递startDate···吼吼，因此有此Tips\n<!--more-->\n```\nfunction getStandardDate(){\n    var _date=new Date();\n    var year=_date.getFullYear();\n    var month=_date.getMonth()+1;\n    var day=_date.getDate();\n    if (month<10) {\n        month='0'+month;\n    };\n    if (day<10) {\n        day='0'+day;\n    };\n    return year+'-'+month+'-'+day;\n}\n\nfunction getStandardDateBeforeWeek(){\n    var _date = new Date(); //获取今天日期\n        _date.setDate(_date.getDate() - 7);//日期回到七天前\n    var year=_date.getFullYear();\n    var month=_date.getMonth()+1;\n    var day=_date.getDate();\n    if (month<10) {\n        month='0'+month;\n    };\n    if (day<10) {\n        day='0'+day;\n    };\n\n    var dateTemp = year+'-'+month+'-'+day;\n    _date.setDate(_date.getDate() + 7);//日期重置\n    return dateTemp;\n}\n\n```","source":"_posts/Javascript获取前7天.md","raw":"---\ntitle: JavaScript获取前7天\ndate: 2017-02-07 22:06:04\ncategories: JavaScript\ntags: [JavaScript,Tips]\n---\n在项目中需要获取前7天的数据，需要向后台传递startDate···吼吼，因此有此Tips\n<!--more-->\n```\nfunction getStandardDate(){\n    var _date=new Date();\n    var year=_date.getFullYear();\n    var month=_date.getMonth()+1;\n    var day=_date.getDate();\n    if (month<10) {\n        month='0'+month;\n    };\n    if (day<10) {\n        day='0'+day;\n    };\n    return year+'-'+month+'-'+day;\n}\n\nfunction getStandardDateBeforeWeek(){\n    var _date = new Date(); //获取今天日期\n        _date.setDate(_date.getDate() - 7);//日期回到七天前\n    var year=_date.getFullYear();\n    var month=_date.getMonth()+1;\n    var day=_date.getDate();\n    if (month<10) {\n        month='0'+month;\n    };\n    if (day<10) {\n        day='0'+day;\n    };\n\n    var dateTemp = year+'-'+month+'-'+day;\n    _date.setDate(_date.getDate() + 7);//日期重置\n    return dateTemp;\n}\n\n```","slug":"Javascript获取前7天","published":1,"updated":"2017-06-02T16:13:24.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xk000wdoexe1yvioci","content":"<p>在项目中需要获取前7天的数据，需要向后台传递startDate···吼吼，因此有此Tips<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStandardDate()&#123;</div><div class=\"line\">    var _date=new Date();</div><div class=\"line\">    var year=_date.getFullYear();</div><div class=\"line\">    var month=_date.getMonth()+1;</div><div class=\"line\">    var day=_date.getDate();</div><div class=\"line\">    if (month&lt;10) &#123;</div><div class=\"line\">        month=&apos;0&apos;+month;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    if (day&lt;10) &#123;</div><div class=\"line\">        day=&apos;0&apos;+day;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return year+&apos;-&apos;+month+&apos;-&apos;+day;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function getStandardDateBeforeWeek()&#123;</div><div class=\"line\">    var _date = new Date(); //获取今天日期</div><div class=\"line\">        _date.setDate(_date.getDate() - 7);//日期回到七天前</div><div class=\"line\">    var year=_date.getFullYear();</div><div class=\"line\">    var month=_date.getMonth()+1;</div><div class=\"line\">    var day=_date.getDate();</div><div class=\"line\">    if (month&lt;10) &#123;</div><div class=\"line\">        month=&apos;0&apos;+month;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    if (day&lt;10) &#123;</div><div class=\"line\">        day=&apos;0&apos;+day;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var dateTemp = year+&apos;-&apos;+month+&apos;-&apos;+day;</div><div class=\"line\">    _date.setDate(_date.getDate() + 7);//日期重置</div><div class=\"line\">    return dateTemp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>在项目中需要获取前7天的数据，需要向后台传递startDate···吼吼，因此有此Tips<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getStandardDate()&#123;</div><div class=\"line\">    var _date=new Date();</div><div class=\"line\">    var year=_date.getFullYear();</div><div class=\"line\">    var month=_date.getMonth()+1;</div><div class=\"line\">    var day=_date.getDate();</div><div class=\"line\">    if (month&lt;10) &#123;</div><div class=\"line\">        month=&apos;0&apos;+month;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    if (day&lt;10) &#123;</div><div class=\"line\">        day=&apos;0&apos;+day;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return year+&apos;-&apos;+month+&apos;-&apos;+day;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function getStandardDateBeforeWeek()&#123;</div><div class=\"line\">    var _date = new Date(); //获取今天日期</div><div class=\"line\">        _date.setDate(_date.getDate() - 7);//日期回到七天前</div><div class=\"line\">    var year=_date.getFullYear();</div><div class=\"line\">    var month=_date.getMonth()+1;</div><div class=\"line\">    var day=_date.getDate();</div><div class=\"line\">    if (month&lt;10) &#123;</div><div class=\"line\">        month=&apos;0&apos;+month;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    if (day&lt;10) &#123;</div><div class=\"line\">        day=&apos;0&apos;+day;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var dateTemp = year+&apos;-&apos;+month+&apos;-&apos;+day;</div><div class=\"line\">    _date.setDate(_date.getDate() + 7);//日期重置</div><div class=\"line\">    return dateTemp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"3 Sum","date":"2017-01-04T04:09:37.000Z","_content":" Given an array S of n integers, are there elements a, b, c in S such that a+ b+ c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\n• Elements in a triplet (a, b, c) must be in non-descending order. (ie, a ≤ b ≤ c)\n• The solution set must not contain duplicate triplets.\nFor example, given array S = {-1 0 1 2 -1 -4}.\nA solution set is:\n(-1, 0, 1)\n(-1, -1, 2)\n<!--more-->\n分析：先排序，再查找\n```\nvector< vector<int> > threeSum(vector<int>& num,int len,int Sum) {\n   vector< vector<int> > result;\n   if (num.size() < 3) return result;\n   sort(num.begin(), num.end());//排序\n   for (int i = 0; i < len; ++i){\n      int a=num[i];\n      for (int j = 0; j < len; ++j){\n         int b=num[j];\n         for (int k = 0; k < len; ++k){\n            if(Sum==a+b+num[k]){//找到a,b,c.\n               int tmp[]={a,b,num[k]};\n               vector<int> triplets(tmp,tmp+3);\n               sort(triplets.begin(), triplets.end());//对a,b,c排序\n               int flag=0;\n               for (int i = 0; i < result.size()&&flag<1; ++i){//对结果集查重\n                  for (int j = 0; j < 3; ++j){\n                     if(result[i][j]==triplets[j]){\n                        flag++;\n                     }\n                  }\n               }\n               if (flag<1){//确保没有重复数组\n                  result.push_back(triplets);\n               }\n            }\n         }\n      }\n   }\n   return result;\n}\n```\n\n调用实例：\n\n```\nint arr[] = {-1, 0, 1, 2, -1, -4};\nint len=sizeof(arr)/sizeof(int);\nint Sum=0;\nvector<int> triplets(arr,arr+len);\nvector< vector<int> > result=threeSum(triplets,len,Sum);\n```","source":"_posts/LeetCode-3Sum.md","raw":"---\ntitle: 3 Sum\ndate: 2017-01-04 12:09:37\ncategories: 算法\ntags: [LeetCode,数组]\n---\n Given an array S of n integers, are there elements a, b, c in S such that a+ b+ c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\n• Elements in a triplet (a, b, c) must be in non-descending order. (ie, a ≤ b ≤ c)\n• The solution set must not contain duplicate triplets.\nFor example, given array S = {-1 0 1 2 -1 -4}.\nA solution set is:\n(-1, 0, 1)\n(-1, -1, 2)\n<!--more-->\n分析：先排序，再查找\n```\nvector< vector<int> > threeSum(vector<int>& num,int len,int Sum) {\n   vector< vector<int> > result;\n   if (num.size() < 3) return result;\n   sort(num.begin(), num.end());//排序\n   for (int i = 0; i < len; ++i){\n      int a=num[i];\n      for (int j = 0; j < len; ++j){\n         int b=num[j];\n         for (int k = 0; k < len; ++k){\n            if(Sum==a+b+num[k]){//找到a,b,c.\n               int tmp[]={a,b,num[k]};\n               vector<int> triplets(tmp,tmp+3);\n               sort(triplets.begin(), triplets.end());//对a,b,c排序\n               int flag=0;\n               for (int i = 0; i < result.size()&&flag<1; ++i){//对结果集查重\n                  for (int j = 0; j < 3; ++j){\n                     if(result[i][j]==triplets[j]){\n                        flag++;\n                     }\n                  }\n               }\n               if (flag<1){//确保没有重复数组\n                  result.push_back(triplets);\n               }\n            }\n         }\n      }\n   }\n   return result;\n}\n```\n\n调用实例：\n\n```\nint arr[] = {-1, 0, 1, 2, -1, -4};\nint len=sizeof(arr)/sizeof(int);\nint Sum=0;\nvector<int> triplets(arr,arr+len);\nvector< vector<int> > result=threeSum(triplets,len,Sum);\n```","slug":"LeetCode-3Sum","published":1,"updated":"2017-06-02T16:12:42.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xm000zdoexdedzdlvl","content":"<p> Given an array S of n integers, are there elements a, b, c in S such that a+ b+ c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:<br>• Elements in a triplet (a, b, c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>• The solution set must not contain duplicate triplets.<br>For example, given array S = {-1 0 1 2 -1 -4}.<br>A solution set is:<br>(-1, 0, 1)<br>(-1, -1, 2)<br><a id=\"more\"></a><br>分析：先排序，再查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt; vector&lt;int&gt; &gt; threeSum(vector&lt;int&gt;&amp; num,int len,int Sum) &#123;</div><div class=\"line\">   vector&lt; vector&lt;int&gt; &gt; result;</div><div class=\"line\">   if (num.size() &lt; 3) return result;</div><div class=\"line\">   sort(num.begin(), num.end());//排序</div><div class=\"line\">   for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">      int a=num[i];</div><div class=\"line\">      for (int j = 0; j &lt; len; ++j)&#123;</div><div class=\"line\">         int b=num[j];</div><div class=\"line\">         for (int k = 0; k &lt; len; ++k)&#123;</div><div class=\"line\">            if(Sum==a+b+num[k])&#123;//找到a,b,c.</div><div class=\"line\">               int tmp[]=&#123;a,b,num[k]&#125;;</div><div class=\"line\">               vector&lt;int&gt; triplets(tmp,tmp+3);</div><div class=\"line\">               sort(triplets.begin(), triplets.end());//对a,b,c排序</div><div class=\"line\">               int flag=0;</div><div class=\"line\">               for (int i = 0; i &lt; result.size()&amp;&amp;flag&lt;1; ++i)&#123;//对结果集查重</div><div class=\"line\">                  for (int j = 0; j &lt; 3; ++j)&#123;</div><div class=\"line\">                     if(result[i][j]==triplets[j])&#123;</div><div class=\"line\">                        flag++;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               if (flag&lt;1)&#123;//确保没有重复数组</div><div class=\"line\">                  result.push_back(triplets);</div><div class=\"line\">               &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 0, 1, 2, -1, -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int Sum=0;</div><div class=\"line\">vector&lt;int&gt; triplets(arr,arr+len);</div><div class=\"line\">vector&lt; vector&lt;int&gt; &gt; result=threeSum(triplets,len,Sum);</div></pre></td></tr></table></figure>","excerpt":"<p> Given an array S of n integers, are there elements a, b, c in S such that a+ b+ c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:<br>• Elements in a triplet (a, b, c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>• The solution set must not contain duplicate triplets.<br>For example, given array S = {-1 0 1 2 -1 -4}.<br>A solution set is:<br>(-1, 0, 1)<br>(-1, -1, 2)<br>","more":"<br>分析：先排序，再查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt; vector&lt;int&gt; &gt; threeSum(vector&lt;int&gt;&amp; num,int len,int Sum) &#123;</div><div class=\"line\">   vector&lt; vector&lt;int&gt; &gt; result;</div><div class=\"line\">   if (num.size() &lt; 3) return result;</div><div class=\"line\">   sort(num.begin(), num.end());//排序</div><div class=\"line\">   for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">      int a=num[i];</div><div class=\"line\">      for (int j = 0; j &lt; len; ++j)&#123;</div><div class=\"line\">         int b=num[j];</div><div class=\"line\">         for (int k = 0; k &lt; len; ++k)&#123;</div><div class=\"line\">            if(Sum==a+b+num[k])&#123;//找到a,b,c.</div><div class=\"line\">               int tmp[]=&#123;a,b,num[k]&#125;;</div><div class=\"line\">               vector&lt;int&gt; triplets(tmp,tmp+3);</div><div class=\"line\">               sort(triplets.begin(), triplets.end());//对a,b,c排序</div><div class=\"line\">               int flag=0;</div><div class=\"line\">               for (int i = 0; i &lt; result.size()&amp;&amp;flag&lt;1; ++i)&#123;//对结果集查重</div><div class=\"line\">                  for (int j = 0; j &lt; 3; ++j)&#123;</div><div class=\"line\">                     if(result[i][j]==triplets[j])&#123;</div><div class=\"line\">                        flag++;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               if (flag&lt;1)&#123;//确保没有重复数组</div><div class=\"line\">                  result.push_back(triplets);</div><div class=\"line\">               &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 0, 1, 2, -1, -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int Sum=0;</div><div class=\"line\">vector&lt;int&gt; triplets(arr,arr+len);</div><div class=\"line\">vector&lt; vector&lt;int&gt; &gt; result=threeSum(triplets,len,Sum);</div></pre></td></tr></table></figure>"},{"title":"3 Sum Closest","date":"2017-01-05T01:46:03.000Z","_content":"\nGiven an array S of n integers, find three integers in S such that the sum is closest to a given number,target. Return the sum of the three integers. You may assume that each input would have exactly one solution. For example, given array S = {-1 2 1 -4}, and target = 1.the sum that is closest to the target is 2. (-1 + 2 + 1 = 2);\n在一个有n个整数的数组S中寻找3个整数，使三个之和最接近于指定整数。\n<!--more-->\n分析：3Sum是在数组中寻找三元之和等于sum,3SumClosest是求其和最接近于target。功能非常相近，因此还是应该先排序。\n\n```\nvector<int>  threeSumClosest(vector<int>& num, int target) {\n\tvector<int>  result;\n\tint len=num.size(),a,b,c,Dvalue=abs(target-(num[0]+num[1]+num[2]));\n\tsort(num.begin(), num.end());\n\tfor (int i = 0; i < len; ++i){\n\t\ta=num[i];\n\t\tfor (int j = i+1; j < len; ++j){\n\t\t\tb=num[j];\n\t\t\tfor (int k = j+1; k < len; ++k){\n\t\t\t\tc=num[k];\n\t\t\t\tif (abs(target-(a+b+c))<Dvalue){\n\t\t\t\t\tDvalue=abs(target-(a+b+c));\n\t\t\t\t\tif (result.size()>0){\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t}\n\t\t\t\t\tresult.push_back(a);\n\t\t\t\t\tresult.push_back(b);\n\t\t\t\t\tresult.push_back(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n调用实例：\n```\nint arr[] = {-1, 2, 1 -4};\nint len=sizeof(arr)/sizeof(int);\nint Sum=1;\nvector<int> triplets(arr,arr+len);\nvector<int> result=threeSumClosest(triplets,Sum);\n```","source":"_posts/LeetCode-3SumClosest.md","raw":"---\ntitle: 3 Sum Closest\ndate: 2017-01-05 09:46:03\ncategories: 算法\ntags: [LeetCode,算法,数组]\n---\n\nGiven an array S of n integers, find three integers in S such that the sum is closest to a given number,target. Return the sum of the three integers. You may assume that each input would have exactly one solution. For example, given array S = {-1 2 1 -4}, and target = 1.the sum that is closest to the target is 2. (-1 + 2 + 1 = 2);\n在一个有n个整数的数组S中寻找3个整数，使三个之和最接近于指定整数。\n<!--more-->\n分析：3Sum是在数组中寻找三元之和等于sum,3SumClosest是求其和最接近于target。功能非常相近，因此还是应该先排序。\n\n```\nvector<int>  threeSumClosest(vector<int>& num, int target) {\n\tvector<int>  result;\n\tint len=num.size(),a,b,c,Dvalue=abs(target-(num[0]+num[1]+num[2]));\n\tsort(num.begin(), num.end());\n\tfor (int i = 0; i < len; ++i){\n\t\ta=num[i];\n\t\tfor (int j = i+1; j < len; ++j){\n\t\t\tb=num[j];\n\t\t\tfor (int k = j+1; k < len; ++k){\n\t\t\t\tc=num[k];\n\t\t\t\tif (abs(target-(a+b+c))<Dvalue){\n\t\t\t\t\tDvalue=abs(target-(a+b+c));\n\t\t\t\t\tif (result.size()>0){\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t\tresult.pop_back();\n\t\t\t\t\t}\n\t\t\t\t\tresult.push_back(a);\n\t\t\t\t\tresult.push_back(b);\n\t\t\t\t\tresult.push_back(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n调用实例：\n```\nint arr[] = {-1, 2, 1 -4};\nint len=sizeof(arr)/sizeof(int);\nint Sum=1;\nvector<int> triplets(arr,arr+len);\nvector<int> result=threeSumClosest(triplets,Sum);\n```","slug":"LeetCode-3SumClosest","published":1,"updated":"2017-06-02T16:12:32.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xp0012doex7uc2z7cy","content":"<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number,target. Return the sum of the three integers. You may assume that each input would have exactly one solution. For example, given array S = {-1 2 1 -4}, and target = 1.the sum that is closest to the target is 2. (-1 + 2 + 1 = 2);<br>在一个有n个整数的数组S中寻找3个整数，使三个之和最接近于指定整数。<br><a id=\"more\"></a><br>分析：3Sum是在数组中寻找三元之和等于sum,3SumClosest是求其和最接近于target。功能非常相近，因此还是应该先排序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt;int&gt;  threeSumClosest(vector&lt;int&gt;&amp; num, int target) &#123;</div><div class=\"line\">\tvector&lt;int&gt;  result;</div><div class=\"line\">\tint len=num.size(),a,b,c,Dvalue=abs(target-(num[0]+num[1]+num[2]));</div><div class=\"line\">\tsort(num.begin(), num.end());</div><div class=\"line\">\tfor (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">\t\ta=num[i];</div><div class=\"line\">\t\tfor (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">\t\t\tb=num[j];</div><div class=\"line\">\t\t\tfor (int k = j+1; k &lt; len; ++k)&#123;</div><div class=\"line\">\t\t\t\tc=num[k];</div><div class=\"line\">\t\t\t\tif (abs(target-(a+b+c))&lt;Dvalue)&#123;</div><div class=\"line\">\t\t\t\t\tDvalue=abs(target-(a+b+c));</div><div class=\"line\">\t\t\t\t\tif (result.size()&gt;0)&#123;</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tresult.push_back(a);</div><div class=\"line\">\t\t\t\t\tresult.push_back(b);</div><div class=\"line\">\t\t\t\t\tresult.push_back(c);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 2, 1 -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int Sum=1;</div><div class=\"line\">vector&lt;int&gt; triplets(arr,arr+len);</div><div class=\"line\">vector&lt;int&gt; result=threeSumClosest(triplets,Sum);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number,target. Return the sum of the three integers. You may assume that each input would have exactly one solution. For example, given array S = {-1 2 1 -4}, and target = 1.the sum that is closest to the target is 2. (-1 + 2 + 1 = 2);<br>在一个有n个整数的数组S中寻找3个整数，使三个之和最接近于指定整数。<br>","more":"<br>分析：3Sum是在数组中寻找三元之和等于sum,3SumClosest是求其和最接近于target。功能非常相近，因此还是应该先排序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt;int&gt;  threeSumClosest(vector&lt;int&gt;&amp; num, int target) &#123;</div><div class=\"line\">\tvector&lt;int&gt;  result;</div><div class=\"line\">\tint len=num.size(),a,b,c,Dvalue=abs(target-(num[0]+num[1]+num[2]));</div><div class=\"line\">\tsort(num.begin(), num.end());</div><div class=\"line\">\tfor (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">\t\ta=num[i];</div><div class=\"line\">\t\tfor (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">\t\t\tb=num[j];</div><div class=\"line\">\t\t\tfor (int k = j+1; k &lt; len; ++k)&#123;</div><div class=\"line\">\t\t\t\tc=num[k];</div><div class=\"line\">\t\t\t\tif (abs(target-(a+b+c))&lt;Dvalue)&#123;</div><div class=\"line\">\t\t\t\t\tDvalue=abs(target-(a+b+c));</div><div class=\"line\">\t\t\t\t\tif (result.size()&gt;0)&#123;</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t\tresult.pop_back();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tresult.push_back(a);</div><div class=\"line\">\t\t\t\t\tresult.push_back(b);</div><div class=\"line\">\t\t\t\t\tresult.push_back(c);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 2, 1 -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int Sum=1;</div><div class=\"line\">vector&lt;int&gt; triplets(arr,arr+len);</div><div class=\"line\">vector&lt;int&gt; result=threeSumClosest(triplets,Sum);</div></pre></td></tr></table></figure></p>"},{"title":"Next Permutation","date":"2017-01-10T03:58:11.000Z","_content":" Implement next permutation, which rearranges numbers into the lexicographicalally next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).the replacement must be in-place, do not allocate extra memory.在不分配额外内存的条件下，寻找比当前排序顺序大的下一个排序。若当前排序已经最大，就寻找最小排列。\n<!--more-->\n> Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in theright-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n\n分析：\n首先分析什么时候排列顺序最大，即数组越大的元素排在最前（最高位）。同，当排序顺序呈广义递减时，排序顺序最大。\n比当前排序顺序大的下一个排序又是什么情况呢？借助排列顺序最大的情况来考虑，从排序数列尾部向前遍历，找到第一个逆序数对（如[3,4,1,4,3,2,1]中，[1,4]即为第一个逆序数对），将逆序数对及其后的所有排序数（[1,4,3,2,1]）进行重排，得到比当前排序顺序大的下一个排序。\n重排规则：\n例：[1,4,3,2,1]->[2,1,1,3,4]\n- 也是从排序数列尾部向前遍历找到第一个比逆序数大的数字(找到第一个比1大的数字，即2)。\n- 交换两个数字顺序（[1,4,3,2,1]->[2,4,3,1,1]）。\n- 再对除第一个数字外的新数列进行反转即可（[1,4,3,2,1]->[2,1,1,3,4]）。\n\n```\nvector<int> NextPermutation(vector<int> &A, int len) {\n    int i,j;\n    int flag = 0;\n    for (i = len-1; i > 0 ; --i) {\n        if (A[i]-A[i-1]<=0){\n            flag++;\n        }else{\n            for (int j = len-1; j >= i; --j){\n                if (A[j]>A[i-1]){//找到第一个比A[i-1]大的数字\n                    swap(A[j],A[i-1]);\n                    reverse(A.begin()+i, A.end());\n                    return A;\n                }\n            }\n        }\n        if (flag==len-1){//如果广义递减，则反转数组\n            reverse(A.begin(), A.end());\n            return A;\n        }      \n    }\n}\n\n```\n调用实例：\n```\nint arr[] = {1,4,3,2,1};\nint len=sizeof(arr)/sizeof(int);\nvector<int> A(arr,arr+len);\nvector<int> result = NextPermutation(A, len);\n```","source":"_posts/LeetCode-NextPermutation.md","raw":"---\ntitle: Next Permutation\ndate: 2017-01-10 11:58:11\ncategories: 算法\ntags: [LeetCode,数组]\n\n---\n Implement next permutation, which rearranges numbers into the lexicographicalally next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).the replacement must be in-place, do not allocate extra memory.在不分配额外内存的条件下，寻找比当前排序顺序大的下一个排序。若当前排序已经最大，就寻找最小排列。\n<!--more-->\n> Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in theright-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n\n分析：\n首先分析什么时候排列顺序最大，即数组越大的元素排在最前（最高位）。同，当排序顺序呈广义递减时，排序顺序最大。\n比当前排序顺序大的下一个排序又是什么情况呢？借助排列顺序最大的情况来考虑，从排序数列尾部向前遍历，找到第一个逆序数对（如[3,4,1,4,3,2,1]中，[1,4]即为第一个逆序数对），将逆序数对及其后的所有排序数（[1,4,3,2,1]）进行重排，得到比当前排序顺序大的下一个排序。\n重排规则：\n例：[1,4,3,2,1]->[2,1,1,3,4]\n- 也是从排序数列尾部向前遍历找到第一个比逆序数大的数字(找到第一个比1大的数字，即2)。\n- 交换两个数字顺序（[1,4,3,2,1]->[2,4,3,1,1]）。\n- 再对除第一个数字外的新数列进行反转即可（[1,4,3,2,1]->[2,1,1,3,4]）。\n\n```\nvector<int> NextPermutation(vector<int> &A, int len) {\n    int i,j;\n    int flag = 0;\n    for (i = len-1; i > 0 ; --i) {\n        if (A[i]-A[i-1]<=0){\n            flag++;\n        }else{\n            for (int j = len-1; j >= i; --j){\n                if (A[j]>A[i-1]){//找到第一个比A[i-1]大的数字\n                    swap(A[j],A[i-1]);\n                    reverse(A.begin()+i, A.end());\n                    return A;\n                }\n            }\n        }\n        if (flag==len-1){//如果广义递减，则反转数组\n            reverse(A.begin(), A.end());\n            return A;\n        }      \n    }\n}\n\n```\n调用实例：\n```\nint arr[] = {1,4,3,2,1};\nint len=sizeof(arr)/sizeof(int);\nvector<int> A(arr,arr+len);\nvector<int> result = NextPermutation(A, len);\n```","slug":"LeetCode-NextPermutation","published":1,"updated":"2017-06-02T16:12:28.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xs0016doexpdfeyoym","content":"<p> Implement next permutation, which rearranges numbers into the lexicographicalally next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).the replacement must be in-place, do not allocate extra memory.在不分配额外内存的条件下，寻找比当前排序顺序大的下一个排序。若当前排序已经最大，就寻找最小排列。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in theright-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>\n</blockquote>\n<p>分析：<br>首先分析什么时候排列顺序最大，即数组越大的元素排在最前（最高位）。同，当排序顺序呈广义递减时，排序顺序最大。<br>比当前排序顺序大的下一个排序又是什么情况呢？借助排列顺序最大的情况来考虑，从排序数列尾部向前遍历，找到第一个逆序数对（如[3,4,1,4,3,2,1]中，[1,4]即为第一个逆序数对），将逆序数对及其后的所有排序数（[1,4,3,2,1]）进行重排，得到比当前排序顺序大的下一个排序。<br>重排规则：<br>例：[1,4,3,2,1]-&gt;[2,1,1,3,4]</p>\n<ul>\n<li>也是从排序数列尾部向前遍历找到第一个比逆序数大的数字(找到第一个比1大的数字，即2)。</li>\n<li>交换两个数字顺序（[1,4,3,2,1]-&gt;[2,4,3,1,1]）。</li>\n<li>再对除第一个数字外的新数列进行反转即可（[1,4,3,2,1]-&gt;[2,1,1,3,4]）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt;int&gt; NextPermutation(vector&lt;int&gt; &amp;A, int len) &#123;</div><div class=\"line\">    int i,j;</div><div class=\"line\">    int flag = 0;</div><div class=\"line\">    for (i = len-1; i &gt; 0 ; --i) &#123;</div><div class=\"line\">        if (A[i]-A[i-1]&lt;=0)&#123;</div><div class=\"line\">            flag++;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            for (int j = len-1; j &gt;= i; --j)&#123;</div><div class=\"line\">                if (A[j]&gt;A[i-1])&#123;//找到第一个比A[i-1]大的数字</div><div class=\"line\">                    swap(A[j],A[i-1]);</div><div class=\"line\">                    reverse(A.begin()+i, A.end());</div><div class=\"line\">                    return A;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (flag==len-1)&#123;//如果广义递减，则反转数组</div><div class=\"line\">            reverse(A.begin(), A.end());</div><div class=\"line\">            return A;</div><div class=\"line\">        &#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;1,4,3,2,1&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">vector&lt;int&gt; A(arr,arr+len);</div><div class=\"line\">vector&lt;int&gt; result = NextPermutation(A, len);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p> Implement next permutation, which rearranges numbers into the lexicographicalally next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).the replacement must be in-place, do not allocate extra memory.在不分配额外内存的条件下，寻找比当前排序顺序大的下一个排序。若当前排序已经最大，就寻找最小排列。<br>","more":"</p>\n<blockquote>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in theright-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>\n</blockquote>\n<p>分析：<br>首先分析什么时候排列顺序最大，即数组越大的元素排在最前（最高位）。同，当排序顺序呈广义递减时，排序顺序最大。<br>比当前排序顺序大的下一个排序又是什么情况呢？借助排列顺序最大的情况来考虑，从排序数列尾部向前遍历，找到第一个逆序数对（如[3,4,1,4,3,2,1]中，[1,4]即为第一个逆序数对），将逆序数对及其后的所有排序数（[1,4,3,2,1]）进行重排，得到比当前排序顺序大的下一个排序。<br>重排规则：<br>例：[1,4,3,2,1]-&gt;[2,1,1,3,4]</p>\n<ul>\n<li>也是从排序数列尾部向前遍历找到第一个比逆序数大的数字(找到第一个比1大的数字，即2)。</li>\n<li>交换两个数字顺序（[1,4,3,2,1]-&gt;[2,4,3,1,1]）。</li>\n<li>再对除第一个数字外的新数列进行反转即可（[1,4,3,2,1]-&gt;[2,1,1,3,4]）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">vector&lt;int&gt; NextPermutation(vector&lt;int&gt; &amp;A, int len) &#123;</div><div class=\"line\">    int i,j;</div><div class=\"line\">    int flag = 0;</div><div class=\"line\">    for (i = len-1; i &gt; 0 ; --i) &#123;</div><div class=\"line\">        if (A[i]-A[i-1]&lt;=0)&#123;</div><div class=\"line\">            flag++;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            for (int j = len-1; j &gt;= i; --j)&#123;</div><div class=\"line\">                if (A[j]&gt;A[i-1])&#123;//找到第一个比A[i-1]大的数字</div><div class=\"line\">                    swap(A[j],A[i-1]);</div><div class=\"line\">                    reverse(A.begin()+i, A.end());</div><div class=\"line\">                    return A;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (flag==len-1)&#123;//如果广义递减，则反转数组</div><div class=\"line\">            reverse(A.begin(), A.end());</div><div class=\"line\">            return A;</div><div class=\"line\">        &#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;1,4,3,2,1&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">vector&lt;int&gt; A(arr,arr+len);</div><div class=\"line\">vector&lt;int&gt; result = NextPermutation(A, len);</div></pre></td></tr></table></figure></p>"},{"title":"Remove Element","date":"2017-01-08T01:36:41.000Z","_content":" Given an array and a value, remove all instances of that value in place and return the new length. the order of elements can be changed. It doesn’t matter what you leave beyond the new length.给定一个数组和一个值，删除数组中与这个值相等的元素。元素的顺序可以被改变。\n<!--more-->\n法一：\n```\nint removeElement(int A[], int n, int elem) {\n\tint index = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (A[i] != elem) {\n\t\t\tA[index++] = A[i];\n\t\t}\n\t}\n\treturn index;\n}\n```\n\n调用实例：\n```\nint arr[] = {-1, 0, 1, 2, -1, -4};\nint len=sizeof(arr)/sizeof(int);\nint value=0;\nint index = removeElement(arr, 6, value);//5\n```\n\n法二：\n此题也可以先排序，再删除元素。","source":"_posts/LeetCode-RemoveElement.md","raw":"---\ntitle: Remove Element\ndate: 2017-01-8 09:36:41\ncategories: 算法\ntags:  [LeetCode,数组]\n\n---\n Given an array and a value, remove all instances of that value in place and return the new length. the order of elements can be changed. It doesn’t matter what you leave beyond the new length.给定一个数组和一个值，删除数组中与这个值相等的元素。元素的顺序可以被改变。\n<!--more-->\n法一：\n```\nint removeElement(int A[], int n, int elem) {\n\tint index = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (A[i] != elem) {\n\t\t\tA[index++] = A[i];\n\t\t}\n\t}\n\treturn index;\n}\n```\n\n调用实例：\n```\nint arr[] = {-1, 0, 1, 2, -1, -4};\nint len=sizeof(arr)/sizeof(int);\nint value=0;\nint index = removeElement(arr, 6, value);//5\n```\n\n法二：\n此题也可以先排序，再删除元素。","slug":"LeetCode-RemoveElement","published":1,"updated":"2017-06-02T16:12:25.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2xy001adoex2w7e4vx2","content":"<p> Given an array and a value, remove all instances of that value in place and return the new length. the order of elements can be changed. It doesn’t matter what you leave beyond the new length.给定一个数组和一个值，删除数组中与这个值相等的元素。元素的顺序可以被改变。<br><a id=\"more\"></a><br>法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int removeElement(int A[], int n, int elem) &#123;</div><div class=\"line\">\tint index = 0;</div><div class=\"line\">\tfor (int i = 0; i &lt; n; ++i) &#123;</div><div class=\"line\">\t\tif (A[i] != elem) &#123;</div><div class=\"line\">\t\t\tA[index++] = A[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn index;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 0, 1, 2, -1, -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int value=0;</div><div class=\"line\">int index = removeElement(arr, 6, value);//5</div></pre></td></tr></table></figure></p>\n<p>法二：<br>此题也可以先排序，再删除元素。</p>\n","excerpt":"<p> Given an array and a value, remove all instances of that value in place and return the new length. the order of elements can be changed. It doesn’t matter what you leave beyond the new length.给定一个数组和一个值，删除数组中与这个值相等的元素。元素的顺序可以被改变。<br>","more":"<br>法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int removeElement(int A[], int n, int elem) &#123;</div><div class=\"line\">\tint index = 0;</div><div class=\"line\">\tfor (int i = 0; i &lt; n; ++i) &#123;</div><div class=\"line\">\t\tif (A[i] != elem) &#123;</div><div class=\"line\">\t\t\tA[index++] = A[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn index;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;-1, 0, 1, 2, -1, -4&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int value=0;</div><div class=\"line\">int index = removeElement(arr, 6, value);//5</div></pre></td></tr></table></figure></p>\n<p>法二：<br>此题也可以先排序，再删除元素。</p>"},{"title":"两个有序数组的中值","date":"2017-01-02T03:08:20.000Z","_content":"\n There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log(m + n)).\n找两个有序数组的中值，要求时间复杂度为O(log(m + n)).\n<!--more-->\n第一想法是，直接合并两个数组，求k=(m+n)/2，可是显然这是个不合要求的想法，当k接近m+n，时间复杂度将变为O(m + n).\n\n再次，可以怎样优化呢，从何入手？题目条件有**有序**，这么一个完美条件要怎么利用呢···\n\n假设 A 和 B 的元素个数都大于 k/2，将 A 的第 k/2 个元素（即 A[k/2-1]）和 B 的第 k/2个元素（即 B[k/2-1]）进行比较，有以下三种情况\n   - A[k/2-1] == B[k/2-1]；\n   - A[k/2-1] > B[k/2-1]；\n   - A[k/2-1] < B[k/2-1]；\n\n如果 A[k/2-1] < B[k/2-1]，意味着 A[k/2-1] 不可能大于 A ∪ B 的第 k 大元素。因此，我们可以放心的删除 A 数组的这 k/2 个元素。\n同理，当 A[k/2-1] > B[k/2-1] 时，可以删除 B 数组的 k/2 个元素。\n当 A[k/2-1] == B[k/2-1] 时，说明找到了第 k 大的元素，直接返回 A[k/2-1] 或 B[k/2-1]即可。\n\n因此，我们可以写一个递归函数。那么函数终止条件如下\n   - 当 A 或 B 是空时，直接返回 B[k-1] 或 A[k-1]；\n   - 当 k=1 是，返回 min(A[0], B[0])；\n   - 当 A[k/2-1] == B[k/2-1] 时，返回 A[k/2-1] 或 B[k/2-1]；\n\n```\ndouble find_kth(int A[], int m, int B[], int n, int k) {\n    if (m > n) {\n        return find_kth(B, n, A, m, k);\n    }\n    if (m == 0) {\n        return B[k - 1];\n    }\n    if (k == 1) {\n        return min(A[0], B[0]);\n    }\n    int pa = min(k / 2, m), pb = k - pa;\n    if (A[pa - 1] < B[pb - 1]){\n        return find_kth(A + pa, m - pa, B, n, k - pa);\n    }\n    else if (A[pa - 1] > B[pb - 1]){\n        return find_kth(A, m, B + pb, n - pb, k - pb);\n    }\n    else{\n        return A[pa - 1];\n    }\n}\nint MedianOfTwoSortedArrays(int *A,int m,int *B,int n){\n    int total = m + n;\n    if (total & 0x1){\n        return find_kth(A, m, B, n, total / 2 + 1);\n    }\n    else{\n        return (find_kth(A, m, B, n, total / 2)+ find_kth(A, m, B, n, total / 2 + 1)) / 2;\n    }\n}\n```","source":"_posts/LeetCode-两个有序数组的中值.md","raw":"---\ntitle: 两个有序数组的中值\ndate: 2017-01-02 11:08:20\ncategories: 算法\ntags: [LeetCode, 数组, 查找]\n---\n\n There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log(m + n)).\n找两个有序数组的中值，要求时间复杂度为O(log(m + n)).\n<!--more-->\n第一想法是，直接合并两个数组，求k=(m+n)/2，可是显然这是个不合要求的想法，当k接近m+n，时间复杂度将变为O(m + n).\n\n再次，可以怎样优化呢，从何入手？题目条件有**有序**，这么一个完美条件要怎么利用呢···\n\n假设 A 和 B 的元素个数都大于 k/2，将 A 的第 k/2 个元素（即 A[k/2-1]）和 B 的第 k/2个元素（即 B[k/2-1]）进行比较，有以下三种情况\n   - A[k/2-1] == B[k/2-1]；\n   - A[k/2-1] > B[k/2-1]；\n   - A[k/2-1] < B[k/2-1]；\n\n如果 A[k/2-1] < B[k/2-1]，意味着 A[k/2-1] 不可能大于 A ∪ B 的第 k 大元素。因此，我们可以放心的删除 A 数组的这 k/2 个元素。\n同理，当 A[k/2-1] > B[k/2-1] 时，可以删除 B 数组的 k/2 个元素。\n当 A[k/2-1] == B[k/2-1] 时，说明找到了第 k 大的元素，直接返回 A[k/2-1] 或 B[k/2-1]即可。\n\n因此，我们可以写一个递归函数。那么函数终止条件如下\n   - 当 A 或 B 是空时，直接返回 B[k-1] 或 A[k-1]；\n   - 当 k=1 是，返回 min(A[0], B[0])；\n   - 当 A[k/2-1] == B[k/2-1] 时，返回 A[k/2-1] 或 B[k/2-1]；\n\n```\ndouble find_kth(int A[], int m, int B[], int n, int k) {\n    if (m > n) {\n        return find_kth(B, n, A, m, k);\n    }\n    if (m == 0) {\n        return B[k - 1];\n    }\n    if (k == 1) {\n        return min(A[0], B[0]);\n    }\n    int pa = min(k / 2, m), pb = k - pa;\n    if (A[pa - 1] < B[pb - 1]){\n        return find_kth(A + pa, m - pa, B, n, k - pa);\n    }\n    else if (A[pa - 1] > B[pb - 1]){\n        return find_kth(A, m, B + pb, n - pb, k - pb);\n    }\n    else{\n        return A[pa - 1];\n    }\n}\nint MedianOfTwoSortedArrays(int *A,int m,int *B,int n){\n    int total = m + n;\n    if (total & 0x1){\n        return find_kth(A, m, B, n, total / 2 + 1);\n    }\n    else{\n        return (find_kth(A, m, B, n, total / 2)+ find_kth(A, m, B, n, total / 2 + 1)) / 2;\n    }\n}\n```","slug":"LeetCode-两个有序数组的中值","published":1,"updated":"2017-06-02T16:13:12.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2y4001ddoexngf8ef3k","content":"<p> There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log(m + n)).<br>找两个有序数组的中值，要求时间复杂度为O(log(m + n)).<br><a id=\"more\"></a><br>第一想法是，直接合并两个数组，求k=(m+n)/2，可是显然这是个不合要求的想法，当k接近m+n，时间复杂度将变为O(m + n).</p>\n<p>再次，可以怎样优化呢，从何入手？题目条件有<strong>有序</strong>，这么一个完美条件要怎么利用呢···</p>\n<p>假设 A 和 B 的元素个数都大于 k/2，将 A 的第 k/2 个元素（即 A[k/2-1]）和 B 的第 k/2个元素（即 B[k/2-1]）进行比较，有以下三种情况</p>\n<ul>\n<li>A[k/2-1] == B[k/2-1]；</li>\n<li>A[k/2-1] &gt; B[k/2-1]；</li>\n<li>A[k/2-1] &lt; B[k/2-1]；</li>\n</ul>\n<p>如果 A[k/2-1] &lt; B[k/2-1]，意味着 A[k/2-1] 不可能大于 A ∪ B 的第 k 大元素。因此，我们可以放心的删除 A 数组的这 k/2 个元素。<br>同理，当 A[k/2-1] &gt; B[k/2-1] 时，可以删除 B 数组的 k/2 个元素。<br>当 A[k/2-1] == B[k/2-1] 时，说明找到了第 k 大的元素，直接返回 A[k/2-1] 或 B[k/2-1]即可。</p>\n<p>因此，我们可以写一个递归函数。那么函数终止条件如下</p>\n<ul>\n<li>当 A 或 B 是空时，直接返回 B[k-1] 或 A[k-1]；</li>\n<li>当 k=1 是，返回 min(A[0], B[0])；</li>\n<li>当 A[k/2-1] == B[k/2-1] 时，返回 A[k/2-1] 或 B[k/2-1]；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">double find_kth(int A[], int m, int B[], int n, int k) &#123;</div><div class=\"line\">    if (m &gt; n) &#123;</div><div class=\"line\">        return find_kth(B, n, A, m, k);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (m == 0) &#123;</div><div class=\"line\">        return B[k - 1];</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (k == 1) &#123;</div><div class=\"line\">        return min(A[0], B[0]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    int pa = min(k / 2, m), pb = k - pa;</div><div class=\"line\">    if (A[pa - 1] &lt; B[pb - 1])&#123;</div><div class=\"line\">        return find_kth(A + pa, m - pa, B, n, k - pa);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if (A[pa - 1] &gt; B[pb - 1])&#123;</div><div class=\"line\">        return find_kth(A, m, B + pb, n - pb, k - pb);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return A[pa - 1];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int MedianOfTwoSortedArrays(int *A,int m,int *B,int n)&#123;</div><div class=\"line\">    int total = m + n;</div><div class=\"line\">    if (total &amp; 0x1)&#123;</div><div class=\"line\">        return find_kth(A, m, B, n, total / 2 + 1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return (find_kth(A, m, B, n, total / 2)+ find_kth(A, m, B, n, total / 2 + 1)) / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p> There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log(m + n)).<br>找两个有序数组的中值，要求时间复杂度为O(log(m + n)).<br>","more":"<br>第一想法是，直接合并两个数组，求k=(m+n)/2，可是显然这是个不合要求的想法，当k接近m+n，时间复杂度将变为O(m + n).</p>\n<p>再次，可以怎样优化呢，从何入手？题目条件有<strong>有序</strong>，这么一个完美条件要怎么利用呢···</p>\n<p>假设 A 和 B 的元素个数都大于 k/2，将 A 的第 k/2 个元素（即 A[k/2-1]）和 B 的第 k/2个元素（即 B[k/2-1]）进行比较，有以下三种情况</p>\n<ul>\n<li>A[k/2-1] == B[k/2-1]；</li>\n<li>A[k/2-1] &gt; B[k/2-1]；</li>\n<li>A[k/2-1] &lt; B[k/2-1]；</li>\n</ul>\n<p>如果 A[k/2-1] &lt; B[k/2-1]，意味着 A[k/2-1] 不可能大于 A ∪ B 的第 k 大元素。因此，我们可以放心的删除 A 数组的这 k/2 个元素。<br>同理，当 A[k/2-1] &gt; B[k/2-1] 时，可以删除 B 数组的 k/2 个元素。<br>当 A[k/2-1] == B[k/2-1] 时，说明找到了第 k 大的元素，直接返回 A[k/2-1] 或 B[k/2-1]即可。</p>\n<p>因此，我们可以写一个递归函数。那么函数终止条件如下</p>\n<ul>\n<li>当 A 或 B 是空时，直接返回 B[k-1] 或 A[k-1]；</li>\n<li>当 k=1 是，返回 min(A[0], B[0])；</li>\n<li>当 A[k/2-1] == B[k/2-1] 时，返回 A[k/2-1] 或 B[k/2-1]；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">double find_kth(int A[], int m, int B[], int n, int k) &#123;</div><div class=\"line\">    if (m &gt; n) &#123;</div><div class=\"line\">        return find_kth(B, n, A, m, k);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (m == 0) &#123;</div><div class=\"line\">        return B[k - 1];</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (k == 1) &#123;</div><div class=\"line\">        return min(A[0], B[0]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    int pa = min(k / 2, m), pb = k - pa;</div><div class=\"line\">    if (A[pa - 1] &lt; B[pb - 1])&#123;</div><div class=\"line\">        return find_kth(A + pa, m - pa, B, n, k - pa);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if (A[pa - 1] &gt; B[pb - 1])&#123;</div><div class=\"line\">        return find_kth(A, m, B + pb, n - pb, k - pb);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return A[pa - 1];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int MedianOfTwoSortedArrays(int *A,int m,int *B,int n)&#123;</div><div class=\"line\">    int total = m + n;</div><div class=\"line\">    if (total &amp; 0x1)&#123;</div><div class=\"line\">        return find_kth(A, m, B, n, total / 2 + 1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return (find_kth(A, m, B, n, total / 2)+ find_kth(A, m, B, n, total / 2 + 1)) / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"数组去重","date":"2016-12-28T08:49:08.000Z","_content":" Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.\n\n在不分配其他内存空间的条件下进行数组去重，并返回最终数组长度。\n<!--more-->\nFor example, Given input array A = [1,1,2],\nYour function should return length = 2, and A is now [1,2].\n\n法一：暴力穷举\n\n```\nint RemoveArroyDuplicate(int *Arr,int len){\n    if(len<=0){\n      return 0;\n    }else{\n      for (int i = 0; i < len; ++i){\n        for (int j = i+1; j < len; ++j){\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            j--;//重新比较\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n\n```\n\n重温C：\n- 获取数组长度\n  ```\n  int arr[] = {8, 5, 5, 1, 7, 6, 1, 9, 11, 3};\n  int len=sizeof(arr)/sizeof(int);\n  ```\n  这里我本想将函数进一步简化，使其只需传入数组指针，可是发现当数组名作为函数参数时退化为指针后sizeof得到的只是指针的长度。\n\n法二：先排序，再去重，这样能大大减少比较的次数。","source":"_posts/LeetCode-数组去重.md","raw":"---\ntitle: 数组去重\ndate: 2016-12-28 16:49:08\ncategories: 算法\ntags: [LeetCode,数组]\n\n---\n Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.\n\n在不分配其他内存空间的条件下进行数组去重，并返回最终数组长度。\n<!--more-->\nFor example, Given input array A = [1,1,2],\nYour function should return length = 2, and A is now [1,2].\n\n法一：暴力穷举\n\n```\nint RemoveArroyDuplicate(int *Arr,int len){\n    if(len<=0){\n      return 0;\n    }else{\n      for (int i = 0; i < len; ++i){\n        for (int j = i+1; j < len; ++j){\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            j--;//重新比较\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n\n```\n\n重温C：\n- 获取数组长度\n  ```\n  int arr[] = {8, 5, 5, 1, 7, 6, 1, 9, 11, 3};\n  int len=sizeof(arr)/sizeof(int);\n  ```\n  这里我本想将函数进一步简化，使其只需传入数组指针，可是发现当数组名作为函数参数时退化为指针后sizeof得到的只是指针的长度。\n\n法二：先排序，再去重，这样能大大减少比较的次数。","slug":"LeetCode-数组去重","published":1,"updated":"2017-06-02T16:13:08.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2y8001idoexa0nkf60g","content":"<p> Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.</p>\n<p>在不分配其他内存空间的条件下进行数组去重，并返回最终数组长度。<br><a id=\"more\"></a><br>For example, Given input array A = [1,1,2],<br>Your function should return length = 2, and A is now [1,2].</p>\n<p>法一：暴力穷举</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveArroyDuplicate(int *Arr,int len)&#123;</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            j--;//重新比较</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重温C：</p>\n<ul>\n<li><p>获取数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;8, 5, 5, 1, 7, 6, 1, 9, 11, 3&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div></pre></td></tr></table></figure>\n<p>这里我本想将函数进一步简化，使其只需传入数组指针，可是发现当数组名作为函数参数时退化为指针后sizeof得到的只是指针的长度。</p>\n</li>\n</ul>\n<p>法二：先排序，再去重，这样能大大减少比较的次数。</p>\n","excerpt":"<p> Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.</p>\n<p>在不分配其他内存空间的条件下进行数组去重，并返回最终数组长度。<br>","more":"<br>For example, Given input array A = [1,1,2],<br>Your function should return length = 2, and A is now [1,2].</p>\n<p>法一：暴力穷举</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveArroyDuplicate(int *Arr,int len)&#123;</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            j--;//重新比较</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重温C：</p>\n<ul>\n<li><p>获取数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;8, 5, 5, 1, 7, 6, 1, 9, 11, 3&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div></pre></td></tr></table></figure>\n<p>这里我本想将函数进一步简化，使其只需传入数组指针，可是发现当数组名作为函数参数时退化为指针后sizeof得到的只是指针的长度。</p>\n</li>\n</ul>\n<p>法二：先排序，再去重，这样能大大减少比较的次数。</p>"},{"title":"无重复元素数组的二分查找","date":"2016-12-30T01:11:42.000Z","_content":"\n\n>Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array.\n在一个无重复元素的有序数组，查找某个目标元素，返回下标，若不存在，返回-1.\n<!--more-->\n分析：\n这是一个线性查找问题，线性查找主要有三种方式，顺序查找、折半查找（二分查找）和分块查找。由题意可知，这里是无重复元素的数组，但由于被做了无法预知的旋转，现在已经变成无序。在无序的情况下，查找一个元素最坏就是做扫描O(n),这里可以进一步优化的就是先排序再采用折半查找，即二分查找。这里的时间复杂度为O(log(n)).\n\n```\nint biTreeSearch(int *Arr,int len,int target){\n    int first = 0, last = len;\n\tconst int mid = first+(last - first) / 2;\n\twhile (first != last) {\n\t\tif (Arr[mid] == target){\n\t\t\treturn mid;\n\t\t} else {\n\t\t\tif (Arr[mid] < target && target <= Arr[last-1]){\n\t\t\t\tfirst = mid + 1;\n\t\t\t}else{\n\t\t\t\tlast = mid;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```","source":"_posts/LeetCode-无重复元素数组的二分查找.md","raw":"---\ntitle: 无重复元素数组的二分查找\ndate: 2016-12-30 09:11:42\ncategories: 算法\ntags: [LeetCode,查找,树,数组]\n---\n\n\n>Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array.\n在一个无重复元素的有序数组，查找某个目标元素，返回下标，若不存在，返回-1.\n<!--more-->\n分析：\n这是一个线性查找问题，线性查找主要有三种方式，顺序查找、折半查找（二分查找）和分块查找。由题意可知，这里是无重复元素的数组，但由于被做了无法预知的旋转，现在已经变成无序。在无序的情况下，查找一个元素最坏就是做扫描O(n),这里可以进一步优化的就是先排序再采用折半查找，即二分查找。这里的时间复杂度为O(log(n)).\n\n```\nint biTreeSearch(int *Arr,int len,int target){\n    int first = 0, last = len;\n\tconst int mid = first+(last - first) / 2;\n\twhile (first != last) {\n\t\tif (Arr[mid] == target){\n\t\t\treturn mid;\n\t\t} else {\n\t\t\tif (Arr[mid] < target && target <= Arr[last-1]){\n\t\t\t\tfirst = mid + 1;\n\t\t\t}else{\n\t\t\t\tlast = mid;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n```","slug":"LeetCode-无重复元素数组的二分查找","published":1,"updated":"2017-06-02T16:13:00.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yc001ldoexuoxwcedd","content":"<blockquote>\n<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array.<br>在一个无重复元素的有序数组，查找某个目标元素，返回下标，若不存在，返回-1.<br><a id=\"more\"></a><br>分析：<br>这是一个线性查找问题，线性查找主要有三种方式，顺序查找、折半查找（二分查找）和分块查找。由题意可知，这里是无重复元素的数组，但由于被做了无法预知的旋转，现在已经变成无序。在无序的情况下，查找一个元素最坏就是做扫描O(n),这里可以进一步优化的就是先排序再采用折半查找，即二分查找。这里的时间复杂度为O(log(n)).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int biTreeSearch(int *Arr,int len,int target)&#123;</div><div class=\"line\">    int first = 0, last = len;</div><div class=\"line\">\tconst int mid = first+(last - first) / 2;</div><div class=\"line\">\twhile (first != last) &#123;</div><div class=\"line\">\t\tif (Arr[mid] == target)&#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (Arr[mid] &lt; target &amp;&amp; target &lt;= Arr[last-1])&#123;</div><div class=\"line\">\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn -1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<blockquote>\n<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). You are given a target value to search. If found in the array return its index, otherwise return -1. You may assume no duplicate exists in the array.<br>在一个无重复元素的有序数组，查找某个目标元素，返回下标，若不存在，返回-1.<br>","more":"<br>分析：<br>这是一个线性查找问题，线性查找主要有三种方式，顺序查找、折半查找（二分查找）和分块查找。由题意可知，这里是无重复元素的数组，但由于被做了无法预知的旋转，现在已经变成无序。在无序的情况下，查找一个元素最坏就是做扫描O(n),这里可以进一步优化的就是先排序再采用折半查找，即二分查找。这里的时间复杂度为O(log(n)).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int biTreeSearch(int *Arr,int len,int target)&#123;</div><div class=\"line\">    int first = 0, last = len;</div><div class=\"line\">\tconst int mid = first+(last - first) / 2;</div><div class=\"line\">\twhile (first != last) &#123;</div><div class=\"line\">\t\tif (Arr[mid] == target)&#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (Arr[mid] &lt; target &amp;&amp; target &lt;= Arr[last-1])&#123;</div><div class=\"line\">\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn -1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"最长连续序列","date":"2017-01-03T09:28:42.000Z","_content":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\nFor example, Given [100, 4, 200, 1, 3, 2], The longest consecutive elements sequence is [ 1, 2, 3, 4]. Return its length: 4.Your algorithm should run in O(n) complexity.\n<!--more-->\n在时间复杂度为O(n)的条件下找到一个无序数组中最长连续序列。\n\n分析：用一个哈希表 used 记录每个元素是否使用。对每个元素，以该元素为中心，往左右扩张查找，直到不连续为止，记录下最长的长度。\n\n辅助哈希结构体\n```\ntypedef struct ConsList{\n  int data;\n  bool status;\n}ConsList;\n```\n功能函数1：查找当前元素的加一个步长元素\n参数说明：\n<pre>ConsList *used    使用情况哈希表\nint i             当前中心元素下标\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\nint findNext(ConsList *used,int i,int len,int index){\n    int Nextlength=0;\n    bool flag=false;//扫描右边时是否找到\n    for (int j = i + 1; j < len; ++j) {//扫描右边直到终点\n        if (used[j].data==used[i].data+index){//若找到这个元素，标记被使用，flag置true标志查找成功。\n            used[j].status = true;\n            ++Nextlength;\n            Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素\n            flag=true;\n            break;\n        }\n    }\n    if (!flag){//如果在右边没找到再扫描左边\n      for (int j = i - 1; j > -1; --j) {//扫描左边直到起点\n          if (used[j].data==used[i].data+index){//若找到这个元素，标记被使用。\n              used[j].status = true;\n              ++Nextlength;\n              Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素\n              break;\n          }\n      }\n    }\n    return Nextlength;\n}\n```\n功能函数2：查找当前元素的减一个步长元素\n参数说明：\n<pre>ConsList *used    使用情况哈希表\nint i             当前中心元素下标\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\n//查找当前元素的前一个步长元素\nint findPrev(ConsList *used,int i,int len,int index){\n    int Prevlength=0;\n    bool flag=false;//扫描右边时是否找到\n    for (int j = i + 1; j < len; ++j) {//扫描右边直到终点\n        if (used[j].data==used[i].data-index){//若找到这个元素，标记被使用，flag置true标志查找成功。\n            used[j].status = true;\n            ++Prevlength;\n            Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素\n            flag=true;\n            break;\n        }\n    }\n    if (!flag){//如果在右边没找到再扫描左边\n      for (int j = i - 1; j > -1; --j) {//扫描左边直到起点\n          if (used[j].data==used[i].data-index){//若找到这个元素，标记被使用。\n              used[j].status = true;\n              ++Prevlength;\n              Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素\n              break;\n          }\n      }\n    }\n    return Prevlength;\n}\n```\n主体函数：查找最长连续序列长度\n参数说明：\n<pre>int *Arr          待查数组\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\nint LongestConsecutive(int *Arr,int len,int index){\n    ConsList used[len];\n    for (int i = 0; i < len; ++i){\n       used[i].data = Arr[i];\n       used[i].status = false;\n    }\n    int longest = 0;\n    for (int i = 0; i < len; ++i){\n        if (used[i].status) continue;//如果此元素已经被使用，跳出循环\n        int length = 1;\n        used[i].status = true;\n        length+=findNext(used,i,len,index)+findPrev(used,i,len,index);\n        longest = max(longest, length);\n    }\n    return longest;\n}\n```\n调用实例：\n```\n    int arr[] = {6, 8, 100, 5, 4, 200, 1, 3, 2};\n    int len=sizeof(arr)/sizeof(int);\n    int index=1;//步长\n    len = LongestConsecutive(arr,len,index);\n    printf(\"%d \", len);\n```","source":"_posts/LeetCode-最长连续序列.md","raw":"---\ntitle: 最长连续序列\ndate: 2017-01-03 17:28:42\ncategories: 算法\ntags: [LeetCode,数组]\n\n---\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\nFor example, Given [100, 4, 200, 1, 3, 2], The longest consecutive elements sequence is [ 1, 2, 3, 4]. Return its length: 4.Your algorithm should run in O(n) complexity.\n<!--more-->\n在时间复杂度为O(n)的条件下找到一个无序数组中最长连续序列。\n\n分析：用一个哈希表 used 记录每个元素是否使用。对每个元素，以该元素为中心，往左右扩张查找，直到不连续为止，记录下最长的长度。\n\n辅助哈希结构体\n```\ntypedef struct ConsList{\n  int data;\n  bool status;\n}ConsList;\n```\n功能函数1：查找当前元素的加一个步长元素\n参数说明：\n<pre>ConsList *used    使用情况哈希表\nint i             当前中心元素下标\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\nint findNext(ConsList *used,int i,int len,int index){\n    int Nextlength=0;\n    bool flag=false;//扫描右边时是否找到\n    for (int j = i + 1; j < len; ++j) {//扫描右边直到终点\n        if (used[j].data==used[i].data+index){//若找到这个元素，标记被使用，flag置true标志查找成功。\n            used[j].status = true;\n            ++Nextlength;\n            Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素\n            flag=true;\n            break;\n        }\n    }\n    if (!flag){//如果在右边没找到再扫描左边\n      for (int j = i - 1; j > -1; --j) {//扫描左边直到起点\n          if (used[j].data==used[i].data+index){//若找到这个元素，标记被使用。\n              used[j].status = true;\n              ++Nextlength;\n              Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素\n              break;\n          }\n      }\n    }\n    return Nextlength;\n}\n```\n功能函数2：查找当前元素的减一个步长元素\n参数说明：\n<pre>ConsList *used    使用情况哈希表\nint i             当前中心元素下标\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\n//查找当前元素的前一个步长元素\nint findPrev(ConsList *used,int i,int len,int index){\n    int Prevlength=0;\n    bool flag=false;//扫描右边时是否找到\n    for (int j = i + 1; j < len; ++j) {//扫描右边直到终点\n        if (used[j].data==used[i].data-index){//若找到这个元素，标记被使用，flag置true标志查找成功。\n            used[j].status = true;\n            ++Prevlength;\n            Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素\n            flag=true;\n            break;\n        }\n    }\n    if (!flag){//如果在右边没找到再扫描左边\n      for (int j = i - 1; j > -1; --j) {//扫描左边直到起点\n          if (used[j].data==used[i].data-index){//若找到这个元素，标记被使用。\n              used[j].status = true;\n              ++Prevlength;\n              Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素\n              break;\n          }\n      }\n    }\n    return Prevlength;\n}\n```\n主体函数：查找最长连续序列长度\n参数说明：\n<pre>int *Arr          待查数组\nint len           被查找数组长度\nint index         序列公差，这里要求为连续，即为1</pre>\n```\nint LongestConsecutive(int *Arr,int len,int index){\n    ConsList used[len];\n    for (int i = 0; i < len; ++i){\n       used[i].data = Arr[i];\n       used[i].status = false;\n    }\n    int longest = 0;\n    for (int i = 0; i < len; ++i){\n        if (used[i].status) continue;//如果此元素已经被使用，跳出循环\n        int length = 1;\n        used[i].status = true;\n        length+=findNext(used,i,len,index)+findPrev(used,i,len,index);\n        longest = max(longest, length);\n    }\n    return longest;\n}\n```\n调用实例：\n```\n    int arr[] = {6, 8, 100, 5, 4, 200, 1, 3, 2};\n    int len=sizeof(arr)/sizeof(int);\n    int index=1;//步长\n    len = LongestConsecutive(arr,len,index);\n    printf(\"%d \", len);\n```","slug":"LeetCode-最长连续序列","published":1,"updated":"2017-06-02T16:12:55.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yh001pdoexm86zslqe","content":"<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.<br>For example, Given [100, 4, 200, 1, 3, 2], The longest consecutive elements sequence is [ 1, 2, 3, 4]. Return its length: 4.Your algorithm should run in O(n) complexity.<br><a id=\"more\"></a><br>在时间复杂度为O(n)的条件下找到一个无序数组中最长连续序列。</p>\n<p>分析：用一个哈希表 used 记录每个元素是否使用。对每个元素，以该元素为中心，往左右扩张查找，直到不连续为止，记录下最长的长度。</p>\n<p>辅助哈希结构体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef struct ConsList&#123;</div><div class=\"line\">  int data;</div><div class=\"line\">  bool status;</div><div class=\"line\">&#125;ConsList;</div></pre></td></tr></table></figure></p>\n<p>功能函数1：查找当前元素的加一个步长元素<br>参数说明：</p>\n<p><pre>ConsList *used    使用情况哈希表<br>int i             当前中心元素下标<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findNext(ConsList *used,int i,int len,int index)&#123;</div><div class=\"line\">    int Nextlength=0;</div><div class=\"line\">    bool flag=false;//扫描右边时是否找到</div><div class=\"line\">    for (int j = i + 1; j &lt; len; ++j) &#123;//扫描右边直到终点</div><div class=\"line\">        if (used[j].data==used[i].data+index)&#123;//若找到这个元素，标记被使用，flag置true标志查找成功。</div><div class=\"line\">            used[j].status = true;</div><div class=\"line\">            ++Nextlength;</div><div class=\"line\">            Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素</div><div class=\"line\">            flag=true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!flag)&#123;//如果在右边没找到再扫描左边</div><div class=\"line\">      for (int j = i - 1; j &gt; -1; --j) &#123;//扫描左边直到起点</div><div class=\"line\">          if (used[j].data==used[i].data+index)&#123;//若找到这个元素，标记被使用。</div><div class=\"line\">              used[j].status = true;</div><div class=\"line\">              ++Nextlength;</div><div class=\"line\">              Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return Nextlength;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>功能函数2：查找当前元素的减一个步长元素<br>参数说明：</p>\n<p><pre>ConsList *used    使用情况哈希表<br>int i             当前中心元素下标<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//查找当前元素的前一个步长元素</div><div class=\"line\">int findPrev(ConsList *used,int i,int len,int index)&#123;</div><div class=\"line\">    int Prevlength=0;</div><div class=\"line\">    bool flag=false;//扫描右边时是否找到</div><div class=\"line\">    for (int j = i + 1; j &lt; len; ++j) &#123;//扫描右边直到终点</div><div class=\"line\">        if (used[j].data==used[i].data-index)&#123;//若找到这个元素，标记被使用，flag置true标志查找成功。</div><div class=\"line\">            used[j].status = true;</div><div class=\"line\">            ++Prevlength;</div><div class=\"line\">            Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素</div><div class=\"line\">            flag=true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!flag)&#123;//如果在右边没找到再扫描左边</div><div class=\"line\">      for (int j = i - 1; j &gt; -1; --j) &#123;//扫描左边直到起点</div><div class=\"line\">          if (used[j].data==used[i].data-index)&#123;//若找到这个元素，标记被使用。</div><div class=\"line\">              used[j].status = true;</div><div class=\"line\">              ++Prevlength;</div><div class=\"line\">              Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return Prevlength;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主体函数：查找最长连续序列长度<br>参数说明：</p>\n<p><pre>int *Arr          待查数组<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int LongestConsecutive(int *Arr,int len,int index)&#123;</div><div class=\"line\">    ConsList used[len];</div><div class=\"line\">    for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">       used[i].data = Arr[i];</div><div class=\"line\">       used[i].status = false;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int longest = 0;</div><div class=\"line\">    for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        if (used[i].status) continue;//如果此元素已经被使用，跳出循环</div><div class=\"line\">        int length = 1;</div><div class=\"line\">        used[i].status = true;</div><div class=\"line\">        length+=findNext(used,i,len,index)+findPrev(used,i,len,index);</div><div class=\"line\">        longest = max(longest, length);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return longest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;6, 8, 100, 5, 4, 200, 1, 3, 2&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int index=1;//步长</div><div class=\"line\">len = LongestConsecutive(arr,len,index);</div><div class=\"line\">printf(&quot;%d &quot;, len);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.<br>For example, Given [100, 4, 200, 1, 3, 2], The longest consecutive elements sequence is [ 1, 2, 3, 4]. Return its length: 4.Your algorithm should run in O(n) complexity.<br>","more":"<br>在时间复杂度为O(n)的条件下找到一个无序数组中最长连续序列。</p>\n<p>分析：用一个哈希表 used 记录每个元素是否使用。对每个元素，以该元素为中心，往左右扩张查找，直到不连续为止，记录下最长的长度。</p>\n<p>辅助哈希结构体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef struct ConsList&#123;</div><div class=\"line\">  int data;</div><div class=\"line\">  bool status;</div><div class=\"line\">&#125;ConsList;</div></pre></td></tr></table></figure></p>\n<p>功能函数1：查找当前元素的加一个步长元素<br>参数说明：</p>\n<p><pre>ConsList *used    使用情况哈希表<br>int i             当前中心元素下标<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findNext(ConsList *used,int i,int len,int index)&#123;</div><div class=\"line\">    int Nextlength=0;</div><div class=\"line\">    bool flag=false;//扫描右边时是否找到</div><div class=\"line\">    for (int j = i + 1; j &lt; len; ++j) &#123;//扫描右边直到终点</div><div class=\"line\">        if (used[j].data==used[i].data+index)&#123;//若找到这个元素，标记被使用，flag置true标志查找成功。</div><div class=\"line\">            used[j].status = true;</div><div class=\"line\">            ++Nextlength;</div><div class=\"line\">            Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素</div><div class=\"line\">            flag=true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!flag)&#123;//如果在右边没找到再扫描左边</div><div class=\"line\">      for (int j = i - 1; j &gt; -1; --j) &#123;//扫描左边直到起点</div><div class=\"line\">          if (used[j].data==used[i].data+index)&#123;//若找到这个元素，标记被使用。</div><div class=\"line\">              used[j].status = true;</div><div class=\"line\">              ++Nextlength;</div><div class=\"line\">              Nextlength+=findNext(used,j,len,index);//以used[j]为新中心，找比used[j]加一个步长元素</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return Nextlength;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>功能函数2：查找当前元素的减一个步长元素<br>参数说明：</p>\n<p><pre>ConsList *used    使用情况哈希表<br>int i             当前中心元素下标<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//查找当前元素的前一个步长元素</div><div class=\"line\">int findPrev(ConsList *used,int i,int len,int index)&#123;</div><div class=\"line\">    int Prevlength=0;</div><div class=\"line\">    bool flag=false;//扫描右边时是否找到</div><div class=\"line\">    for (int j = i + 1; j &lt; len; ++j) &#123;//扫描右边直到终点</div><div class=\"line\">        if (used[j].data==used[i].data-index)&#123;//若找到这个元素，标记被使用，flag置true标志查找成功。</div><div class=\"line\">            used[j].status = true;</div><div class=\"line\">            ++Prevlength;</div><div class=\"line\">            Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素</div><div class=\"line\">            flag=true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!flag)&#123;//如果在右边没找到再扫描左边</div><div class=\"line\">      for (int j = i - 1; j &gt; -1; --j) &#123;//扫描左边直到起点</div><div class=\"line\">          if (used[j].data==used[i].data-index)&#123;//若找到这个元素，标记被使用。</div><div class=\"line\">              used[j].status = true;</div><div class=\"line\">              ++Prevlength;</div><div class=\"line\">              Prevlength+=findPrev(used,j,len,index);//以used[j]为新中心，找比used[j]减一个步长元素</div><div class=\"line\">              break;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return Prevlength;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主体函数：查找最长连续序列长度<br>参数说明：</p>\n<p><pre>int *Arr          待查数组<br>int len           被查找数组长度<br>int index         序列公差，这里要求为连续，即为1</pre><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int LongestConsecutive(int *Arr,int len,int index)&#123;</div><div class=\"line\">    ConsList used[len];</div><div class=\"line\">    for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">       used[i].data = Arr[i];</div><div class=\"line\">       used[i].status = false;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int longest = 0;</div><div class=\"line\">    for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        if (used[i].status) continue;//如果此元素已经被使用，跳出循环</div><div class=\"line\">        int length = 1;</div><div class=\"line\">        used[i].status = true;</div><div class=\"line\">        length+=findNext(used,i,len,index)+findPrev(used,i,len,index);</div><div class=\"line\">        longest = max(longest, length);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return longest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int arr[] = &#123;6, 8, 100, 5, 4, 200, 1, 3, 2&#125;;</div><div class=\"line\">int len=sizeof(arr)/sizeof(int);</div><div class=\"line\">int index=1;//步长</div><div class=\"line\">len = LongestConsecutive(arr,len,index);</div><div class=\"line\">printf(&quot;%d &quot;, len);</div></pre></td></tr></table></figure></p>"},{"title":"有序数组去重","date":"2016-12-29T02:22:35.000Z","_content":"\nFollow up for ”Remove Duplicates”: What if duplicates are allowed at most twice? \n\n将一个有序数组去重，使重复元素最多出现两次。\n<!--more-->\nFor example, Given sorted array A = [1,1,1,2,2,3], \nYour function should return length = 5, and A is now [1,1,2,2,3] \n\n法一：蜜汁算法，低级暴力。\n```\nint RemoveSortedArroyDuplicate(int *Arr,int len){//暴力穷举\n    if(len<=0){\n      return 0;\n    }else{\n      for (int i = 0; i < len; ++i){\n        for (int j = i+1; j < len; ++j){\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n```\n\n法二：\n```\nint RemoveSortedArroyDuplicate(int *Arr,int len){\n    if(len<=0){\n      return 0;\n    }else{\n      int index=2;//步长\n      for (int i = 0; i < len; ++i){\n        for (int j = i+index; j < len && Arr[i]==Arr[j]; ++j){//因为是有序数组，故当出现不相等的元素，即停止此次循环\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            j--;//重新比较\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n```","source":"_posts/LeetCode-有序数组去重.md","raw":"---\ntitle: 有序数组去重\ndate: 2016-12-29 10:22:35\ncategories: 算法\ntags: [LeetCode,数组]\n---\n\nFollow up for ”Remove Duplicates”: What if duplicates are allowed at most twice? \n\n将一个有序数组去重，使重复元素最多出现两次。\n<!--more-->\nFor example, Given sorted array A = [1,1,1,2,2,3], \nYour function should return length = 5, and A is now [1,1,2,2,3] \n\n法一：蜜汁算法，低级暴力。\n```\nint RemoveSortedArroyDuplicate(int *Arr,int len){//暴力穷举\n    if(len<=0){\n      return 0;\n    }else{\n      for (int i = 0; i < len; ++i){\n        for (int j = i+1; j < len; ++j){\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n```\n\n法二：\n```\nint RemoveSortedArroyDuplicate(int *Arr,int len){\n    if(len<=0){\n      return 0;\n    }else{\n      int index=2;//步长\n      for (int i = 0; i < len; ++i){\n        for (int j = i+index; j < len && Arr[i]==Arr[j]; ++j){//因为是有序数组，故当出现不相等的元素，即停止此次循环\n          if(Arr[i]==Arr[j]){\n            for (int m = j; m < len; ++m){//数组元素前移\n              Arr[m]=Arr[m+1];\n            }\n            j--;//重新比较\n            len--;//删除多余空间\n          }\n        }\n      }\n    }\n  return len;\n}\n```","slug":"LeetCode-有序数组去重","published":1,"updated":"2017-06-02T16:10:25.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yj001sdoex09wbs25c","content":"<p>Follow up for ”Remove Duplicates”: What if duplicates are allowed at most twice? </p>\n<p>将一个有序数组去重，使重复元素最多出现两次。<br><a id=\"more\"></a><br>For example, Given sorted array A = [1,1,1,2,2,3],<br>Your function should return length = 5, and A is now [1,1,2,2,3] </p>\n<p>法一：蜜汁算法，低级暴力。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveSortedArroyDuplicate(int *Arr,int len)&#123;//暴力穷举</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveSortedArroyDuplicate(int *Arr,int len)&#123;</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      int index=2;//步长</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+index; j &lt; len &amp;&amp; Arr[i]==Arr[j]; ++j)&#123;//因为是有序数组，故当出现不相等的元素，即停止此次循环</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            j--;//重新比较</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Follow up for ”Remove Duplicates”: What if duplicates are allowed at most twice? </p>\n<p>将一个有序数组去重，使重复元素最多出现两次。<br>","more":"<br>For example, Given sorted array A = [1,1,1,2,2,3],<br>Your function should return length = 5, and A is now [1,1,2,2,3] </p>\n<p>法一：蜜汁算法，低级暴力。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveSortedArroyDuplicate(int *Arr,int len)&#123;//暴力穷举</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+1; j &lt; len; ++j)&#123;</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">int RemoveSortedArroyDuplicate(int *Arr,int len)&#123;</div><div class=\"line\">    if(len&lt;=0)&#123;</div><div class=\"line\">      return 0;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">      int index=2;//步长</div><div class=\"line\">      for (int i = 0; i &lt; len; ++i)&#123;</div><div class=\"line\">        for (int j = i+index; j &lt; len &amp;&amp; Arr[i]==Arr[j]; ++j)&#123;//因为是有序数组，故当出现不相等的元素，即停止此次循环</div><div class=\"line\">          if(Arr[i]==Arr[j])&#123;</div><div class=\"line\">            for (int m = j; m &lt; len; ++m)&#123;//数组元素前移</div><div class=\"line\">              Arr[m]=Arr[m+1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            j--;//重新比较</div><div class=\"line\">            len--;//删除多余空间</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  return len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"重复有序数组的查找","date":"2016-12-31T04:06:26.000Z","_content":"Follow up for ”Search in Rotated Sorted Array”:What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is in the array.\n若被查找有序数组允许元素重复，会对时间复杂度造成什么影响，为什么？\n编写一个函数，完成在重复有序数组中查找目标元素。\n<!--more-->\n在{% post_link LeetCode-无重复元素数组的二分查找 %}中，时间复杂度可以优化到O(log(n))。但由于二分查找只适用于无重复元素的有序数组，所以这里没办法使用二分查找。其次的话就是直接O(n)扫描了。在这里对传统二分查找进行了优化，虽然最坏时间复杂度依然是O(n)，但在重复元素不太多的情况下也是可以优化到O(log(n))的。\n\n\n```\nint  DupBiTreeSearch(int *Arr,int len,int target){\n    int first = 0, last = len;\n\twhile (first != last) {\n\t\tconst int mid = first+(last - first) / 2;\n\t\tif (Arr[mid] == target){\n\t\t\treturn mid;\n\t\t} else {\n\t\t\tif (Arr[first] < Arr[mid]){\n\t\t\t\tif (Arr[first] <= target && target < Arr[mid]){\n\t\t\t\t\tlast = mid;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfirst = mid + 1;\n\t\t\t\t}\n\t\t\t}else if(Arr[first] > Arr[mid]){\n\t\t\t\tif (Arr[mid] <= target && target <= Arr[last-1]){\n\t\t\t\t\tfirst = mid + 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlast = mid;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tfirst++;\n\t\t\t}\n\t\t}\n}\n```\n\n\n\n","source":"_posts/LeetCode-重复有序数组的二分查找.md","raw":"---\ntitle: 重复有序数组的查找\ndate: 2016-12-31 12:06:26\ncategories: 算法\ntags: [LeetCode,查找,树,数组]\n\n---\nFollow up for ”Search in Rotated Sorted Array”:What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is in the array.\n若被查找有序数组允许元素重复，会对时间复杂度造成什么影响，为什么？\n编写一个函数，完成在重复有序数组中查找目标元素。\n<!--more-->\n在{% post_link LeetCode-无重复元素数组的二分查找 %}中，时间复杂度可以优化到O(log(n))。但由于二分查找只适用于无重复元素的有序数组，所以这里没办法使用二分查找。其次的话就是直接O(n)扫描了。在这里对传统二分查找进行了优化，虽然最坏时间复杂度依然是O(n)，但在重复元素不太多的情况下也是可以优化到O(log(n))的。\n\n\n```\nint  DupBiTreeSearch(int *Arr,int len,int target){\n    int first = 0, last = len;\n\twhile (first != last) {\n\t\tconst int mid = first+(last - first) / 2;\n\t\tif (Arr[mid] == target){\n\t\t\treturn mid;\n\t\t} else {\n\t\t\tif (Arr[first] < Arr[mid]){\n\t\t\t\tif (Arr[first] <= target && target < Arr[mid]){\n\t\t\t\t\tlast = mid;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfirst = mid + 1;\n\t\t\t\t}\n\t\t\t}else if(Arr[first] > Arr[mid]){\n\t\t\t\tif (Arr[mid] <= target && target <= Arr[last-1]){\n\t\t\t\t\tfirst = mid + 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlast = mid;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tfirst++;\n\t\t\t}\n\t\t}\n}\n```\n\n\n\n","slug":"LeetCode-重复有序数组的二分查找","published":1,"updated":"2017-06-02T16:12:47.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yn001wdoexhldjt5bz","content":"<p>Follow up for ”Search in Rotated Sorted Array”:What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is in the array.<br>若被查找有序数组允许元素重复，会对时间复杂度造成什么影响，为什么？<br>编写一个函数，完成在重复有序数组中查找目标元素。<br><a id=\"more\"></a><br>在<a href=\"/posts/arithmetic/2016-12-30-LeetCode-无重复元素数组的二分查找.html\" title=\"无重复元素数组的二分查找\">无重复元素数组的二分查找</a>中，时间复杂度可以优化到O(log(n))。但由于二分查找只适用于无重复元素的有序数组，所以这里没办法使用二分查找。其次的话就是直接O(n)扫描了。在这里对传统二分查找进行了优化，虽然最坏时间复杂度依然是O(n)，但在重复元素不太多的情况下也是可以优化到O(log(n))的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">int  DupBiTreeSearch(int *Arr,int len,int target)&#123;</div><div class=\"line\">    int first = 0, last = len;</div><div class=\"line\">\twhile (first != last) &#123;</div><div class=\"line\">\t\tconst int mid = first+(last - first) / 2;</div><div class=\"line\">\t\tif (Arr[mid] == target)&#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (Arr[first] &lt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\tif (Arr[first] &lt;= target &amp;&amp; target &lt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse&#123;</div><div class=\"line\">\t\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;else if(Arr[first] &gt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\tif (Arr[mid] &lt;= target &amp;&amp; target &lt;= Arr[last-1])&#123;</div><div class=\"line\">\t\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse&#123;</div><div class=\"line\">\t\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tfirst++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>Follow up for ”Search in Rotated Sorted Array”:What if duplicates are allowed? Would this affect the run-time complexity? How and why? Write a function to determine if a given target is in the array.<br>若被查找有序数组允许元素重复，会对时间复杂度造成什么影响，为什么？<br>编写一个函数，完成在重复有序数组中查找目标元素。<br>","more":"<br>在<a href=\"/posts/arithmetic/2016-12-30-LeetCode-无重复元素数组的二分查找.html\" title=\"无重复元素数组的二分查找\">无重复元素数组的二分查找</a>中，时间复杂度可以优化到O(log(n))。但由于二分查找只适用于无重复元素的有序数组，所以这里没办法使用二分查找。其次的话就是直接O(n)扫描了。在这里对传统二分查找进行了优化，虽然最坏时间复杂度依然是O(n)，但在重复元素不太多的情况下也是可以优化到O(log(n))的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">int  DupBiTreeSearch(int *Arr,int len,int target)&#123;</div><div class=\"line\">    int first = 0, last = len;</div><div class=\"line\">\twhile (first != last) &#123;</div><div class=\"line\">\t\tconst int mid = first+(last - first) / 2;</div><div class=\"line\">\t\tif (Arr[mid] == target)&#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (Arr[first] &lt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\tif (Arr[first] &lt;= target &amp;&amp; target &lt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse&#123;</div><div class=\"line\">\t\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;else if(Arr[first] &gt; Arr[mid])&#123;</div><div class=\"line\">\t\t\t\tif (Arr[mid] &lt;= target &amp;&amp; target &lt;= Arr[last-1])&#123;</div><div class=\"line\">\t\t\t\t\tfirst = mid + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\telse&#123;</div><div class=\"line\">\t\t\t\t\tlast = mid;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tfirst++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Window系统配置前端开发环境","date":"2016-12-29T05:54:10.000Z","_content":"前端开发环境配置。\n<!--more-->\n## 安装最新git\n\n## 安装最新nodejs\n\n## 检查node安装是否成功\n\t`node -v`\n\n## 检查npm安装是否成功\n\t`npm -v`\n\n## 安装cnpm  \n\t`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`","source":"_posts/Window系统配置前端开发环境.md","raw":"---\ntitle: Window系统配置前端开发环境\ndate: 2016-12-29 13:54:10\ncategories: 开发工具\ntags: Tools\n---\n前端开发环境配置。\n<!--more-->\n## 安装最新git\n\n## 安装最新nodejs\n\n## 检查node安装是否成功\n\t`node -v`\n\n## 检查npm安装是否成功\n\t`npm -v`\n\n## 安装cnpm  \n\t`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`","slug":"Window系统配置前端开发环境","published":1,"updated":"2017-06-02T16:12:19.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yp001zdoexntfy212u","content":"<p>前端开发环境配置。<br><a id=\"more\"></a></p>\n<h2 id=\"安装最新git\"><a href=\"#安装最新git\" class=\"headerlink\" title=\"安装最新git\"></a>安装最新git</h2><h2 id=\"安装最新nodejs\"><a href=\"#安装最新nodejs\" class=\"headerlink\" title=\"安装最新nodejs\"></a>安装最新nodejs</h2><h2 id=\"检查node安装是否成功\"><a href=\"#检查node安装是否成功\" class=\"headerlink\" title=\"检查node安装是否成功\"></a>检查node安装是否成功</h2><pre><code>`node -v`\n</code></pre><h2 id=\"检查npm安装是否成功\"><a href=\"#检查npm安装是否成功\" class=\"headerlink\" title=\"检查npm安装是否成功\"></a>检查npm安装是否成功</h2><pre><code>`npm -v`\n</code></pre><h2 id=\"安装cnpm\"><a href=\"#安装cnpm\" class=\"headerlink\" title=\"安装cnpm\"></a>安装cnpm</h2><pre><code>`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`\n</code></pre>","excerpt":"<p>前端开发环境配置。<br>","more":"</p>\n<h2 id=\"安装最新git\"><a href=\"#安装最新git\" class=\"headerlink\" title=\"安装最新git\"></a>安装最新git</h2><h2 id=\"安装最新nodejs\"><a href=\"#安装最新nodejs\" class=\"headerlink\" title=\"安装最新nodejs\"></a>安装最新nodejs</h2><h2 id=\"检查node安装是否成功\"><a href=\"#检查node安装是否成功\" class=\"headerlink\" title=\"检查node安装是否成功\"></a>检查node安装是否成功</h2><pre><code>`node -v`\n</code></pre><h2 id=\"检查npm安装是否成功\"><a href=\"#检查npm安装是否成功\" class=\"headerlink\" title=\"检查npm安装是否成功\"></a>检查npm安装是否成功</h2><pre><code>`npm -v`\n</code></pre><h2 id=\"安装cnpm\"><a href=\"#安装cnpm\" class=\"headerlink\" title=\"安装cnpm\"></a>安装cnpm</h2><pre><code>`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`\n</code></pre>"},{"title":"jQuery-File-Upload踩坑记录","date":"2017-04-19T11:39:05.000Z","_content":"\n<!--more-->\n[jQuery-File-Upload官网](https://github.com/blueimp/jQuery-File-Upload/wiki)\n\n### 官方实例\nHTML:\n```\n<input id=\"fileupload\" type=\"file\" name=\"files[]\" data-url=\"server/php/\" multiple>\n```\n依赖：\n```\n<script src=\"js/jquery.min.js\"></script>\n<script src=\"js/vendor/jquery.ui.widget.js\"></script>\n<script src=\"js/jquery.iframe-transport.js\"></script>\n<script src=\"js/jquery.fileupload.js\"></script>\n```\nJS调用：\n```\n$('#fileupload').fileupload({\n        dataType: 'json',\n        done: function (e, data) {\n            $.each(data.result.files, function (index, file) {\n                $('<p/>').text(file.name).appendTo(document.body);\n            });\n        }\n    });\n```\n显然以上调用在实际项目中实在太过鸡肋···来点刺激的\n\n### options常用配置\n\n```\n$this.fileupload({\n     url: url,//服务器API\n     autoUpload: false,//是否自动上传\n     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,//文件格式限制\n     maxNumberOfFiles: 1,//最大上传文件数目\n     maxFileSize: 5000000,//文件不超过5M\n     sequentialUploads: true,//是否队列上传\n     dataType: 'json'//期望从服务器得到json类型的返回数据\n})\n```\n\n### 事件Callback\n- 挂载方法 \n\t```\n\t  $this.fileupload({options})\n\t   .bind('fileuploadadd', function (e, data) {/* ... */})\n\t   .bind('fileuploadsubmit', function (e, data) {/* ... */})\n\t   .bind('fileuploaddone', function (e, data) {/* ... */})\n\t   .bind('fileuploadprogressall', function (e, data) {/* ... */})\n\t```\n- done没有回调函数的问题，有网友说是由于dataType设置为了json，把autoUpload设置为true这都是什么跟什么？！我是使用的手动触发上传，关键代码为`$handler.click(function(){data.submit(); })`看吧，是使用的submit触发的，而回调函数有fileuploadsubmit，那就对应起来啦。\n\n- 但是后台要返回数据时，又必须响应fileuploaddone才能拿到数据，后台返回结果存在data.result里···小姐姐我也很绝望啊···还需要继续踩坑啊啊啊~~~\n\n### 图片预览\n官网的图片预览使用了canvas，对于小型开放···感觉成本太高（其实是太懒）。 在图片添加完成后会出发事件fileuploadadd，他的回掉函数有两个参数（e,data），我们上传的file就在data里。\ndata.files是个数组，里面存放着file,预览图片，对这里的file们做处理就是啦。\n```\n function  LocalURL(file) {\n            var url = null;\n            if (window.createObjectURL != undefined) { \n                url = window.createObjectURL(file);\n            } else if (window.URL != undefined) {\n                url = window.URL.createObjectURL(file);\n            } else if (window.webkitURL != undefined) { \n                url = window.webkitURL.createObjectURL(file);\n            }\n            return url;//     eg:     blob:http://localhost/671c3409-0047-44ec-bcba-89d63a439231\n   }\n```\n\n### 取消上传\n他的上传其实也就是jQuery的ajax。取消上传的关键是要保留下上传的handler。 \n即：\n```\n$this.fileupload({options})\n.bind('fileuploadadd', function (e, data) {\n\n    $('#uploadBtn').click(function () {\n        jqXHR = data.submit();\n    })\n\n    $('#cancelBtn').click(function () {\n        jqXHR.abort();\n    })\n}) \n```\n这时候要考虑响应错误信息。 \n该插件无论是请求超时还是手动取消上传（jqXHR.abort()）都会响应fileuploadfail，但是可以通过data.errorThrown的值加以区分\n```\n$this.fileupload({options})\n.bind('fileuploadfail', function (e, data) {\n      if (data.errorThrown=='abort') {\n             NUI.showMsg('上传取消！', 'success',3);\n         }else{\n             NUI.showMsg('上传失败，请稍后重试！', 'error',3);\n         }\n})\n```\n\n### 设置请求头\n参考 [jquery-file-upload 在Header中增加header项](http://blog.csdn.net/zhouyingge1104/article/details/38316127)\n- 我尝试了在options对象里添加自定义属性accessToken，并在jquery.fileupload.js里对_initXHRData函数做了进一步加工\n\t```\n\t$this.fileupload({\n\t     url: url,\n\t     autoUpload: false,\n\t     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t     maxNumberOfFiles: 1,\n\t     maxFileSize: 5000000,\n\t     sequentialUploads: true,\n\t     accessToken:$.cookie('access_token'),\n\t  })\n\t _initXHRData: function (options) {\n\n\t    ···\n\t    if (options.contentRange) {\n\t       options.headers['Content-Range'] = options.contentRange;\n\n\t    //我添加的代码···\n\t    if (options.accessToken) {\n\t        options.headers['Access-Token'] = options.accessToken;\n\t    };\n\t    ···\n\n\t}\n\t```\n- 直接在options里添加属性headers，不过没有成功。我跟了很多遍源码，但依然没找到失败的原因，反而觉得这样不失为最完美的解决方法···如果哪位高人洞悉其中奥秘，还请不吝赐教。\n```\n\t$this.fileupload({\n\t     url: url,\n\t     autoUpload: false,\n\t     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t     maxNumberOfFiles: 1,\n\t     maxFileSize: 5000000,\n\t     sequentialUploads: true,\n\t     headers:{\n\t         'Access-Token':$.cookie('access_token')\n\t     }\n\t  })\n\t```\n- 参考[Jquery-File-Upload在IE9中不发送请求头](https://stackoverflow.com/questions/22165996/jquery-file-upload-not-sending-headers-in-ie9)，我从他的问题里看到了他的解决方法，并且我成功设置了请求头。（金星完美.jpg)。\n\t```\n\t$this.fileupload({\n\t        url: url,\n\t        autoUpload: false,\n\t        acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t        maxNumberOfFiles: 1,\n\t        maxFileSize: 5000000,\n\t        sequentialUploads: true,\n\t        beforeSend: function ( xhr ) {\n\t          xhr.setRequestHeader('Access-Token', $.cookie('access_token'));\n\t       },    \n\t    })\n\t```","source":"_posts/jQuery-File-Upload踩坑记录.md","raw":"---\ntitle: jQuery-File-Upload踩坑记录\ndate: 2017-04-19 19:39:05\ncategories: [JavaScript]\ntags: [JavaScript]\n---\n\n<!--more-->\n[jQuery-File-Upload官网](https://github.com/blueimp/jQuery-File-Upload/wiki)\n\n### 官方实例\nHTML:\n```\n<input id=\"fileupload\" type=\"file\" name=\"files[]\" data-url=\"server/php/\" multiple>\n```\n依赖：\n```\n<script src=\"js/jquery.min.js\"></script>\n<script src=\"js/vendor/jquery.ui.widget.js\"></script>\n<script src=\"js/jquery.iframe-transport.js\"></script>\n<script src=\"js/jquery.fileupload.js\"></script>\n```\nJS调用：\n```\n$('#fileupload').fileupload({\n        dataType: 'json',\n        done: function (e, data) {\n            $.each(data.result.files, function (index, file) {\n                $('<p/>').text(file.name).appendTo(document.body);\n            });\n        }\n    });\n```\n显然以上调用在实际项目中实在太过鸡肋···来点刺激的\n\n### options常用配置\n\n```\n$this.fileupload({\n     url: url,//服务器API\n     autoUpload: false,//是否自动上传\n     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,//文件格式限制\n     maxNumberOfFiles: 1,//最大上传文件数目\n     maxFileSize: 5000000,//文件不超过5M\n     sequentialUploads: true,//是否队列上传\n     dataType: 'json'//期望从服务器得到json类型的返回数据\n})\n```\n\n### 事件Callback\n- 挂载方法 \n\t```\n\t  $this.fileupload({options})\n\t   .bind('fileuploadadd', function (e, data) {/* ... */})\n\t   .bind('fileuploadsubmit', function (e, data) {/* ... */})\n\t   .bind('fileuploaddone', function (e, data) {/* ... */})\n\t   .bind('fileuploadprogressall', function (e, data) {/* ... */})\n\t```\n- done没有回调函数的问题，有网友说是由于dataType设置为了json，把autoUpload设置为true这都是什么跟什么？！我是使用的手动触发上传，关键代码为`$handler.click(function(){data.submit(); })`看吧，是使用的submit触发的，而回调函数有fileuploadsubmit，那就对应起来啦。\n\n- 但是后台要返回数据时，又必须响应fileuploaddone才能拿到数据，后台返回结果存在data.result里···小姐姐我也很绝望啊···还需要继续踩坑啊啊啊~~~\n\n### 图片预览\n官网的图片预览使用了canvas，对于小型开放···感觉成本太高（其实是太懒）。 在图片添加完成后会出发事件fileuploadadd，他的回掉函数有两个参数（e,data），我们上传的file就在data里。\ndata.files是个数组，里面存放着file,预览图片，对这里的file们做处理就是啦。\n```\n function  LocalURL(file) {\n            var url = null;\n            if (window.createObjectURL != undefined) { \n                url = window.createObjectURL(file);\n            } else if (window.URL != undefined) {\n                url = window.URL.createObjectURL(file);\n            } else if (window.webkitURL != undefined) { \n                url = window.webkitURL.createObjectURL(file);\n            }\n            return url;//     eg:     blob:http://localhost/671c3409-0047-44ec-bcba-89d63a439231\n   }\n```\n\n### 取消上传\n他的上传其实也就是jQuery的ajax。取消上传的关键是要保留下上传的handler。 \n即：\n```\n$this.fileupload({options})\n.bind('fileuploadadd', function (e, data) {\n\n    $('#uploadBtn').click(function () {\n        jqXHR = data.submit();\n    })\n\n    $('#cancelBtn').click(function () {\n        jqXHR.abort();\n    })\n}) \n```\n这时候要考虑响应错误信息。 \n该插件无论是请求超时还是手动取消上传（jqXHR.abort()）都会响应fileuploadfail，但是可以通过data.errorThrown的值加以区分\n```\n$this.fileupload({options})\n.bind('fileuploadfail', function (e, data) {\n      if (data.errorThrown=='abort') {\n             NUI.showMsg('上传取消！', 'success',3);\n         }else{\n             NUI.showMsg('上传失败，请稍后重试！', 'error',3);\n         }\n})\n```\n\n### 设置请求头\n参考 [jquery-file-upload 在Header中增加header项](http://blog.csdn.net/zhouyingge1104/article/details/38316127)\n- 我尝试了在options对象里添加自定义属性accessToken，并在jquery.fileupload.js里对_initXHRData函数做了进一步加工\n\t```\n\t$this.fileupload({\n\t     url: url,\n\t     autoUpload: false,\n\t     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t     maxNumberOfFiles: 1,\n\t     maxFileSize: 5000000,\n\t     sequentialUploads: true,\n\t     accessToken:$.cookie('access_token'),\n\t  })\n\t _initXHRData: function (options) {\n\n\t    ···\n\t    if (options.contentRange) {\n\t       options.headers['Content-Range'] = options.contentRange;\n\n\t    //我添加的代码···\n\t    if (options.accessToken) {\n\t        options.headers['Access-Token'] = options.accessToken;\n\t    };\n\t    ···\n\n\t}\n\t```\n- 直接在options里添加属性headers，不过没有成功。我跟了很多遍源码，但依然没找到失败的原因，反而觉得这样不失为最完美的解决方法···如果哪位高人洞悉其中奥秘，还请不吝赐教。\n```\n\t$this.fileupload({\n\t     url: url,\n\t     autoUpload: false,\n\t     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t     maxNumberOfFiles: 1,\n\t     maxFileSize: 5000000,\n\t     sequentialUploads: true,\n\t     headers:{\n\t         'Access-Token':$.cookie('access_token')\n\t     }\n\t  })\n\t```\n- 参考[Jquery-File-Upload在IE9中不发送请求头](https://stackoverflow.com/questions/22165996/jquery-file-upload-not-sending-headers-in-ie9)，我从他的问题里看到了他的解决方法，并且我成功设置了请求头。（金星完美.jpg)。\n\t```\n\t$this.fileupload({\n\t        url: url,\n\t        autoUpload: false,\n\t        acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,\n\t        maxNumberOfFiles: 1,\n\t        maxFileSize: 5000000,\n\t        sequentialUploads: true,\n\t        beforeSend: function ( xhr ) {\n\t          xhr.setRequestHeader('Access-Token', $.cookie('access_token'));\n\t       },    \n\t    })\n\t```","slug":"jQuery-File-Upload踩坑记录","published":1,"updated":"2017-06-04T11:53:16.711Z","_id":"cj3imx2yv0023doexi4jc2n08","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<p><a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki\" target=\"_blank\" rel=\"external\">jQuery-File-Upload官网</a></p>\n<h3 id=\"官方实例\"><a href=\"#官方实例\" class=\"headerlink\" title=\"官方实例\"></a>官方实例</h3><p>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input id=&quot;fileupload&quot; type=&quot;file&quot; name=&quot;files[]&quot; data-url=&quot;server/php/&quot; multiple&gt;</div></pre></td></tr></table></figure></p>\n<p>依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/vendor/jquery.ui.widget.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/jquery.iframe-transport.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/jquery.fileupload.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>JS调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;#fileupload&apos;).fileupload(&#123;</div><div class=\"line\">        dataType: &apos;json&apos;,</div><div class=\"line\">        done: function (e, data) &#123;</div><div class=\"line\">            $.each(data.result.files, function (index, file) &#123;</div><div class=\"line\">                $(&apos;&lt;p/&gt;&apos;).text(file.name).appendTo(document.body);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>显然以上调用在实际项目中实在太过鸡肋···来点刺激的</p>\n<h3 id=\"options常用配置\"><a href=\"#options常用配置\" class=\"headerlink\" title=\"options常用配置\"></a>options常用配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,//服务器API</div><div class=\"line\">     autoUpload: false,//是否自动上传</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,//文件格式限制</div><div class=\"line\">     maxNumberOfFiles: 1,//最大上传文件数目</div><div class=\"line\">     maxFileSize: 5000000,//文件不超过5M</div><div class=\"line\">     sequentialUploads: true,//是否队列上传</div><div class=\"line\">     dataType: &apos;json&apos;//期望从服务器得到json类型的返回数据</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"事件Callback\"><a href=\"#事件Callback\" class=\"headerlink\" title=\"事件Callback\"></a>事件Callback</h3><ul>\n<li><p>挂载方法 </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadadd&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadsubmit&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploaddone&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadprogressall&apos;, function (e, data) &#123;/* ... */&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>done没有回调函数的问题，有网友说是由于dataType设置为了json，把autoUpload设置为true这都是什么跟什么？！我是使用的手动触发上传，关键代码为<code>$handler.click(function(){data.submit(); })</code>看吧，是使用的submit触发的，而回调函数有fileuploadsubmit，那就对应起来啦。</p>\n</li>\n<li><p>但是后台要返回数据时，又必须响应fileuploaddone才能拿到数据，后台返回结果存在data.result里···小姐姐我也很绝望啊···还需要继续踩坑啊啊啊~~~</p>\n</li>\n</ul>\n<h3 id=\"图片预览\"><a href=\"#图片预览\" class=\"headerlink\" title=\"图片预览\"></a>图片预览</h3><p>官网的图片预览使用了canvas，对于小型开放···感觉成本太高（其实是太懒）。 在图片添加完成后会出发事件fileuploadadd，他的回掉函数有两个参数（e,data），我们上传的file就在data里。<br>data.files是个数组，里面存放着file,预览图片，对这里的file们做处理就是啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function  LocalURL(file) &#123;</div><div class=\"line\">           var url = null;</div><div class=\"line\">           if (window.createObjectURL != undefined) &#123; </div><div class=\"line\">               url = window.createObjectURL(file);</div><div class=\"line\">           &#125; else if (window.URL != undefined) &#123;</div><div class=\"line\">               url = window.URL.createObjectURL(file);</div><div class=\"line\">           &#125; else if (window.webkitURL != undefined) &#123; </div><div class=\"line\">               url = window.webkitURL.createObjectURL(file);</div><div class=\"line\">           &#125;</div><div class=\"line\">           return url;//     eg:     blob:http://localhost/671c3409-0047-44ec-bcba-89d63a439231</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"取消上传\"><a href=\"#取消上传\" class=\"headerlink\" title=\"取消上传\"></a>取消上传</h3><p>他的上传其实也就是jQuery的ajax。取消上传的关键是要保留下上传的handler。<br>即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\">.bind(&apos;fileuploadadd&apos;, function (e, data) &#123;</div><div class=\"line\"></div><div class=\"line\">    $(&apos;#uploadBtn&apos;).click(function () &#123;</div><div class=\"line\">        jqXHR = data.submit();</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    $(&apos;#cancelBtn&apos;).click(function () &#123;</div><div class=\"line\">        jqXHR.abort();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这时候要考虑响应错误信息。<br>该插件无论是请求超时还是手动取消上传（jqXHR.abort()）都会响应fileuploadfail，但是可以通过data.errorThrown的值加以区分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\">.bind(&apos;fileuploadfail&apos;, function (e, data) &#123;</div><div class=\"line\">      if (data.errorThrown==&apos;abort&apos;) &#123;</div><div class=\"line\">             NUI.showMsg(&apos;上传取消！&apos;, &apos;success&apos;,3);</div><div class=\"line\">         &#125;else&#123;</div><div class=\"line\">             NUI.showMsg(&apos;上传失败，请稍后重试！&apos;, &apos;error&apos;,3);</div><div class=\"line\">         &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头\"><a href=\"#设置请求头\" class=\"headerlink\" title=\"设置请求头\"></a>设置请求头</h3><p>参考 <a href=\"http://blog.csdn.net/zhouyingge1104/article/details/38316127\" target=\"_blank\" rel=\"external\">jquery-file-upload 在Header中增加header项</a></p>\n<ul>\n<li><p>我尝试了在options对象里添加自定义属性accessToken，并在jquery.fileupload.js里对_initXHRData函数做了进一步加工</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,</div><div class=\"line\">     autoUpload: false,</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">     maxNumberOfFiles: 1,</div><div class=\"line\">     maxFileSize: 5000000,</div><div class=\"line\">     sequentialUploads: true,</div><div class=\"line\">     accessToken:$.cookie(&apos;access_token&apos;),</div><div class=\"line\">  &#125;)</div><div class=\"line\"> _initXHRData: function (options) &#123;</div><div class=\"line\"></div><div class=\"line\">    ···</div><div class=\"line\">    if (options.contentRange) &#123;</div><div class=\"line\">       options.headers[&apos;Content-Range&apos;] = options.contentRange;</div><div class=\"line\"></div><div class=\"line\">    //我添加的代码···</div><div class=\"line\">    if (options.accessToken) &#123;</div><div class=\"line\">        options.headers[&apos;Access-Token&apos;] = options.accessToken;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ···</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接在options里添加属性headers，不过没有成功。我跟了很多遍源码，但依然没找到失败的原因，反而觉得这样不失为最完美的解决方法···如果哪位高人洞悉其中奥秘，还请不吝赐教。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,</div><div class=\"line\">     autoUpload: false,</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">     maxNumberOfFiles: 1,</div><div class=\"line\">     maxFileSize: 5000000,</div><div class=\"line\">     sequentialUploads: true,</div><div class=\"line\">     headers:&#123;</div><div class=\"line\">         &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">     &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>参考<a href=\"https://stackoverflow.com/questions/22165996/jquery-file-upload-not-sending-headers-in-ie9\" target=\"_blank\" rel=\"external\">Jquery-File-Upload在IE9中不发送请求头</a>，我从他的问题里看到了他的解决方法，并且我成功设置了请求头。（金星完美.jpg)。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">        url: url,</div><div class=\"line\">        autoUpload: false,</div><div class=\"line\">        acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">        maxNumberOfFiles: 1,</div><div class=\"line\">        maxFileSize: 5000000,</div><div class=\"line\">        sequentialUploads: true,</div><div class=\"line\">        beforeSend: function ( xhr ) &#123;</div><div class=\"line\">          xhr.setRequestHeader(&apos;Access-Token&apos;, $.cookie(&apos;access_token&apos;));</div><div class=\"line\">       &#125;,    </div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p><a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki\">jQuery-File-Upload官网</a></p>\n<h3 id=\"官方实例\"><a href=\"#官方实例\" class=\"headerlink\" title=\"官方实例\"></a>官方实例</h3><p>HTML:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input id=&quot;fileupload&quot; type=&quot;file&quot; name=&quot;files[]&quot; data-url=&quot;server/php/&quot; multiple&gt;</div></pre></td></tr></table></figure></p>\n<p>依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/vendor/jquery.ui.widget.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/jquery.iframe-transport.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=&quot;js/jquery.fileupload.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>JS调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&apos;#fileupload&apos;).fileupload(&#123;</div><div class=\"line\">        dataType: &apos;json&apos;,</div><div class=\"line\">        done: function (e, data) &#123;</div><div class=\"line\">            $.each(data.result.files, function (index, file) &#123;</div><div class=\"line\">                $(&apos;&lt;p/&gt;&apos;).text(file.name).appendTo(document.body);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>显然以上调用在实际项目中实在太过鸡肋···来点刺激的</p>\n<h3 id=\"options常用配置\"><a href=\"#options常用配置\" class=\"headerlink\" title=\"options常用配置\"></a>options常用配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,//服务器API</div><div class=\"line\">     autoUpload: false,//是否自动上传</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,//文件格式限制</div><div class=\"line\">     maxNumberOfFiles: 1,//最大上传文件数目</div><div class=\"line\">     maxFileSize: 5000000,//文件不超过5M</div><div class=\"line\">     sequentialUploads: true,//是否队列上传</div><div class=\"line\">     dataType: &apos;json&apos;//期望从服务器得到json类型的返回数据</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"事件Callback\"><a href=\"#事件Callback\" class=\"headerlink\" title=\"事件Callback\"></a>事件Callback</h3><ul>\n<li><p>挂载方法 </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadadd&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadsubmit&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploaddone&apos;, function (e, data) &#123;/* ... */&#125;)</div><div class=\"line\"> .bind(&apos;fileuploadprogressall&apos;, function (e, data) &#123;/* ... */&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>done没有回调函数的问题，有网友说是由于dataType设置为了json，把autoUpload设置为true这都是什么跟什么？！我是使用的手动触发上传，关键代码为<code>$handler.click(function(){data.submit(); })</code>看吧，是使用的submit触发的，而回调函数有fileuploadsubmit，那就对应起来啦。</p>\n</li>\n<li><p>但是后台要返回数据时，又必须响应fileuploaddone才能拿到数据，后台返回结果存在data.result里···小姐姐我也很绝望啊···还需要继续踩坑啊啊啊~~~</p>\n</li>\n</ul>\n<h3 id=\"图片预览\"><a href=\"#图片预览\" class=\"headerlink\" title=\"图片预览\"></a>图片预览</h3><p>官网的图片预览使用了canvas，对于小型开放···感觉成本太高（其实是太懒）。 在图片添加完成后会出发事件fileuploadadd，他的回掉函数有两个参数（e,data），我们上传的file就在data里。<br>data.files是个数组，里面存放着file,预览图片，对这里的file们做处理就是啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function  LocalURL(file) &#123;</div><div class=\"line\">           var url = null;</div><div class=\"line\">           if (window.createObjectURL != undefined) &#123; </div><div class=\"line\">               url = window.createObjectURL(file);</div><div class=\"line\">           &#125; else if (window.URL != undefined) &#123;</div><div class=\"line\">               url = window.URL.createObjectURL(file);</div><div class=\"line\">           &#125; else if (window.webkitURL != undefined) &#123; </div><div class=\"line\">               url = window.webkitURL.createObjectURL(file);</div><div class=\"line\">           &#125;</div><div class=\"line\">           return url;//     eg:     blob:http://localhost/671c3409-0047-44ec-bcba-89d63a439231</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"取消上传\"><a href=\"#取消上传\" class=\"headerlink\" title=\"取消上传\"></a>取消上传</h3><p>他的上传其实也就是jQuery的ajax。取消上传的关键是要保留下上传的handler。<br>即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\">.bind(&apos;fileuploadadd&apos;, function (e, data) &#123;</div><div class=\"line\"></div><div class=\"line\">    $(&apos;#uploadBtn&apos;).click(function () &#123;</div><div class=\"line\">        jqXHR = data.submit();</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    $(&apos;#cancelBtn&apos;).click(function () &#123;</div><div class=\"line\">        jqXHR.abort();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这时候要考虑响应错误信息。<br>该插件无论是请求超时还是手动取消上传（jqXHR.abort()）都会响应fileuploadfail，但是可以通过data.errorThrown的值加以区分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;options&#125;)</div><div class=\"line\">.bind(&apos;fileuploadfail&apos;, function (e, data) &#123;</div><div class=\"line\">      if (data.errorThrown==&apos;abort&apos;) &#123;</div><div class=\"line\">             NUI.showMsg(&apos;上传取消！&apos;, &apos;success&apos;,3);</div><div class=\"line\">         &#125;else&#123;</div><div class=\"line\">             NUI.showMsg(&apos;上传失败，请稍后重试！&apos;, &apos;error&apos;,3);</div><div class=\"line\">         &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头\"><a href=\"#设置请求头\" class=\"headerlink\" title=\"设置请求头\"></a>设置请求头</h3><p>参考 <a href=\"http://blog.csdn.net/zhouyingge1104/article/details/38316127\">jquery-file-upload 在Header中增加header项</a></p>\n<ul>\n<li><p>我尝试了在options对象里添加自定义属性accessToken，并在jquery.fileupload.js里对_initXHRData函数做了进一步加工</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,</div><div class=\"line\">     autoUpload: false,</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">     maxNumberOfFiles: 1,</div><div class=\"line\">     maxFileSize: 5000000,</div><div class=\"line\">     sequentialUploads: true,</div><div class=\"line\">     accessToken:$.cookie(&apos;access_token&apos;),</div><div class=\"line\">  &#125;)</div><div class=\"line\"> _initXHRData: function (options) &#123;</div><div class=\"line\"></div><div class=\"line\">    ···</div><div class=\"line\">    if (options.contentRange) &#123;</div><div class=\"line\">       options.headers[&apos;Content-Range&apos;] = options.contentRange;</div><div class=\"line\"></div><div class=\"line\">    //我添加的代码···</div><div class=\"line\">    if (options.accessToken) &#123;</div><div class=\"line\">        options.headers[&apos;Access-Token&apos;] = options.accessToken;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ···</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接在options里添加属性headers，不过没有成功。我跟了很多遍源码，但依然没找到失败的原因，反而觉得这样不失为最完美的解决方法···如果哪位高人洞悉其中奥秘，还请不吝赐教。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">     url: url,</div><div class=\"line\">     autoUpload: false,</div><div class=\"line\">     acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">     maxNumberOfFiles: 1,</div><div class=\"line\">     maxFileSize: 5000000,</div><div class=\"line\">     sequentialUploads: true,</div><div class=\"line\">     headers:&#123;</div><div class=\"line\">         &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">     &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>参考<a href=\"https://stackoverflow.com/questions/22165996/jquery-file-upload-not-sending-headers-in-ie9\">Jquery-File-Upload在IE9中不发送请求头</a>，我从他的问题里看到了他的解决方法，并且我成功设置了请求头。（金星完美.jpg)。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this.fileupload(&#123;</div><div class=\"line\">        url: url,</div><div class=\"line\">        autoUpload: false,</div><div class=\"line\">        acceptFileTypes: /(.|\\/)(jpe?g|png)$/i,</div><div class=\"line\">        maxNumberOfFiles: 1,</div><div class=\"line\">        maxFileSize: 5000000,</div><div class=\"line\">        sequentialUploads: true,</div><div class=\"line\">        beforeSend: function ( xhr ) &#123;</div><div class=\"line\">          xhr.setRequestHeader(&apos;Access-Token&apos;, $.cookie(&apos;access_token&apos;));</div><div class=\"line\">       &#125;,    </div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"$.extend与$.fn.extend","date":"2017-02-16T15:00:06.000Z","_content":"\n\n精华： \n- $.extend 添加静态方法\n- $.fn.extend 在原型链上拓展方法\n<!--more-->\n\n## $.extend ##\n没错，这就是jQuery自带的拓展方法\n`$.extend({funcName:function(){}})`==`$.funcName=function(){}`\n直接将名为funcName的方法添加到jQuery命名空间，而不是jQuery原型链上。\n在调用时，我们也需要**通过$或jQuery来调用**，而不是直接调用（隶属于window命名空间的方法才能直接调用）。\n来看看例子：\n\n**HTML**\n\n```\n<div class=\"testButton\">点我</div>\n```\n\n**jQuery**\n\n```\n\t(function ($) {\n\t\t$.tooltip = function( options ) {\n\t\t\tconsole.log('I`m tooltip');\n\t\t};\n\t\t$('.testButton').click(function(){\n\t\t\t$.tooltip()\n\t\t});\n\n\t})(jQuery)\n```\n\n\n在我们写插件的时候可以利用extend来更新参数。\nwhat?更新参数？\n对呀，我们可以为插件设置默认参数，通过插件调用的传入的参数就不再需要写冗长的一堆，只需要写自己特别的参数就行了。\n在参数内部\n`this._config = $.extend(defaults, _pubConfig);`\n这个操作就可以将defaults, _pubConfig合并，并去重，再赋值给this._config。\n\n\n\n## $.fn.extend ##\n我们知道fn===prototype\n![这里写图片描述](http://img.blog.csdn.net/20160529203937689)\n所以我们通过$.fn.extend去拓展方法的话是会将方法添加到原型链上的。\n\n```\n\t(function ($) {\n\n\t\t$.fn.tooltip = function( options ) {\n\t\t\tconsole.log('I`m tooltip');\n\t\t};\n\t\t$('.testButton').click(function(){\n\t\t\t$(this).tooltip()\n\t\t});\n\n\t})(jQuery)\n\n```\n点击按钮\n![这里写图片描述](http://img.blog.csdn.net/20160529203521243)\n怎么说呢，在创建一个jQuery实例时，这个实例就会拥有所有原型链上的方法。所以我们可以直接在$(this)上调用。\n","source":"_posts/jQuery自带的拓展方法.md","raw":"---\ntitle: $.extend与$.fn.extend\ndate: 2017-02-16 23:00:06\ncategories: JavaScript\ntags: JavaScript\n---\n\n\n精华： \n- $.extend 添加静态方法\n- $.fn.extend 在原型链上拓展方法\n<!--more-->\n\n## $.extend ##\n没错，这就是jQuery自带的拓展方法\n`$.extend({funcName:function(){}})`==`$.funcName=function(){}`\n直接将名为funcName的方法添加到jQuery命名空间，而不是jQuery原型链上。\n在调用时，我们也需要**通过$或jQuery来调用**，而不是直接调用（隶属于window命名空间的方法才能直接调用）。\n来看看例子：\n\n**HTML**\n\n```\n<div class=\"testButton\">点我</div>\n```\n\n**jQuery**\n\n```\n\t(function ($) {\n\t\t$.tooltip = function( options ) {\n\t\t\tconsole.log('I`m tooltip');\n\t\t};\n\t\t$('.testButton').click(function(){\n\t\t\t$.tooltip()\n\t\t});\n\n\t})(jQuery)\n```\n\n\n在我们写插件的时候可以利用extend来更新参数。\nwhat?更新参数？\n对呀，我们可以为插件设置默认参数，通过插件调用的传入的参数就不再需要写冗长的一堆，只需要写自己特别的参数就行了。\n在参数内部\n`this._config = $.extend(defaults, _pubConfig);`\n这个操作就可以将defaults, _pubConfig合并，并去重，再赋值给this._config。\n\n\n\n## $.fn.extend ##\n我们知道fn===prototype\n![这里写图片描述](http://img.blog.csdn.net/20160529203937689)\n所以我们通过$.fn.extend去拓展方法的话是会将方法添加到原型链上的。\n\n```\n\t(function ($) {\n\n\t\t$.fn.tooltip = function( options ) {\n\t\t\tconsole.log('I`m tooltip');\n\t\t};\n\t\t$('.testButton').click(function(){\n\t\t\t$(this).tooltip()\n\t\t});\n\n\t})(jQuery)\n\n```\n点击按钮\n![这里写图片描述](http://img.blog.csdn.net/20160529203521243)\n怎么说呢，在创建一个jQuery实例时，这个实例就会拥有所有原型链上的方法。所以我们可以直接在$(this)上调用。\n","slug":"jQuery自带的拓展方法","published":1,"updated":"2017-06-02T16:13:16.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2yy0026doex0t2f7uor","content":"<p>精华： </p>\n<ul>\n<li>$.extend 添加静态方法</li>\n<li>$.fn.extend 在原型链上拓展方法<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h2><p>没错，这就是jQuery自带的拓展方法<br><code>$.extend({funcName:function(){}})</code>==<code>$.funcName=function(){}</code><br>直接将名为funcName的方法添加到jQuery命名空间，而不是jQuery原型链上。<br>在调用时，我们也需要<strong>通过$或jQuery来调用</strong>，而不是直接调用（隶属于window命名空间的方法才能直接调用）。<br>来看看例子：</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;testButton&quot;&gt;点我&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>jQuery</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ($) &#123;</div><div class=\"line\">\t$.tooltip = function( options ) &#123;</div><div class=\"line\">\t\tconsole.log(&apos;I`m tooltip&apos;);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(&apos;.testButton&apos;).click(function()&#123;</div><div class=\"line\">\t\t$.tooltip()</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery)</div></pre></td></tr></table></figure>\n<p>在我们写插件的时候可以利用extend来更新参数。<br>what?更新参数？<br>对呀，我们可以为插件设置默认参数，通过插件调用的传入的参数就不再需要写冗长的一堆，只需要写自己特别的参数就行了。<br>在参数内部<br><code>this._config = $.extend(defaults, _pubConfig);</code><br>这个操作就可以将defaults, _pubConfig合并，并去重，再赋值给this._config。</p>\n<h2 id=\"fn-extend\"><a href=\"#fn-extend\" class=\"headerlink\" title=\"$.fn.extend\"></a>$.fn.extend</h2><p>我们知道fn===prototype<br><img src=\"http://img.blog.csdn.net/20160529203937689\" alt=\"这里写图片描述\"><br>所以我们通过$.fn.extend去拓展方法的话是会将方法添加到原型链上的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ($) &#123;</div><div class=\"line\"></div><div class=\"line\">\t$.fn.tooltip = function( options ) &#123;</div><div class=\"line\">\t\tconsole.log(&apos;I`m tooltip&apos;);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(&apos;.testButton&apos;).click(function()&#123;</div><div class=\"line\">\t\t$(this).tooltip()</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery)</div></pre></td></tr></table></figure>\n<p>点击按钮<br><img src=\"http://img.blog.csdn.net/20160529203521243\" alt=\"这里写图片描述\"><br>怎么说呢，在创建一个jQuery实例时，这个实例就会拥有所有原型链上的方法。所以我们可以直接在$(this)上调用。</p>\n","excerpt":"<p>精华： </p>\n<ul>\n<li>$.extend 添加静态方法</li>\n<li>$.fn.extend 在原型链上拓展方法","more":"</li>\n</ul>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h2><p>没错，这就是jQuery自带的拓展方法<br><code>$.extend({funcName:function(){}})</code>==<code>$.funcName=function(){}</code><br>直接将名为funcName的方法添加到jQuery命名空间，而不是jQuery原型链上。<br>在调用时，我们也需要<strong>通过$或jQuery来调用</strong>，而不是直接调用（隶属于window命名空间的方法才能直接调用）。<br>来看看例子：</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;testButton&quot;&gt;点我&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>jQuery</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ($) &#123;</div><div class=\"line\">\t$.tooltip = function( options ) &#123;</div><div class=\"line\">\t\tconsole.log(&apos;I`m tooltip&apos;);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(&apos;.testButton&apos;).click(function()&#123;</div><div class=\"line\">\t\t$.tooltip()</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery)</div></pre></td></tr></table></figure>\n<p>在我们写插件的时候可以利用extend来更新参数。<br>what?更新参数？<br>对呀，我们可以为插件设置默认参数，通过插件调用的传入的参数就不再需要写冗长的一堆，只需要写自己特别的参数就行了。<br>在参数内部<br><code>this._config = $.extend(defaults, _pubConfig);</code><br>这个操作就可以将defaults, _pubConfig合并，并去重，再赋值给this._config。</p>\n<h2 id=\"fn-extend\"><a href=\"#fn-extend\" class=\"headerlink\" title=\"$.fn.extend\"></a>$.fn.extend</h2><p>我们知道fn===prototype<br><img src=\"http://img.blog.csdn.net/20160529203937689\" alt=\"这里写图片描述\"><br>所以我们通过$.fn.extend去拓展方法的话是会将方法添加到原型链上的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ($) &#123;</div><div class=\"line\"></div><div class=\"line\">\t$.fn.tooltip = function( options ) &#123;</div><div class=\"line\">\t\tconsole.log(&apos;I`m tooltip&apos;);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(&apos;.testButton&apos;).click(function()&#123;</div><div class=\"line\">\t\t$(this).tooltip()</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery)</div></pre></td></tr></table></figure>\n<p>点击按钮<br><img src=\"http://img.blog.csdn.net/20160529203521243\" alt=\"这里写图片描述\"><br>怎么说呢，在创建一个jQuery实例时，这个实例就会拥有所有原型链上的方法。所以我们可以直接在$(this)上调用。</p>"},{"title":"jQuery设置请求头","date":"2017-04-20T11:31:52.000Z","_content":"在项目中采用token来验证用户登录，运作机制大致如下:\n1、用户首次登录成功时，server-end发送token到client，client存入cookie。\n2、用户做任何请求操作时，在ajax的headers里带上token，用以server-end做登录状态验证。\n这时问题就来了···\n<!--more-->\n请求：\n```\n $.ajax({\n          type: type,\n          timeout: 10000, // 超时时间 10 秒\n          headers: {\n              'Access-Token':$.cookie('access_token')\n          },\n          url: url,\n          data: data,\n          success: function(data) {\n          },\n          error: function(err) {\n          },\n          complete: function(XMLHttpRequest, status) { //请求完成后最终执行参数　\n          }\n      })\n```\n报错：\n```\nRequest header field Access-Token is not allowed by Access-Control-Allow-Headers in preflight response.\n```\n其中Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。\n[参考MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n查阅了很多参考资料以及各位前辈踩坑记录，得到如下总结：\n- 报错意思是请求头中的Access-Token字段在Access-Control-Allow-Headers中没有被设置为允许.\n\n- 谁来设置？\n\t- 一种是font-end自己设置，在ajax在中设置beforeSend\n\t```\n\t$.ajax({\n         type: type,\n         timeout: 10000, \n         beforeSend: function(xhr) {\n              xhr.setRequestHeader(\"Access-Toke\");\n         },\n         headers: {\n             'Access-Token':$.cookie('access_token')\n         },\n         url: url,\n         data: data,\n         success: function(data) {\n         },\n         error: function(err) {\n         },\n         complete: function(XMLHttpRequest, status) { //请求完成后最终执行参数　\n         }\n\t});\n\t```\n\t- 第二种是server-end设置header参考[stackoverflow——>Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers](https://stackoverflow.com/questions/25727306/request-header-field-access-control-allow-headers-is-not-allowed-by-access-contr)\n\t```\n\tpublic class SimpleCORSFilter implements Filter {\n\n\t    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n\t        HttpServletResponse response = (HttpServletResponse) res;\n\t        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t        response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET\");\n\t        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n\t        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Access-Control-Allow-Headers, Authorization, Access-Toke\");\n\t        chain.doFilter(req, res);\n\t    }\n\n\t    public void init(FilterConfig filterConfig) {}\n\n\t    public void destroy() {}\n\n    }\n\t```","source":"_posts/jQuery设置请求头.md","raw":"---\ntitle: jQuery设置请求头\ndate: 2017-4-20 19:31:52\ncategories: \ntags: \n---\n在项目中采用token来验证用户登录，运作机制大致如下:\n1、用户首次登录成功时，server-end发送token到client，client存入cookie。\n2、用户做任何请求操作时，在ajax的headers里带上token，用以server-end做登录状态验证。\n这时问题就来了···\n<!--more-->\n请求：\n```\n $.ajax({\n          type: type,\n          timeout: 10000, // 超时时间 10 秒\n          headers: {\n              'Access-Token':$.cookie('access_token')\n          },\n          url: url,\n          data: data,\n          success: function(data) {\n          },\n          error: function(err) {\n          },\n          complete: function(XMLHttpRequest, status) { //请求完成后最终执行参数　\n          }\n      })\n```\n报错：\n```\nRequest header field Access-Token is not allowed by Access-Control-Allow-Headers in preflight response.\n```\n其中Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。\n[参考MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n查阅了很多参考资料以及各位前辈踩坑记录，得到如下总结：\n- 报错意思是请求头中的Access-Token字段在Access-Control-Allow-Headers中没有被设置为允许.\n\n- 谁来设置？\n\t- 一种是font-end自己设置，在ajax在中设置beforeSend\n\t```\n\t$.ajax({\n         type: type,\n         timeout: 10000, \n         beforeSend: function(xhr) {\n              xhr.setRequestHeader(\"Access-Toke\");\n         },\n         headers: {\n             'Access-Token':$.cookie('access_token')\n         },\n         url: url,\n         data: data,\n         success: function(data) {\n         },\n         error: function(err) {\n         },\n         complete: function(XMLHttpRequest, status) { //请求完成后最终执行参数　\n         }\n\t});\n\t```\n\t- 第二种是server-end设置header参考[stackoverflow——>Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers](https://stackoverflow.com/questions/25727306/request-header-field-access-control-allow-headers-is-not-allowed-by-access-contr)\n\t```\n\tpublic class SimpleCORSFilter implements Filter {\n\n\t    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n\t        HttpServletResponse response = (HttpServletResponse) res;\n\t        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t        response.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET\");\n\t        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n\t        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Access-Control-Allow-Headers, Authorization, Access-Toke\");\n\t        chain.doFilter(req, res);\n\t    }\n\n\t    public void init(FilterConfig filterConfig) {}\n\n\t    public void destroy() {}\n\n    }\n\t```","slug":"jQuery设置请求头","published":1,"updated":"2017-06-04T11:38:22.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2z0002adoexcg27qwyr","content":"<p>在项目中采用token来验证用户登录，运作机制大致如下:<br>1、用户首次登录成功时，server-end发送token到client，client存入cookie。<br>2、用户做任何请求操作时，在ajax的headers里带上token，用以server-end做登录状态验证。<br>这时问题就来了···<br><a id=\"more\"></a><br>请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">         type: type,</div><div class=\"line\">         timeout: 10000, // 超时时间 10 秒</div><div class=\"line\">         headers: &#123;</div><div class=\"line\">             &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">         &#125;,</div><div class=\"line\">         url: url,</div><div class=\"line\">         data: data,</div><div class=\"line\">         success: function(data) &#123;</div><div class=\"line\">         &#125;,</div><div class=\"line\">         error: function(err) &#123;</div><div class=\"line\">         &#125;,</div><div class=\"line\">         complete: function(XMLHttpRequest, status) &#123; //请求完成后最终执行参数　</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div></pre></td></tr></table></figure></p>\n<p>报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request header field Access-Token is not allowed by Access-Control-Allow-Headers in preflight response.</div></pre></td></tr></table></figure></p>\n<p>其中Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"external\">参考MDN</a><br>查阅了很多参考资料以及各位前辈踩坑记录，得到如下总结：</p>\n<ul>\n<li><p>报错意思是请求头中的Access-Token字段在Access-Control-Allow-Headers中没有被设置为允许.</p>\n</li>\n<li><p>谁来设置？</p>\n<ul>\n<li><p>一种是font-end自己设置，在ajax在中设置beforeSend</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: type,</div><div class=\"line\">        timeout: 10000, </div><div class=\"line\">        beforeSend: function(xhr) &#123;</div><div class=\"line\">             xhr.setRequestHeader(&quot;Access-Toke&quot;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        url: url,</div><div class=\"line\">        data: data,</div><div class=\"line\">        success: function(data) &#123;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: function(err) &#123;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        complete: function(XMLHttpRequest, status) &#123; //请求完成后最终执行参数　</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种是server-end设置header参考<a href=\"https://stackoverflow.com/questions/25727306/request-header-field-access-control-allow-headers-is-not-allowed-by-access-contr\" target=\"_blank\" rel=\"external\">stackoverflow——&gt;Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SimpleCORSFilter implements Filter &#123;</div><div class=\"line\"></div><div class=\"line\">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</div><div class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, Access-Control-Allow-Headers, Authorization, Access-Toke&quot;);</div><div class=\"line\">        chain.doFilter(req, res);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void init(FilterConfig filterConfig) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public void destroy() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","excerpt":"<p>在项目中采用token来验证用户登录，运作机制大致如下:<br>1、用户首次登录成功时，server-end发送token到client，client存入cookie。<br>2、用户做任何请求操作时，在ajax的headers里带上token，用以server-end做登录状态验证。<br>这时问题就来了···<br>","more":"<br>请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">         type: type,</div><div class=\"line\">         timeout: 10000, // 超时时间 10 秒</div><div class=\"line\">         headers: &#123;</div><div class=\"line\">             &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">         &#125;,</div><div class=\"line\">         url: url,</div><div class=\"line\">         data: data,</div><div class=\"line\">         success: function(data) &#123;</div><div class=\"line\">         &#125;,</div><div class=\"line\">         error: function(err) &#123;</div><div class=\"line\">         &#125;,</div><div class=\"line\">         complete: function(XMLHttpRequest, status) &#123; //请求完成后最终执行参数　</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div></pre></td></tr></table></figure></p>\n<p>报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request header field Access-Token is not allowed by Access-Control-Allow-Headers in preflight response.</div></pre></td></tr></table></figure></p>\n<p>其中Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">参考MDN</a><br>查阅了很多参考资料以及各位前辈踩坑记录，得到如下总结：</p>\n<ul>\n<li><p>报错意思是请求头中的Access-Token字段在Access-Control-Allow-Headers中没有被设置为允许.</p>\n</li>\n<li><p>谁来设置？</p>\n<ul>\n<li><p>一种是font-end自己设置，在ajax在中设置beforeSend</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: type,</div><div class=\"line\">        timeout: 10000, </div><div class=\"line\">        beforeSend: function(xhr) &#123;</div><div class=\"line\">             xhr.setRequestHeader(&quot;Access-Toke&quot;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            &apos;Access-Token&apos;:$.cookie(&apos;access_token&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        url: url,</div><div class=\"line\">        data: data,</div><div class=\"line\">        success: function(data) &#123;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: function(err) &#123;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        complete: function(XMLHttpRequest, status) &#123; //请求完成后最终执行参数　</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种是server-end设置header参考<a href=\"https://stackoverflow.com/questions/25727306/request-header-field-access-control-allow-headers-is-not-allowed-by-access-contr\">stackoverflow——&gt;Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SimpleCORSFilter implements Filter &#123;</div><div class=\"line\"></div><div class=\"line\">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</div><div class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</div><div class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, Access-Control-Allow-Headers, Authorization, Access-Toke&quot;);</div><div class=\"line\">        chain.doFilter(req, res);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void init(FilterConfig filterConfig) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public void destroy() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>"},{"title":"使用git进行pull时进行手动重置远程仓库URL","date":"2017-01-15T02:25:57.000Z","_content":"\n在做开发时换了台电脑，将工程git clone到本地后进行开发。开发结束后想要push到远程。\n这时需要先pull进行fix conflict.\n此时，使用git pull命令时候遇到“No remote repository specified……”的错误···\n<!--more-->\n问题症状：\n```\ngit pull\nfatal: No remote repository specified.  Please, specify either a URL or a remote name from which new revisions should be fetched.\n\n```\n\n\n解决方法：\n\n重新配置.git文件夹（属于隐藏文件夹）里面的“config”文件的url：\n\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n\thideDotFiles = dotGitOnly\n[remote \"origin\"]\n\turl = SSP/repositoryName.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n[branch \"development\"]\n\tremote = origin\n\tmerge = refs/heads/development\n\n```\n\n重新配置目标项目的地址：\n\nurl = HTTP或SSP\n\npushurl = HTTP或SSP","source":"_posts/使用git进行pull时进行手动重置远程仓库url.md","raw":"---\ntitle: 使用git进行pull时进行手动重置远程仓库URL\ndate: 2017-01-15 10:25:57\ncategories: Tools\ntags: [git,Tools]\n---\n\n在做开发时换了台电脑，将工程git clone到本地后进行开发。开发结束后想要push到远程。\n这时需要先pull进行fix conflict.\n此时，使用git pull命令时候遇到“No remote repository specified……”的错误···\n<!--more-->\n问题症状：\n```\ngit pull\nfatal: No remote repository specified.  Please, specify either a URL or a remote name from which new revisions should be fetched.\n\n```\n\n\n解决方法：\n\n重新配置.git文件夹（属于隐藏文件夹）里面的“config”文件的url：\n\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n\thideDotFiles = dotGitOnly\n[remote \"origin\"]\n\turl = SSP/repositoryName.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n[branch \"development\"]\n\tremote = origin\n\tmerge = refs/heads/development\n\n```\n\n重新配置目标项目的地址：\n\nurl = HTTP或SSP\n\npushurl = HTTP或SSP","slug":"使用git进行pull时进行手动重置远程仓库url","published":1,"updated":"2017-06-02T16:13:59.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2z3002ddoexedv2m6ue","content":"<p>在做开发时换了台电脑，将工程git clone到本地后进行开发。开发结束后想要push到远程。<br>这时需要先pull进行fix conflict.<br>此时，使用git pull命令时候遇到“No remote repository specified……”的错误···<br><a id=\"more\"></a><br>问题症状：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div><div class=\"line\">fatal: No remote repository specified.  Please, specify either a URL or a remote name from which new revisions should be fetched.</div></pre></td></tr></table></figure></p>\n<p>解决方法：</p>\n<p>重新配置.git文件夹（属于隐藏文件夹）里面的“config”文件的url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[core]</div><div class=\"line\">\trepositoryformatversion = 0</div><div class=\"line\">\tfilemode = false</div><div class=\"line\">\tbare = false</div><div class=\"line\">\tlogallrefupdates = true</div><div class=\"line\">\tsymlinks = false</div><div class=\"line\">\tignorecase = true</div><div class=\"line\">\thideDotFiles = dotGitOnly</div><div class=\"line\">[remote &quot;origin&quot;]</div><div class=\"line\">\turl = SSP/repositoryName.git</div><div class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</div><div class=\"line\">[branch &quot;master&quot;]</div><div class=\"line\">\tremote = origin</div><div class=\"line\">\tmerge = refs/heads/master</div><div class=\"line\">[branch &quot;development&quot;]</div><div class=\"line\">\tremote = origin</div><div class=\"line\">\tmerge = refs/heads/development</div></pre></td></tr></table></figure>\n<p>重新配置目标项目的地址：</p>\n<p>url = HTTP或SSP</p>\n<p>pushurl = HTTP或SSP</p>\n","excerpt":"<p>在做开发时换了台电脑，将工程git clone到本地后进行开发。开发结束后想要push到远程。<br>这时需要先pull进行fix conflict.<br>此时，使用git pull命令时候遇到“No remote repository specified……”的错误···<br>","more":"<br>问题症状：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div><div class=\"line\">fatal: No remote repository specified.  Please, specify either a URL or a remote name from which new revisions should be fetched.</div></pre></td></tr></table></figure></p>\n<p>解决方法：</p>\n<p>重新配置.git文件夹（属于隐藏文件夹）里面的“config”文件的url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[core]</div><div class=\"line\">\trepositoryformatversion = 0</div><div class=\"line\">\tfilemode = false</div><div class=\"line\">\tbare = false</div><div class=\"line\">\tlogallrefupdates = true</div><div class=\"line\">\tsymlinks = false</div><div class=\"line\">\tignorecase = true</div><div class=\"line\">\thideDotFiles = dotGitOnly</div><div class=\"line\">[remote &quot;origin&quot;]</div><div class=\"line\">\turl = SSP/repositoryName.git</div><div class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</div><div class=\"line\">[branch &quot;master&quot;]</div><div class=\"line\">\tremote = origin</div><div class=\"line\">\tmerge = refs/heads/master</div><div class=\"line\">[branch &quot;development&quot;]</div><div class=\"line\">\tremote = origin</div><div class=\"line\">\tmerge = refs/heads/development</div></pre></td></tr></table></figure>\n<p>重新配置目标项目的地址：</p>\n<p>url = HTTP或SSP</p>\n<p>pushurl = HTTP或SSP</p>"},{"title":"使用网易云跟帖设置评论区","date":"2017-06-04T10:14:39.000Z","_content":"\n3月？刚好准备把博客加强一番，添加个评论功能，就得到多说宣布6月停用的消息···\n有点伤心···毕竟前辈们踩过的坑···没用了，得自己摸索···<!--more-->\n颜控的我选择了网易的云跟帖···（程序媛，就酱~）\n现在就开始配置吧···\n### 注册网易云跟帖\n\n[网易的云跟帖官网](https://gentie.163.com/index.html)\n\n### 申请云跟贴productKey和脚本\n\n进入云跟贴管理后台申请productKey和脚本\n![](/images/使用网易云跟帖设置评论区1.png)\n我这里使用的是web版的，拿到红色框中的productKey,在```thems/next/_config.xml```中设置```gentie_productKey```\n![](/images/使用网易云跟帖设置评论区2.png)\n\n### 添加云跟帖模块\n\n在目录```thems/next/layout/_scripts/third_party/comments```文件夹下添加云跟贴的模块文件gentie.swig文件\n\n![](/images/使用网易云跟帖设置评论区3.png)\n\n\n### 引用云跟贴模块\n\n修改```thems/next/layout/_scripts/third_party/comments.swig```文件，引用云跟贴模块\n![](/images/使用网易云跟帖设置评论区4.png)\n\n### 添加云跟贴的容器\n\n修改themes/next/layout/_partials/comments.swig文件,在endif之前添加云跟贴的div\n![](/images/使用网易云跟帖设置评论区5.png)\n\n注意，这里if判断语句里的```is_post()```一定要加，不然每个页面都有评论框，简直尴尬···是的，我在这种尴尬中尬奔了快两个月，还好我的博客流量小，没人笑话我，哇咔咔~\n\n### 上传服务器，在线看效果\n\n···对了网址要和站点信息里的地址保持一致哟~\n![](/images/使用网易云跟帖设置评论区6.png)\n效果图···额额\n![](/images/使用网易云跟帖设置评论区7.png)\n\n### 其他\n\n很尴尬···hexo帖代码竟然不能贴他自己的源码···\n不要怪我咯~","source":"_posts/使用网易云跟帖设置评论区.md","raw":"---\ntitle: 使用网易云跟帖设置评论区\ndate: 2017-06-04 18:14:39\ncategories: Tools\ntags: Tools\n---\n\n3月？刚好准备把博客加强一番，添加个评论功能，就得到多说宣布6月停用的消息···\n有点伤心···毕竟前辈们踩过的坑···没用了，得自己摸索···<!--more-->\n颜控的我选择了网易的云跟帖···（程序媛，就酱~）\n现在就开始配置吧···\n### 注册网易云跟帖\n\n[网易的云跟帖官网](https://gentie.163.com/index.html)\n\n### 申请云跟贴productKey和脚本\n\n进入云跟贴管理后台申请productKey和脚本\n![](/images/使用网易云跟帖设置评论区1.png)\n我这里使用的是web版的，拿到红色框中的productKey,在```thems/next/_config.xml```中设置```gentie_productKey```\n![](/images/使用网易云跟帖设置评论区2.png)\n\n### 添加云跟帖模块\n\n在目录```thems/next/layout/_scripts/third_party/comments```文件夹下添加云跟贴的模块文件gentie.swig文件\n\n![](/images/使用网易云跟帖设置评论区3.png)\n\n\n### 引用云跟贴模块\n\n修改```thems/next/layout/_scripts/third_party/comments.swig```文件，引用云跟贴模块\n![](/images/使用网易云跟帖设置评论区4.png)\n\n### 添加云跟贴的容器\n\n修改themes/next/layout/_partials/comments.swig文件,在endif之前添加云跟贴的div\n![](/images/使用网易云跟帖设置评论区5.png)\n\n注意，这里if判断语句里的```is_post()```一定要加，不然每个页面都有评论框，简直尴尬···是的，我在这种尴尬中尬奔了快两个月，还好我的博客流量小，没人笑话我，哇咔咔~\n\n### 上传服务器，在线看效果\n\n···对了网址要和站点信息里的地址保持一致哟~\n![](/images/使用网易云跟帖设置评论区6.png)\n效果图···额额\n![](/images/使用网易云跟帖设置评论区7.png)\n\n### 其他\n\n很尴尬···hexo帖代码竟然不能贴他自己的源码···\n不要怪我咯~","slug":"使用网易云跟帖设置评论区","published":1,"updated":"2017-06-04T11:24:07.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2z6002hdoexcs8l5thz","content":"<p>3月？刚好准备把博客加强一番，添加个评论功能，就得到多说宣布6月停用的消息···<br>有点伤心···毕竟前辈们踩过的坑···没用了，得自己摸索···<a id=\"more\"></a><br>颜控的我选择了网易的云跟帖···（程序媛，就酱~）<br>现在就开始配置吧···</p>\n<h3 id=\"注册网易云跟帖\"><a href=\"#注册网易云跟帖\" class=\"headerlink\" title=\"注册网易云跟帖\"></a>注册网易云跟帖</h3><p><a href=\"https://gentie.163.com/index.html\" target=\"_blank\" rel=\"external\">网易的云跟帖官网</a></p>\n<h3 id=\"申请云跟贴productKey和脚本\"><a href=\"#申请云跟贴productKey和脚本\" class=\"headerlink\" title=\"申请云跟贴productKey和脚本\"></a>申请云跟贴productKey和脚本</h3><p>进入云跟贴管理后台申请productKey和脚本<br><img src=\"/images/使用网易云跟帖设置评论区1.png\" alt=\"\"><br>我这里使用的是web版的，拿到红色框中的productKey,在<code>thems/next/_config.xml</code>中设置<code>gentie_productKey</code><br><img src=\"/images/使用网易云跟帖设置评论区2.png\" alt=\"\"></p>\n<h3 id=\"添加云跟帖模块\"><a href=\"#添加云跟帖模块\" class=\"headerlink\" title=\"添加云跟帖模块\"></a>添加云跟帖模块</h3><p>在目录<code>thems/next/layout/_scripts/third_party/comments</code>文件夹下添加云跟贴的模块文件gentie.swig文件</p>\n<p><img src=\"/images/使用网易云跟帖设置评论区3.png\" alt=\"\"></p>\n<h3 id=\"引用云跟贴模块\"><a href=\"#引用云跟贴模块\" class=\"headerlink\" title=\"引用云跟贴模块\"></a>引用云跟贴模块</h3><p>修改<code>thems/next/layout/_scripts/third_party/comments.swig</code>文件，引用云跟贴模块<br><img src=\"/images/使用网易云跟帖设置评论区4.png\" alt=\"\"></p>\n<h3 id=\"添加云跟贴的容器\"><a href=\"#添加云跟贴的容器\" class=\"headerlink\" title=\"添加云跟贴的容器\"></a>添加云跟贴的容器</h3><p>修改themes/next/layout/_partials/comments.swig文件,在endif之前添加云跟贴的div<br><img src=\"/images/使用网易云跟帖设置评论区5.png\" alt=\"\"></p>\n<p>注意，这里if判断语句里的<code>is_post()</code>一定要加，不然每个页面都有评论框，简直尴尬···是的，我在这种尴尬中尬奔了快两个月，还好我的博客流量小，没人笑话我，哇咔咔~</p>\n<h3 id=\"上传服务器，在线看效果\"><a href=\"#上传服务器，在线看效果\" class=\"headerlink\" title=\"上传服务器，在线看效果\"></a>上传服务器，在线看效果</h3><p>···对了网址要和站点信息里的地址保持一致哟~<br><img src=\"/images/使用网易云跟帖设置评论区6.png\" alt=\"\"><br>效果图···额额<br><img src=\"/images/使用网易云跟帖设置评论区7.png\" alt=\"\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>很尴尬···hexo帖代码竟然不能贴他自己的源码···<br>不要怪我咯~</p>\n","excerpt":"<p>3月？刚好准备把博客加强一番，添加个评论功能，就得到多说宣布6月停用的消息···<br>有点伤心···毕竟前辈们踩过的坑···没用了，得自己摸索···","more":"<br>颜控的我选择了网易的云跟帖···（程序媛，就酱~）<br>现在就开始配置吧···</p>\n<h3 id=\"注册网易云跟帖\"><a href=\"#注册网易云跟帖\" class=\"headerlink\" title=\"注册网易云跟帖\"></a>注册网易云跟帖</h3><p><a href=\"https://gentie.163.com/index.html\">网易的云跟帖官网</a></p>\n<h3 id=\"申请云跟贴productKey和脚本\"><a href=\"#申请云跟贴productKey和脚本\" class=\"headerlink\" title=\"申请云跟贴productKey和脚本\"></a>申请云跟贴productKey和脚本</h3><p>进入云跟贴管理后台申请productKey和脚本<br><img src=\"/images/使用网易云跟帖设置评论区1.png\" alt=\"\"><br>我这里使用的是web版的，拿到红色框中的productKey,在<code>thems/next/_config.xml</code>中设置<code>gentie_productKey</code><br><img src=\"/images/使用网易云跟帖设置评论区2.png\" alt=\"\"></p>\n<h3 id=\"添加云跟帖模块\"><a href=\"#添加云跟帖模块\" class=\"headerlink\" title=\"添加云跟帖模块\"></a>添加云跟帖模块</h3><p>在目录<code>thems/next/layout/_scripts/third_party/comments</code>文件夹下添加云跟贴的模块文件gentie.swig文件</p>\n<p><img src=\"/images/使用网易云跟帖设置评论区3.png\" alt=\"\"></p>\n<h3 id=\"引用云跟贴模块\"><a href=\"#引用云跟贴模块\" class=\"headerlink\" title=\"引用云跟贴模块\"></a>引用云跟贴模块</h3><p>修改<code>thems/next/layout/_scripts/third_party/comments.swig</code>文件，引用云跟贴模块<br><img src=\"/images/使用网易云跟帖设置评论区4.png\" alt=\"\"></p>\n<h3 id=\"添加云跟贴的容器\"><a href=\"#添加云跟贴的容器\" class=\"headerlink\" title=\"添加云跟贴的容器\"></a>添加云跟贴的容器</h3><p>修改themes/next/layout/_partials/comments.swig文件,在endif之前添加云跟贴的div<br><img src=\"/images/使用网易云跟帖设置评论区5.png\" alt=\"\"></p>\n<p>注意，这里if判断语句里的<code>is_post()</code>一定要加，不然每个页面都有评论框，简直尴尬···是的，我在这种尴尬中尬奔了快两个月，还好我的博客流量小，没人笑话我，哇咔咔~</p>\n<h3 id=\"上传服务器，在线看效果\"><a href=\"#上传服务器，在线看效果\" class=\"headerlink\" title=\"上传服务器，在线看效果\"></a>上传服务器，在线看效果</h3><p>···对了网址要和站点信息里的地址保持一致哟~<br><img src=\"/images/使用网易云跟帖设置评论区6.png\" alt=\"\"><br>效果图···额额<br><img src=\"/images/使用网易云跟帖设置评论区7.png\" alt=\"\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>很尴尬···hexo帖代码竟然不能贴他自己的源码···<br>不要怪我咯~</p>"},{"title":"值得反复学习的Javascrip核心","date":"2017-01-02T07:08:20.000Z","_content":"\nJavaScript是一门神奇的语言，犀牛书是一本神奇的书。初学JavaScript之时，翻阅过许多人的学习经验贴，大都推荐这本书，可谓是前端人手必备，要说是前端JavaScript大词典应该还是不为过的。学习是循循渐进的，随着掌握某一领域知识总量的增多，会发现这个领域的知识层层渗透、相互交错，因此每一次的再读犀牛书都会有更加深刻的理解，甚至曾经如何也不明白的知识点竟然也豁然开朗甚至颇有醍醐灌顶之感。所以会有很多人会一次又一次的翻阅这部典籍，一次又一次提炼精髓，让自己对JavaScript的领悟更加深刻。那种对知识融会贯通、由此及彼的感觉实在令人着迷。\n<!--more-->\n前前后后大概是第五次读犀牛书了，毫不夸张的，每一次都是有迹可循的。只不过并不是通读，是有选择性的跳读。这一次希望最大限度扫描全书，记下曾经让我困惑不已的问题，以达到反复学习的目的。\n\n#### null和undefined\nnull表示的是一个特殊的值，含义为“非对象”，属于程序级，可预知的、正常的值空缺。\nundefined则是变量的一种取值，含义为未定义，属于系统级，出乎意料的值空缺。\n对于undefined，我有一个特别的理解，即Javascript是没有显式声明变量类型的\n\n```\nvar a;\n```\n\n这句代码确实是声明了一个变量，可是并没有指明a是整型还一个变量。\n所以我认为这里可以认为a没有指明类型即为未定义。\n\n```\ntypeof null  //\"object\";这其实是一个历史遗留问题，不必疑惑。\ntypeof undefined  //\"undefined\";\n```\n\n他们的数字值的转换也有所不同\nnull => 0\nundefined => NaN\n\n\n#### 暂时性死区\n毫不负责任的说，这个名字其实就是装比来的，什么暂时性死区，不过一个函数作用域问题和声明提前问题的合载。\n```\nvar a = \"global\";\n(function(){\n\tconsole.log(a);//undefined\n\tvar a = \"local\";\n\tconsole.log(a);//local\n})()\n\n```\n- 首先从作用域角度来理解：\n调用一个函数，系统就会为他创建一个作用域链表，内部优先级高于父函数，以此类推直到全局函数。在局部访问一个变量时，系统首先在内部scope查询该变量，若没有找到，系统将查询上一级父函数scope,以此类推直到全局函数scope.而当内部声明了一个与外部变量同名的一个变量，由于函数作用域优先级的特性，系统将不会再查找作用域链。这就导致了在这个函数里，只可能访问到“local”。\n- 再次从函数声明提前的角度来进一步剖析：\nJavaScript具有声明提前的特性，即将函数内部所有定义的局部变量的声明都提到函数最前面，导致了变量的声明和初始化分离。\n\n代码对比：\n```\n(function(){\n\tconsole.log(a);//undefined\n\tvar a = \"local\";\n\tconsole.log(a);//local\n})()\n等价于\n(function(){\n\tvar a;\n\tconsole.log(a);//undefined\n\ta = \"local\";\n\tconsole.log(a);//local\n})()\n```\n在声明和初始化这段代码之间，如果访问这个变量，都将返回undefined···这段代码就是相对于这个变量的暂时性死区，嗯，确实和死了差不多···\n\n#### 浮点数精度问题，涉及比较大小\n由于Javascript是基于IEEE754标准定义的浮点格式，即是以1/2,1/4,1/8划分的精度，与我们常用的0.1,0.01,0.001有所不同。\n\n```\nvar a=3.2-2.2;\nvar b=2.2-1.2;\nconsole.log(a==b);//false\n```\n这时候我们可以采用判断他们的差值是否小于一个足够小的数来判断他们是否相等。\n\n#### new操作究竟发生了什么？\n- 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n- 属性和方法被加入到 this 引用的对象中。\n- 新创建的对象由 this 所引用，最后隐式的返回 this 。\n\n```\nfunction Person(){\n\tthis.name=\"Liz\";\n\tthis.sayName=function(){\n\t\tconsole.log(this.name);\t\n\t}\n}\nPerson.prototype.age=22;\nPerson.prototype.sayAge=function(){\n\tconsole.log(this.age);\n};\nvar P=new Person();\n```\n![Person](/images/Person.png)\n\n#### 深度拷贝问题\n首先明确以下几点\n- 基本数据类型，如“number，string，boolean”可直接赋值。\n- 引用类型（对象），这里需要特别处理Array。\n- 是否是原对象的自有原型方法\n\n```\nfunction extendDeep(sup,sub){\n    var i,\n    toStr=Object.prototype.toString;\n    aStr=\"[object Array]\";\n    sub=sub||{};\n    for(i in sup){\n        if (sup.hasOwnProperty(i)) {\n            if (typeof sup[i]==='object') {//如果是对象需进一步区别是数组还是Object\n                sub[i]=toStr.call(sup[i])===aStr?[]:{};\n                extendDeep(sup[i],sub[i]);\n            }else{//不是对象则直接复制\n                sub[i]=sup[i];\n            }\n        }\n    }\n    return sub;\n}\n```\n\n#### 序列化对象\n\n引用原文：\n\n```\no={x:1,y:{z:[false,null,\"\"]}};//定义一个测试对象\ns=JSON.stringify(o);//s是'{\"x\":1,\"y\":{\"z\":[false,null,\"\"]}}'\np=JSON.parse(s);//p是o的深拷贝\n```\n同样一道高频考点，解析url所带参数，以JSON格式返回。\n```\nfunction getData(url){\n        var result ={};\n        var temp = url.split('?')[1].split('&');\n        for(i in temp){\n            var s = temp[i].split('=');\n            result[s[0]] = s[1];\n        }\n        return result;\n    }\n```\n\n#### 函数调用，this剑指何方\n\n首先明白什么是函数，什么是方法。\n一般情况下，独立实现某种功能的一段代码，当这段代码以一般函数形式调用时我们称之为函数，当这段代码依赖于某个对象，在某个对象上调用时，我们称之为方法。\n如：\n```\nfunc();//函数\nO.func();//O的一个名为func的方法\n```\n\n嵌套函数的this不是指向全局对象（非严格模式）就是undefined（严格模式），嵌套的函数不会从调用它的函数中继承this。\n如果嵌套函数作为方法调用，其this的值指向调用它的对象。\n顺便多一句嘴，如果函数没有指明return的值，将会默认返回undefined。\nJQuery里经常返回this实现链式调用。\n\n#### 理解闭包\n首先要知道**函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。**\n闭包即为**函数定义时的作用域链到函数执行时依然有效**这种特性。\n这或许是个难点，也困扰了我很久。但至少现在对于我已经不再困难。\n我们常说的闭包其实是**当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时**这种微妙情况的闭包。\n引用原书代码：\n```\nvar scope=\"global scope\";\nfunction checkscope(){\n    var scope=\"local scope\";\n    function func(){return scope;}\n    return func();\n}\ncheckscope()//=＞\"local scope\"\n```\n当函数func被调用，系统立即为func创建一个作用域链表，这个作用域链表首先的指向位置是由他定义的时候决定的，故此时作用域链表中优先级最高的就是checkscope。当checkscope执行，func被暴露在全局环境中，但他的作用域并不会发生改变，所以查找scope的值依然先从作用域链表中优先级最高的checkscope开始查询。\n进一步的通过底层的原理来理解，为什么checkscope调用结束，func还能访问到checkscope的变量？\n我们知道C语言程序的内存使用分布如图所示：\n![](/images/内存分布.png)\nC语言编写程序在使用内存时一般分为三的段\n- 正文段（常量、code）\n- 数据堆段（动态分配的存储区，比如JS中new操作）\n- 数据栈段（临时变量，即局部变量）\n\n每一次函数调用，都会为该函数创建一个栈，供这次运行使用，一般就是放局部变量。当函数返回，这个栈就会被销毁。然而这里又不得不提到垃圾回收机制，一般系统就是采用引用标记法进行垃圾回收处理，原则就是该变量被引用值为0。在闭包中就打破了这个回收原则。checkscope执行，返回了func，而func内部使用了scope变量，这就使checkscope对应的数据栈不满足回收原则，不能正常被回收，所以func依然可以访问scope的值，且为“local scope”。\n\n再看一个常见的例子\n我们期望：返回一个函数组成的数组，它们的返回值是0～9\n```\nfunction constfuncs(){\n    var funcs=[];\n    for(var i=0;i<10;i++){\n        funcs[i]=function(){return i;};\n    }\n    return funcs;\n}\nvar funcs=constfuncs();\nfuncs[5]()//     10？！\n```\n但是结果居然全是10。其实由上面所描述的思路来考虑，这个结果很容易被理解。constfuncs被调用，内部有个for循环定义了10个funcs[i],这些funcs[i]的作用域是指向constfuncs的，他们内部的引用的i是同一个constfuncs的局部变量i。因此，当for循环结束，i已经变成了10。fincs[i]被调用时，在其作用域链优先级最高的constfuncs的scope里查找到i并输出，毫无争议应该全是10.\n\n我们可以采用立即执行的方式达到理想效果(在funcs[i]内部声明一个变量x保存当前的i，使函数funcs[i]以i为参数立即执行，返回x。)\n```\nfunction constfuncs(){\n    var funcs=[];\n    for(var i=0;i<10;i++){\n        funcs[i]=(function(){\n            var x=i;\n            return x;\n        })(i);\n    }\n    return funcs;\n}\nvar funcs=constfuncs();\nfuncs[5];\n```\n\n#### call()、apply()、bind()应该怎么玩\n三言两语聊一聊\ncall、apply几乎一致，都是调用其他对象原型方法的方法，唯一不同的是第二个参数，call的第（2+）个参数是此原型方法调用所需的实参，而apply直接传入一个实参数组。\n```\nf.call(o,1,2);\n//等价于\no.m=f;//将f存储为o的临时方法\no.m(1,2);//调用它,传入参数\ndelete o.m;//将临时方法删除\n```\ncall和apply经常应用于继承原型方法。\nbind的参数设置与call是一致的，只不过bind返回的是一个函数。所以调用bind后还需要再调用下返回的函数。手动实现一个bind，加深理解。\n```\n//返回一个函数，通过调用它来调用o中的方法f()，传递它所有的实参\nfunction bind(f,o){\n    if(f.bind){\n        return f.bind(o);//如果bind()方法存在的话，使用bind()方法\n    }else{ \n        return function(){//否则，这样绑定\n            return f.apply(o,arguments);\n        };\n    }\n}\n```\n总结一下，这三个方法都是希望将方法母体绑定到第一个参数上，即使第一个参数拥有母体的功能。","source":"_posts/值得反复学习的Javascrip核心.md","raw":"---\ntitle: 值得反复学习的Javascrip核心\ndate: 2017-01-02 15:08:20\ncategories: JavaScript\ntags: JavaScript\n---\n\nJavaScript是一门神奇的语言，犀牛书是一本神奇的书。初学JavaScript之时，翻阅过许多人的学习经验贴，大都推荐这本书，可谓是前端人手必备，要说是前端JavaScript大词典应该还是不为过的。学习是循循渐进的，随着掌握某一领域知识总量的增多，会发现这个领域的知识层层渗透、相互交错，因此每一次的再读犀牛书都会有更加深刻的理解，甚至曾经如何也不明白的知识点竟然也豁然开朗甚至颇有醍醐灌顶之感。所以会有很多人会一次又一次的翻阅这部典籍，一次又一次提炼精髓，让自己对JavaScript的领悟更加深刻。那种对知识融会贯通、由此及彼的感觉实在令人着迷。\n<!--more-->\n前前后后大概是第五次读犀牛书了，毫不夸张的，每一次都是有迹可循的。只不过并不是通读，是有选择性的跳读。这一次希望最大限度扫描全书，记下曾经让我困惑不已的问题，以达到反复学习的目的。\n\n#### null和undefined\nnull表示的是一个特殊的值，含义为“非对象”，属于程序级，可预知的、正常的值空缺。\nundefined则是变量的一种取值，含义为未定义，属于系统级，出乎意料的值空缺。\n对于undefined，我有一个特别的理解，即Javascript是没有显式声明变量类型的\n\n```\nvar a;\n```\n\n这句代码确实是声明了一个变量，可是并没有指明a是整型还一个变量。\n所以我认为这里可以认为a没有指明类型即为未定义。\n\n```\ntypeof null  //\"object\";这其实是一个历史遗留问题，不必疑惑。\ntypeof undefined  //\"undefined\";\n```\n\n他们的数字值的转换也有所不同\nnull => 0\nundefined => NaN\n\n\n#### 暂时性死区\n毫不负责任的说，这个名字其实就是装比来的，什么暂时性死区，不过一个函数作用域问题和声明提前问题的合载。\n```\nvar a = \"global\";\n(function(){\n\tconsole.log(a);//undefined\n\tvar a = \"local\";\n\tconsole.log(a);//local\n})()\n\n```\n- 首先从作用域角度来理解：\n调用一个函数，系统就会为他创建一个作用域链表，内部优先级高于父函数，以此类推直到全局函数。在局部访问一个变量时，系统首先在内部scope查询该变量，若没有找到，系统将查询上一级父函数scope,以此类推直到全局函数scope.而当内部声明了一个与外部变量同名的一个变量，由于函数作用域优先级的特性，系统将不会再查找作用域链。这就导致了在这个函数里，只可能访问到“local”。\n- 再次从函数声明提前的角度来进一步剖析：\nJavaScript具有声明提前的特性，即将函数内部所有定义的局部变量的声明都提到函数最前面，导致了变量的声明和初始化分离。\n\n代码对比：\n```\n(function(){\n\tconsole.log(a);//undefined\n\tvar a = \"local\";\n\tconsole.log(a);//local\n})()\n等价于\n(function(){\n\tvar a;\n\tconsole.log(a);//undefined\n\ta = \"local\";\n\tconsole.log(a);//local\n})()\n```\n在声明和初始化这段代码之间，如果访问这个变量，都将返回undefined···这段代码就是相对于这个变量的暂时性死区，嗯，确实和死了差不多···\n\n#### 浮点数精度问题，涉及比较大小\n由于Javascript是基于IEEE754标准定义的浮点格式，即是以1/2,1/4,1/8划分的精度，与我们常用的0.1,0.01,0.001有所不同。\n\n```\nvar a=3.2-2.2;\nvar b=2.2-1.2;\nconsole.log(a==b);//false\n```\n这时候我们可以采用判断他们的差值是否小于一个足够小的数来判断他们是否相等。\n\n#### new操作究竟发生了什么？\n- 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n- 属性和方法被加入到 this 引用的对象中。\n- 新创建的对象由 this 所引用，最后隐式的返回 this 。\n\n```\nfunction Person(){\n\tthis.name=\"Liz\";\n\tthis.sayName=function(){\n\t\tconsole.log(this.name);\t\n\t}\n}\nPerson.prototype.age=22;\nPerson.prototype.sayAge=function(){\n\tconsole.log(this.age);\n};\nvar P=new Person();\n```\n![Person](/images/Person.png)\n\n#### 深度拷贝问题\n首先明确以下几点\n- 基本数据类型，如“number，string，boolean”可直接赋值。\n- 引用类型（对象），这里需要特别处理Array。\n- 是否是原对象的自有原型方法\n\n```\nfunction extendDeep(sup,sub){\n    var i,\n    toStr=Object.prototype.toString;\n    aStr=\"[object Array]\";\n    sub=sub||{};\n    for(i in sup){\n        if (sup.hasOwnProperty(i)) {\n            if (typeof sup[i]==='object') {//如果是对象需进一步区别是数组还是Object\n                sub[i]=toStr.call(sup[i])===aStr?[]:{};\n                extendDeep(sup[i],sub[i]);\n            }else{//不是对象则直接复制\n                sub[i]=sup[i];\n            }\n        }\n    }\n    return sub;\n}\n```\n\n#### 序列化对象\n\n引用原文：\n\n```\no={x:1,y:{z:[false,null,\"\"]}};//定义一个测试对象\ns=JSON.stringify(o);//s是'{\"x\":1,\"y\":{\"z\":[false,null,\"\"]}}'\np=JSON.parse(s);//p是o的深拷贝\n```\n同样一道高频考点，解析url所带参数，以JSON格式返回。\n```\nfunction getData(url){\n        var result ={};\n        var temp = url.split('?')[1].split('&');\n        for(i in temp){\n            var s = temp[i].split('=');\n            result[s[0]] = s[1];\n        }\n        return result;\n    }\n```\n\n#### 函数调用，this剑指何方\n\n首先明白什么是函数，什么是方法。\n一般情况下，独立实现某种功能的一段代码，当这段代码以一般函数形式调用时我们称之为函数，当这段代码依赖于某个对象，在某个对象上调用时，我们称之为方法。\n如：\n```\nfunc();//函数\nO.func();//O的一个名为func的方法\n```\n\n嵌套函数的this不是指向全局对象（非严格模式）就是undefined（严格模式），嵌套的函数不会从调用它的函数中继承this。\n如果嵌套函数作为方法调用，其this的值指向调用它的对象。\n顺便多一句嘴，如果函数没有指明return的值，将会默认返回undefined。\nJQuery里经常返回this实现链式调用。\n\n#### 理解闭包\n首先要知道**函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。**\n闭包即为**函数定义时的作用域链到函数执行时依然有效**这种特性。\n这或许是个难点，也困扰了我很久。但至少现在对于我已经不再困难。\n我们常说的闭包其实是**当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时**这种微妙情况的闭包。\n引用原书代码：\n```\nvar scope=\"global scope\";\nfunction checkscope(){\n    var scope=\"local scope\";\n    function func(){return scope;}\n    return func();\n}\ncheckscope()//=＞\"local scope\"\n```\n当函数func被调用，系统立即为func创建一个作用域链表，这个作用域链表首先的指向位置是由他定义的时候决定的，故此时作用域链表中优先级最高的就是checkscope。当checkscope执行，func被暴露在全局环境中，但他的作用域并不会发生改变，所以查找scope的值依然先从作用域链表中优先级最高的checkscope开始查询。\n进一步的通过底层的原理来理解，为什么checkscope调用结束，func还能访问到checkscope的变量？\n我们知道C语言程序的内存使用分布如图所示：\n![](/images/内存分布.png)\nC语言编写程序在使用内存时一般分为三的段\n- 正文段（常量、code）\n- 数据堆段（动态分配的存储区，比如JS中new操作）\n- 数据栈段（临时变量，即局部变量）\n\n每一次函数调用，都会为该函数创建一个栈，供这次运行使用，一般就是放局部变量。当函数返回，这个栈就会被销毁。然而这里又不得不提到垃圾回收机制，一般系统就是采用引用标记法进行垃圾回收处理，原则就是该变量被引用值为0。在闭包中就打破了这个回收原则。checkscope执行，返回了func，而func内部使用了scope变量，这就使checkscope对应的数据栈不满足回收原则，不能正常被回收，所以func依然可以访问scope的值，且为“local scope”。\n\n再看一个常见的例子\n我们期望：返回一个函数组成的数组，它们的返回值是0～9\n```\nfunction constfuncs(){\n    var funcs=[];\n    for(var i=0;i<10;i++){\n        funcs[i]=function(){return i;};\n    }\n    return funcs;\n}\nvar funcs=constfuncs();\nfuncs[5]()//     10？！\n```\n但是结果居然全是10。其实由上面所描述的思路来考虑，这个结果很容易被理解。constfuncs被调用，内部有个for循环定义了10个funcs[i],这些funcs[i]的作用域是指向constfuncs的，他们内部的引用的i是同一个constfuncs的局部变量i。因此，当for循环结束，i已经变成了10。fincs[i]被调用时，在其作用域链优先级最高的constfuncs的scope里查找到i并输出，毫无争议应该全是10.\n\n我们可以采用立即执行的方式达到理想效果(在funcs[i]内部声明一个变量x保存当前的i，使函数funcs[i]以i为参数立即执行，返回x。)\n```\nfunction constfuncs(){\n    var funcs=[];\n    for(var i=0;i<10;i++){\n        funcs[i]=(function(){\n            var x=i;\n            return x;\n        })(i);\n    }\n    return funcs;\n}\nvar funcs=constfuncs();\nfuncs[5];\n```\n\n#### call()、apply()、bind()应该怎么玩\n三言两语聊一聊\ncall、apply几乎一致，都是调用其他对象原型方法的方法，唯一不同的是第二个参数，call的第（2+）个参数是此原型方法调用所需的实参，而apply直接传入一个实参数组。\n```\nf.call(o,1,2);\n//等价于\no.m=f;//将f存储为o的临时方法\no.m(1,2);//调用它,传入参数\ndelete o.m;//将临时方法删除\n```\ncall和apply经常应用于继承原型方法。\nbind的参数设置与call是一致的，只不过bind返回的是一个函数。所以调用bind后还需要再调用下返回的函数。手动实现一个bind，加深理解。\n```\n//返回一个函数，通过调用它来调用o中的方法f()，传递它所有的实参\nfunction bind(f,o){\n    if(f.bind){\n        return f.bind(o);//如果bind()方法存在的话，使用bind()方法\n    }else{ \n        return function(){//否则，这样绑定\n            return f.apply(o,arguments);\n        };\n    }\n}\n```\n总结一下，这三个方法都是希望将方法母体绑定到第一个参数上，即使第一个参数拥有母体的功能。","slug":"值得反复学习的Javascrip核心","published":1,"updated":"2017-06-02T16:14:03.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2zc002ldoexqdops05r","content":"<p>JavaScript是一门神奇的语言，犀牛书是一本神奇的书。初学JavaScript之时，翻阅过许多人的学习经验贴，大都推荐这本书，可谓是前端人手必备，要说是前端JavaScript大词典应该还是不为过的。学习是循循渐进的，随着掌握某一领域知识总量的增多，会发现这个领域的知识层层渗透、相互交错，因此每一次的再读犀牛书都会有更加深刻的理解，甚至曾经如何也不明白的知识点竟然也豁然开朗甚至颇有醍醐灌顶之感。所以会有很多人会一次又一次的翻阅这部典籍，一次又一次提炼精髓，让自己对JavaScript的领悟更加深刻。那种对知识融会贯通、由此及彼的感觉实在令人着迷。<br><a id=\"more\"></a><br>前前后后大概是第五次读犀牛书了，毫不夸张的，每一次都是有迹可循的。只不过并不是通读，是有选择性的跳读。这一次希望最大限度扫描全书，记下曾经让我困惑不已的问题，以达到反复学习的目的。</p>\n<h4 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h4><p>null表示的是一个特殊的值，含义为“非对象”，属于程序级，可预知的、正常的值空缺。<br>undefined则是变量的一种取值，含义为未定义，属于系统级，出乎意料的值空缺。<br>对于undefined，我有一个特别的理解，即Javascript是没有显式声明变量类型的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a;</div></pre></td></tr></table></figure>\n<p>这句代码确实是声明了一个变量，可是并没有指明a是整型还一个变量。<br>所以我认为这里可以认为a没有指明类型即为未定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof null  //&quot;object&quot;;这其实是一个历史遗留问题，不必疑惑。</div><div class=\"line\">typeof undefined  //&quot;undefined&quot;;</div></pre></td></tr></table></figure>\n<p>他们的数字值的转换也有所不同<br>null =&gt; 0<br>undefined =&gt; NaN</p>\n<h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p>毫不负责任的说，这个名字其实就是装比来的，什么暂时性死区，不过一个函数作用域问题和声明提前问题的合载。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &quot;global&quot;;</div><div class=\"line\">(function()&#123;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\tvar a = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<ul>\n<li>首先从作用域角度来理解：<br>调用一个函数，系统就会为他创建一个作用域链表，内部优先级高于父函数，以此类推直到全局函数。在局部访问一个变量时，系统首先在内部scope查询该变量，若没有找到，系统将查询上一级父函数scope,以此类推直到全局函数scope.而当内部声明了一个与外部变量同名的一个变量，由于函数作用域优先级的特性，系统将不会再查找作用域链。这就导致了在这个函数里，只可能访问到“local”。</li>\n<li>再次从函数声明提前的角度来进一步剖析：<br>JavaScript具有声明提前的特性，即将函数内部所有定义的局部变量的声明都提到函数最前面，导致了变量的声明和初始化分离。</li>\n</ul>\n<p>代码对比：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\tvar a = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div><div class=\"line\">等价于</div><div class=\"line\">(function()&#123;</div><div class=\"line\">\tvar a;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\ta = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<p>在声明和初始化这段代码之间，如果访问这个变量，都将返回undefined···这段代码就是相对于这个变量的暂时性死区，嗯，确实和死了差不多···</p>\n<h4 id=\"浮点数精度问题，涉及比较大小\"><a href=\"#浮点数精度问题，涉及比较大小\" class=\"headerlink\" title=\"浮点数精度问题，涉及比较大小\"></a>浮点数精度问题，涉及比较大小</h4><p>由于Javascript是基于IEEE754标准定义的浮点格式，即是以1/2,1/4,1/8划分的精度，与我们常用的0.1,0.01,0.001有所不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=3.2-2.2;</div><div class=\"line\">var b=2.2-1.2;</div><div class=\"line\">console.log(a==b);//false</div></pre></td></tr></table></figure>\n<p>这时候我们可以采用判断他们的差值是否小于一个足够小的数来判断他们是否相等。</p>\n<h4 id=\"new操作究竟发生了什么？\"><a href=\"#new操作究竟发生了什么？\" class=\"headerlink\" title=\"new操作究竟发生了什么？\"></a>new操作究竟发生了什么？</h4><ul>\n<li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>\n<li>属性和方法被加入到 this 引用的对象中。</li>\n<li>新创建的对象由 this 所引用，最后隐式的返回 this 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">\tthis.name=&quot;Liz&quot;;</div><div class=\"line\">\tthis.sayName=function()&#123;</div><div class=\"line\">\t\tconsole.log(this.name);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.age=22;</div><div class=\"line\">Person.prototype.sayAge=function()&#123;</div><div class=\"line\">\tconsole.log(this.age);</div><div class=\"line\">&#125;;</div><div class=\"line\">var P=new Person();</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Person.png\" alt=\"Person\"></p>\n<h4 id=\"深度拷贝问题\"><a href=\"#深度拷贝问题\" class=\"headerlink\" title=\"深度拷贝问题\"></a>深度拷贝问题</h4><p>首先明确以下几点</p>\n<ul>\n<li>基本数据类型，如“number，string，boolean”可直接赋值。</li>\n<li>引用类型（对象），这里需要特别处理Array。</li>\n<li>是否是原对象的自有原型方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function extendDeep(sup,sub)&#123;</div><div class=\"line\">    var i,</div><div class=\"line\">    toStr=Object.prototype.toString;</div><div class=\"line\">    aStr=&quot;[object Array]&quot;;</div><div class=\"line\">    sub=sub||&#123;&#125;;</div><div class=\"line\">    for(i in sup)&#123;</div><div class=\"line\">        if (sup.hasOwnProperty(i)) &#123;</div><div class=\"line\">            if (typeof sup[i]===&apos;object&apos;) &#123;//如果是对象需进一步区别是数组还是Object</div><div class=\"line\">                sub[i]=toStr.call(sup[i])===aStr?[]:&#123;&#125;;</div><div class=\"line\">                extendDeep(sup[i],sub[i]);</div><div class=\"line\">            &#125;else&#123;//不是对象则直接复制</div><div class=\"line\">                sub[i]=sup[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sub;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"序列化对象\"><a href=\"#序列化对象\" class=\"headerlink\" title=\"序列化对象\"></a>序列化对象</h4><p>引用原文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o=&#123;x:1,y:&#123;z:[false,null,&quot;&quot;]&#125;&#125;;//定义一个测试对象</div><div class=\"line\">s=JSON.stringify(o);//s是&apos;&#123;&quot;x&quot;:1,&quot;y&quot;:&#123;&quot;z&quot;:[false,null,&quot;&quot;]&#125;&#125;&apos;</div><div class=\"line\">p=JSON.parse(s);//p是o的深拷贝</div></pre></td></tr></table></figure>\n<p>同样一道高频考点，解析url所带参数，以JSON格式返回。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getData(url)&#123;</div><div class=\"line\">        var result =&#123;&#125;;</div><div class=\"line\">        var temp = url.split(&apos;?&apos;)[1].split(&apos;&amp;&apos;);</div><div class=\"line\">        for(i in temp)&#123;</div><div class=\"line\">            var s = temp[i].split(&apos;=&apos;);</div><div class=\"line\">            result[s[0]] = s[1];</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"函数调用，this剑指何方\"><a href=\"#函数调用，this剑指何方\" class=\"headerlink\" title=\"函数调用，this剑指何方\"></a>函数调用，this剑指何方</h4><p>首先明白什么是函数，什么是方法。<br>一般情况下，独立实现某种功能的一段代码，当这段代码以一般函数形式调用时我们称之为函数，当这段代码依赖于某个对象，在某个对象上调用时，我们称之为方法。<br>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">func();//函数</div><div class=\"line\">O.func();//O的一个名为func的方法</div></pre></td></tr></table></figure></p>\n<p>嵌套函数的this不是指向全局对象（非严格模式）就是undefined（严格模式），嵌套的函数不会从调用它的函数中继承this。<br>如果嵌套函数作为方法调用，其this的值指向调用它的对象。<br>顺便多一句嘴，如果函数没有指明return的值，将会默认返回undefined。<br>JQuery里经常返回this实现链式调用。</p>\n<h4 id=\"理解闭包\"><a href=\"#理解闭包\" class=\"headerlink\" title=\"理解闭包\"></a>理解闭包</h4><p>首先要知道<strong>函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。</strong><br>闭包即为<strong>函数定义时的作用域链到函数执行时依然有效</strong>这种特性。<br>这或许是个难点，也困扰了我很久。但至少现在对于我已经不再困难。<br>我们常说的闭包其实是<strong>当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时</strong>这种微妙情况的闭包。<br>引用原书代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var scope=&quot;global scope&quot;;</div><div class=\"line\">function checkscope()&#123;</div><div class=\"line\">    var scope=&quot;local scope&quot;;</div><div class=\"line\">    function func()&#123;return scope;&#125;</div><div class=\"line\">    return func();</div><div class=\"line\">&#125;</div><div class=\"line\">checkscope()//=＞&quot;local scope&quot;</div></pre></td></tr></table></figure></p>\n<p>当函数func被调用，系统立即为func创建一个作用域链表，这个作用域链表首先的指向位置是由他定义的时候决定的，故此时作用域链表中优先级最高的就是checkscope。当checkscope执行，func被暴露在全局环境中，但他的作用域并不会发生改变，所以查找scope的值依然先从作用域链表中优先级最高的checkscope开始查询。<br>进一步的通过底层的原理来理解，为什么checkscope调用结束，func还能访问到checkscope的变量？<br>我们知道C语言程序的内存使用分布如图所示：<br><img src=\"/images/内存分布.png\" alt=\"\"><br>C语言编写程序在使用内存时一般分为三的段</p>\n<ul>\n<li>正文段（常量、code）</li>\n<li>数据堆段（动态分配的存储区，比如JS中new操作）</li>\n<li>数据栈段（临时变量，即局部变量）</li>\n</ul>\n<p>每一次函数调用，都会为该函数创建一个栈，供这次运行使用，一般就是放局部变量。当函数返回，这个栈就会被销毁。然而这里又不得不提到垃圾回收机制，一般系统就是采用引用标记法进行垃圾回收处理，原则就是该变量被引用值为0。在闭包中就打破了这个回收原则。checkscope执行，返回了func，而func内部使用了scope变量，这就使checkscope对应的数据栈不满足回收原则，不能正常被回收，所以func依然可以访问scope的值，且为“local scope”。</p>\n<p>再看一个常见的例子<br>我们期望：返回一个函数组成的数组，它们的返回值是0～9<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function constfuncs()&#123;</div><div class=\"line\">    var funcs=[];</div><div class=\"line\">    for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">        funcs[i]=function()&#123;return i;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs=constfuncs();</div><div class=\"line\">funcs[5]()//     10？！</div></pre></td></tr></table></figure></p>\n<p>但是结果居然全是10。其实由上面所描述的思路来考虑，这个结果很容易被理解。constfuncs被调用，内部有个for循环定义了10个funcs[i],这些funcs[i]的作用域是指向constfuncs的，他们内部的引用的i是同一个constfuncs的局部变量i。因此，当for循环结束，i已经变成了10。fincs[i]被调用时，在其作用域链优先级最高的constfuncs的scope里查找到i并输出，毫无争议应该全是10.</p>\n<p>我们可以采用立即执行的方式达到理想效果(在funcs[i]内部声明一个变量x保存当前的i，使函数funcs[i]以i为参数立即执行，返回x。)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function constfuncs()&#123;</div><div class=\"line\">    var funcs=[];</div><div class=\"line\">    for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">        funcs[i]=(function()&#123;</div><div class=\"line\">            var x=i;</div><div class=\"line\">            return x;</div><div class=\"line\">        &#125;)(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs=constfuncs();</div><div class=\"line\">funcs[5];</div></pre></td></tr></table></figure></p>\n<h4 id=\"call-、apply-、bind-应该怎么玩\"><a href=\"#call-、apply-、bind-应该怎么玩\" class=\"headerlink\" title=\"call()、apply()、bind()应该怎么玩\"></a>call()、apply()、bind()应该怎么玩</h4><p>三言两语聊一聊<br>call、apply几乎一致，都是调用其他对象原型方法的方法，唯一不同的是第二个参数，call的第（2+）个参数是此原型方法调用所需的实参，而apply直接传入一个实参数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.call(o,1,2);</div><div class=\"line\">//等价于</div><div class=\"line\">o.m=f;//将f存储为o的临时方法</div><div class=\"line\">o.m(1,2);//调用它,传入参数</div><div class=\"line\">delete o.m;//将临时方法删除</div></pre></td></tr></table></figure></p>\n<p>call和apply经常应用于继承原型方法。<br>bind的参数设置与call是一致的，只不过bind返回的是一个函数。所以调用bind后还需要再调用下返回的函数。手动实现一个bind，加深理解。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//返回一个函数，通过调用它来调用o中的方法f()，传递它所有的实参</div><div class=\"line\">function bind(f,o)&#123;</div><div class=\"line\">    if(f.bind)&#123;</div><div class=\"line\">        return f.bind(o);//如果bind()方法存在的话，使用bind()方法</div><div class=\"line\">    &#125;else&#123; </div><div class=\"line\">        return function()&#123;//否则，这样绑定</div><div class=\"line\">            return f.apply(o,arguments);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>总结一下，这三个方法都是希望将方法母体绑定到第一个参数上，即使第一个参数拥有母体的功能。</p>\n","excerpt":"<p>JavaScript是一门神奇的语言，犀牛书是一本神奇的书。初学JavaScript之时，翻阅过许多人的学习经验贴，大都推荐这本书，可谓是前端人手必备，要说是前端JavaScript大词典应该还是不为过的。学习是循循渐进的，随着掌握某一领域知识总量的增多，会发现这个领域的知识层层渗透、相互交错，因此每一次的再读犀牛书都会有更加深刻的理解，甚至曾经如何也不明白的知识点竟然也豁然开朗甚至颇有醍醐灌顶之感。所以会有很多人会一次又一次的翻阅这部典籍，一次又一次提炼精髓，让自己对JavaScript的领悟更加深刻。那种对知识融会贯通、由此及彼的感觉实在令人着迷。<br>","more":"<br>前前后后大概是第五次读犀牛书了，毫不夸张的，每一次都是有迹可循的。只不过并不是通读，是有选择性的跳读。这一次希望最大限度扫描全书，记下曾经让我困惑不已的问题，以达到反复学习的目的。</p>\n<h4 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h4><p>null表示的是一个特殊的值，含义为“非对象”，属于程序级，可预知的、正常的值空缺。<br>undefined则是变量的一种取值，含义为未定义，属于系统级，出乎意料的值空缺。<br>对于undefined，我有一个特别的理解，即Javascript是没有显式声明变量类型的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a;</div></pre></td></tr></table></figure>\n<p>这句代码确实是声明了一个变量，可是并没有指明a是整型还一个变量。<br>所以我认为这里可以认为a没有指明类型即为未定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof null  //&quot;object&quot;;这其实是一个历史遗留问题，不必疑惑。</div><div class=\"line\">typeof undefined  //&quot;undefined&quot;;</div></pre></td></tr></table></figure>\n<p>他们的数字值的转换也有所不同<br>null =&gt; 0<br>undefined =&gt; NaN</p>\n<h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p>毫不负责任的说，这个名字其实就是装比来的，什么暂时性死区，不过一个函数作用域问题和声明提前问题的合载。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &quot;global&quot;;</div><div class=\"line\">(function()&#123;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\tvar a = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<ul>\n<li>首先从作用域角度来理解：<br>调用一个函数，系统就会为他创建一个作用域链表，内部优先级高于父函数，以此类推直到全局函数。在局部访问一个变量时，系统首先在内部scope查询该变量，若没有找到，系统将查询上一级父函数scope,以此类推直到全局函数scope.而当内部声明了一个与外部变量同名的一个变量，由于函数作用域优先级的特性，系统将不会再查找作用域链。这就导致了在这个函数里，只可能访问到“local”。</li>\n<li>再次从函数声明提前的角度来进一步剖析：<br>JavaScript具有声明提前的特性，即将函数内部所有定义的局部变量的声明都提到函数最前面，导致了变量的声明和初始化分离。</li>\n</ul>\n<p>代码对比：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\tvar a = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div><div class=\"line\">等价于</div><div class=\"line\">(function()&#123;</div><div class=\"line\">\tvar a;</div><div class=\"line\">\tconsole.log(a);//undefined</div><div class=\"line\">\ta = &quot;local&quot;;</div><div class=\"line\">\tconsole.log(a);//local</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<p>在声明和初始化这段代码之间，如果访问这个变量，都将返回undefined···这段代码就是相对于这个变量的暂时性死区，嗯，确实和死了差不多···</p>\n<h4 id=\"浮点数精度问题，涉及比较大小\"><a href=\"#浮点数精度问题，涉及比较大小\" class=\"headerlink\" title=\"浮点数精度问题，涉及比较大小\"></a>浮点数精度问题，涉及比较大小</h4><p>由于Javascript是基于IEEE754标准定义的浮点格式，即是以1/2,1/4,1/8划分的精度，与我们常用的0.1,0.01,0.001有所不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=3.2-2.2;</div><div class=\"line\">var b=2.2-1.2;</div><div class=\"line\">console.log(a==b);//false</div></pre></td></tr></table></figure>\n<p>这时候我们可以采用判断他们的差值是否小于一个足够小的数来判断他们是否相等。</p>\n<h4 id=\"new操作究竟发生了什么？\"><a href=\"#new操作究竟发生了什么？\" class=\"headerlink\" title=\"new操作究竟发生了什么？\"></a>new操作究竟发生了什么？</h4><ul>\n<li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>\n<li>属性和方法被加入到 this 引用的对象中。</li>\n<li>新创建的对象由 this 所引用，最后隐式的返回 this 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">\tthis.name=&quot;Liz&quot;;</div><div class=\"line\">\tthis.sayName=function()&#123;</div><div class=\"line\">\t\tconsole.log(this.name);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.age=22;</div><div class=\"line\">Person.prototype.sayAge=function()&#123;</div><div class=\"line\">\tconsole.log(this.age);</div><div class=\"line\">&#125;;</div><div class=\"line\">var P=new Person();</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Person.png\" alt=\"Person\"></p>\n<h4 id=\"深度拷贝问题\"><a href=\"#深度拷贝问题\" class=\"headerlink\" title=\"深度拷贝问题\"></a>深度拷贝问题</h4><p>首先明确以下几点</p>\n<ul>\n<li>基本数据类型，如“number，string，boolean”可直接赋值。</li>\n<li>引用类型（对象），这里需要特别处理Array。</li>\n<li>是否是原对象的自有原型方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function extendDeep(sup,sub)&#123;</div><div class=\"line\">    var i,</div><div class=\"line\">    toStr=Object.prototype.toString;</div><div class=\"line\">    aStr=&quot;[object Array]&quot;;</div><div class=\"line\">    sub=sub||&#123;&#125;;</div><div class=\"line\">    for(i in sup)&#123;</div><div class=\"line\">        if (sup.hasOwnProperty(i)) &#123;</div><div class=\"line\">            if (typeof sup[i]===&apos;object&apos;) &#123;//如果是对象需进一步区别是数组还是Object</div><div class=\"line\">                sub[i]=toStr.call(sup[i])===aStr?[]:&#123;&#125;;</div><div class=\"line\">                extendDeep(sup[i],sub[i]);</div><div class=\"line\">            &#125;else&#123;//不是对象则直接复制</div><div class=\"line\">                sub[i]=sup[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sub;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"序列化对象\"><a href=\"#序列化对象\" class=\"headerlink\" title=\"序列化对象\"></a>序列化对象</h4><p>引用原文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o=&#123;x:1,y:&#123;z:[false,null,&quot;&quot;]&#125;&#125;;//定义一个测试对象</div><div class=\"line\">s=JSON.stringify(o);//s是&apos;&#123;&quot;x&quot;:1,&quot;y&quot;:&#123;&quot;z&quot;:[false,null,&quot;&quot;]&#125;&#125;&apos;</div><div class=\"line\">p=JSON.parse(s);//p是o的深拷贝</div></pre></td></tr></table></figure>\n<p>同样一道高频考点，解析url所带参数，以JSON格式返回。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getData(url)&#123;</div><div class=\"line\">        var result =&#123;&#125;;</div><div class=\"line\">        var temp = url.split(&apos;?&apos;)[1].split(&apos;&amp;&apos;);</div><div class=\"line\">        for(i in temp)&#123;</div><div class=\"line\">            var s = temp[i].split(&apos;=&apos;);</div><div class=\"line\">            result[s[0]] = s[1];</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"函数调用，this剑指何方\"><a href=\"#函数调用，this剑指何方\" class=\"headerlink\" title=\"函数调用，this剑指何方\"></a>函数调用，this剑指何方</h4><p>首先明白什么是函数，什么是方法。<br>一般情况下，独立实现某种功能的一段代码，当这段代码以一般函数形式调用时我们称之为函数，当这段代码依赖于某个对象，在某个对象上调用时，我们称之为方法。<br>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">func();//函数</div><div class=\"line\">O.func();//O的一个名为func的方法</div></pre></td></tr></table></figure></p>\n<p>嵌套函数的this不是指向全局对象（非严格模式）就是undefined（严格模式），嵌套的函数不会从调用它的函数中继承this。<br>如果嵌套函数作为方法调用，其this的值指向调用它的对象。<br>顺便多一句嘴，如果函数没有指明return的值，将会默认返回undefined。<br>JQuery里经常返回this实现链式调用。</p>\n<h4 id=\"理解闭包\"><a href=\"#理解闭包\" class=\"headerlink\" title=\"理解闭包\"></a>理解闭包</h4><p>首先要知道<strong>函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。</strong><br>闭包即为<strong>函数定义时的作用域链到函数执行时依然有效</strong>这种特性。<br>这或许是个难点，也困扰了我很久。但至少现在对于我已经不再困难。<br>我们常说的闭包其实是<strong>当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时</strong>这种微妙情况的闭包。<br>引用原书代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var scope=&quot;global scope&quot;;</div><div class=\"line\">function checkscope()&#123;</div><div class=\"line\">    var scope=&quot;local scope&quot;;</div><div class=\"line\">    function func()&#123;return scope;&#125;</div><div class=\"line\">    return func();</div><div class=\"line\">&#125;</div><div class=\"line\">checkscope()//=＞&quot;local scope&quot;</div></pre></td></tr></table></figure></p>\n<p>当函数func被调用，系统立即为func创建一个作用域链表，这个作用域链表首先的指向位置是由他定义的时候决定的，故此时作用域链表中优先级最高的就是checkscope。当checkscope执行，func被暴露在全局环境中，但他的作用域并不会发生改变，所以查找scope的值依然先从作用域链表中优先级最高的checkscope开始查询。<br>进一步的通过底层的原理来理解，为什么checkscope调用结束，func还能访问到checkscope的变量？<br>我们知道C语言程序的内存使用分布如图所示：<br><img src=\"/images/内存分布.png\" alt=\"\"><br>C语言编写程序在使用内存时一般分为三的段</p>\n<ul>\n<li>正文段（常量、code）</li>\n<li>数据堆段（动态分配的存储区，比如JS中new操作）</li>\n<li>数据栈段（临时变量，即局部变量）</li>\n</ul>\n<p>每一次函数调用，都会为该函数创建一个栈，供这次运行使用，一般就是放局部变量。当函数返回，这个栈就会被销毁。然而这里又不得不提到垃圾回收机制，一般系统就是采用引用标记法进行垃圾回收处理，原则就是该变量被引用值为0。在闭包中就打破了这个回收原则。checkscope执行，返回了func，而func内部使用了scope变量，这就使checkscope对应的数据栈不满足回收原则，不能正常被回收，所以func依然可以访问scope的值，且为“local scope”。</p>\n<p>再看一个常见的例子<br>我们期望：返回一个函数组成的数组，它们的返回值是0～9<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function constfuncs()&#123;</div><div class=\"line\">    var funcs=[];</div><div class=\"line\">    for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">        funcs[i]=function()&#123;return i;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs=constfuncs();</div><div class=\"line\">funcs[5]()//     10？！</div></pre></td></tr></table></figure></p>\n<p>但是结果居然全是10。其实由上面所描述的思路来考虑，这个结果很容易被理解。constfuncs被调用，内部有个for循环定义了10个funcs[i],这些funcs[i]的作用域是指向constfuncs的，他们内部的引用的i是同一个constfuncs的局部变量i。因此，当for循环结束，i已经变成了10。fincs[i]被调用时，在其作用域链优先级最高的constfuncs的scope里查找到i并输出，毫无争议应该全是10.</p>\n<p>我们可以采用立即执行的方式达到理想效果(在funcs[i]内部声明一个变量x保存当前的i，使函数funcs[i]以i为参数立即执行，返回x。)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function constfuncs()&#123;</div><div class=\"line\">    var funcs=[];</div><div class=\"line\">    for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">        funcs[i]=(function()&#123;</div><div class=\"line\">            var x=i;</div><div class=\"line\">            return x;</div><div class=\"line\">        &#125;)(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs=constfuncs();</div><div class=\"line\">funcs[5];</div></pre></td></tr></table></figure></p>\n<h4 id=\"call-、apply-、bind-应该怎么玩\"><a href=\"#call-、apply-、bind-应该怎么玩\" class=\"headerlink\" title=\"call()、apply()、bind()应该怎么玩\"></a>call()、apply()、bind()应该怎么玩</h4><p>三言两语聊一聊<br>call、apply几乎一致，都是调用其他对象原型方法的方法，唯一不同的是第二个参数，call的第（2+）个参数是此原型方法调用所需的实参，而apply直接传入一个实参数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">f.call(o,1,2);</div><div class=\"line\">//等价于</div><div class=\"line\">o.m=f;//将f存储为o的临时方法</div><div class=\"line\">o.m(1,2);//调用它,传入参数</div><div class=\"line\">delete o.m;//将临时方法删除</div></pre></td></tr></table></figure></p>\n<p>call和apply经常应用于继承原型方法。<br>bind的参数设置与call是一致的，只不过bind返回的是一个函数。所以调用bind后还需要再调用下返回的函数。手动实现一个bind，加深理解。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//返回一个函数，通过调用它来调用o中的方法f()，传递它所有的实参</div><div class=\"line\">function bind(f,o)&#123;</div><div class=\"line\">    if(f.bind)&#123;</div><div class=\"line\">        return f.bind(o);//如果bind()方法存在的话，使用bind()方法</div><div class=\"line\">    &#125;else&#123; </div><div class=\"line\">        return function()&#123;//否则，这样绑定</div><div class=\"line\">            return f.apply(o,arguments);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>总结一下，这三个方法都是希望将方法母体绑定到第一个参数上，即使第一个参数拥有母体的功能。</p>"},{"title":"元素隐藏总结","date":"2017-03-01T01:29:15.000Z","_content":"\n前端开发经常需要将一个元素进行隐藏，其实前端将一个元素隐藏的奇淫技巧非常之多，虽然最终效果都一样，但对于浏览器渲染性能等方面还是存在较大差异。\n<!--more-->\n## display: none; ##\n\n1、浏览器不会生成属性为display: none;的元素。\n2、display: none;不占据空间（毕竟都不渲染啦），所以动态改变此属性时会引起重排。\n3、display: none;不会被子类继承，但是···子类是不会显示的，毕竟都一起被kill啦。\n4、display,是个尴尬的属性,transition对她无效。(毫无争议)\n\n\n## visibility: hidden; ##\n\n1、元素会被隐藏，但是不会消失，依然占据空间。\n2、visibility: hidden会被子类继承，子类也可以通过显示的设置visibility: visible;来反隐藏。\n3、visibility: hidden;不会触发该元素已经绑定的事件。\n4、visibility: hidden;动态修改此属性会引起重绘。\n5、visibility,transition对她无效。(亲测)\n\n\n## opacity=0 ##\n1、opacity=0只是透明度为100%,元素隐藏，依然占据空间。\n2、opacity=0会被子元素继承,且子元素并不能通过opacity=1，进行反隐藏。不能。\n3、opacity=0的元素依然能触发已经绑定的事件。\n4、opacity,transition对她有效(毫无争议)","source":"_posts/元素隐藏总结.md","raw":"---\ntitle: 元素隐藏总结\ndate: 2017-03-01 09:29:15\ncategories: CSS\ntags: CSS\n\n---\n\n前端开发经常需要将一个元素进行隐藏，其实前端将一个元素隐藏的奇淫技巧非常之多，虽然最终效果都一样，但对于浏览器渲染性能等方面还是存在较大差异。\n<!--more-->\n## display: none; ##\n\n1、浏览器不会生成属性为display: none;的元素。\n2、display: none;不占据空间（毕竟都不渲染啦），所以动态改变此属性时会引起重排。\n3、display: none;不会被子类继承，但是···子类是不会显示的，毕竟都一起被kill啦。\n4、display,是个尴尬的属性,transition对她无效。(毫无争议)\n\n\n## visibility: hidden; ##\n\n1、元素会被隐藏，但是不会消失，依然占据空间。\n2、visibility: hidden会被子类继承，子类也可以通过显示的设置visibility: visible;来反隐藏。\n3、visibility: hidden;不会触发该元素已经绑定的事件。\n4、visibility: hidden;动态修改此属性会引起重绘。\n5、visibility,transition对她无效。(亲测)\n\n\n## opacity=0 ##\n1、opacity=0只是透明度为100%,元素隐藏，依然占据空间。\n2、opacity=0会被子元素继承,且子元素并不能通过opacity=1，进行反隐藏。不能。\n3、opacity=0的元素依然能触发已经绑定的事件。\n4、opacity,transition对她有效(毫无争议)","slug":"元素隐藏总结","published":1,"updated":"2017-06-02T16:13:54.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2zf002pdoex6xhirq5x","content":"<p>前端开发经常需要将一个元素进行隐藏，其实前端将一个元素隐藏的奇淫技巧非常之多，虽然最终效果都一样，但对于浏览器渲染性能等方面还是存在较大差异。<br><a id=\"more\"></a></p>\n<h2 id=\"display-none\"><a href=\"#display-none\" class=\"headerlink\" title=\"display: none;\"></a>display: none;</h2><p>1、浏览器不会生成属性为display: none;的元素。<br>2、display: none;不占据空间（毕竟都不渲染啦），所以动态改变此属性时会引起重排。<br>3、display: none;不会被子类继承，但是···子类是不会显示的，毕竟都一起被kill啦。<br>4、display,是个尴尬的属性,transition对她无效。(毫无争议)</p>\n<h2 id=\"visibility-hidden\"><a href=\"#visibility-hidden\" class=\"headerlink\" title=\"visibility: hidden;\"></a>visibility: hidden;</h2><p>1、元素会被隐藏，但是不会消失，依然占据空间。<br>2、visibility: hidden会被子类继承，子类也可以通过显示的设置visibility: visible;来反隐藏。<br>3、visibility: hidden;不会触发该元素已经绑定的事件。<br>4、visibility: hidden;动态修改此属性会引起重绘。<br>5、visibility,transition对她无效。(亲测)</p>\n<h2 id=\"opacity-0\"><a href=\"#opacity-0\" class=\"headerlink\" title=\"opacity=0\"></a>opacity=0</h2><p>1、opacity=0只是透明度为100%,元素隐藏，依然占据空间。<br>2、opacity=0会被子元素继承,且子元素并不能通过opacity=1，进行反隐藏。不能。<br>3、opacity=0的元素依然能触发已经绑定的事件。<br>4、opacity,transition对她有效(毫无争议)</p>\n","excerpt":"<p>前端开发经常需要将一个元素进行隐藏，其实前端将一个元素隐藏的奇淫技巧非常之多，虽然最终效果都一样，但对于浏览器渲染性能等方面还是存在较大差异。<br>","more":"</p>\n<h2 id=\"display-none\"><a href=\"#display-none\" class=\"headerlink\" title=\"display: none;\"></a>display: none;</h2><p>1、浏览器不会生成属性为display: none;的元素。<br>2、display: none;不占据空间（毕竟都不渲染啦），所以动态改变此属性时会引起重排。<br>3、display: none;不会被子类继承，但是···子类是不会显示的，毕竟都一起被kill啦。<br>4、display,是个尴尬的属性,transition对她无效。(毫无争议)</p>\n<h2 id=\"visibility-hidden\"><a href=\"#visibility-hidden\" class=\"headerlink\" title=\"visibility: hidden;\"></a>visibility: hidden;</h2><p>1、元素会被隐藏，但是不会消失，依然占据空间。<br>2、visibility: hidden会被子类继承，子类也可以通过显示的设置visibility: visible;来反隐藏。<br>3、visibility: hidden;不会触发该元素已经绑定的事件。<br>4、visibility: hidden;动态修改此属性会引起重绘。<br>5、visibility,transition对她无效。(亲测)</p>\n<h2 id=\"opacity-0\"><a href=\"#opacity-0\" class=\"headerlink\" title=\"opacity=0\"></a>opacity=0</h2><p>1、opacity=0只是透明度为100%,元素隐藏，依然占据空间。<br>2、opacity=0会被子元素继承,且子元素并不能通过opacity=1，进行反隐藏。不能。<br>3、opacity=0的元素依然能触发已经绑定的事件。<br>4、opacity,transition对她有效(毫无争议)</p>"},{"title":"几种继承方式的比较","date":"2017-03-12T05:51:55.000Z","_content":"\nJavaScript的语言设计导致没有class之类的继承方式，但由于实际开发的需要，涌现了多种继承方式。通过比较多种继承方式，有利于进一步理解JavaScript语言的特性。\n<!--more-->\n\n## 一、 默认模式 ##\n\n```\n    function Parent(){\n    \tthis.nameArr=[\"name0\",\"name1\",\"name2\"];\n    }\n    Parent.prototype.sayName = function() {\n    \tconsole.log(this.nameArr);\n    };\n    function Child1(){};\n    Child1.prototype = new Parent();\n\n    var child1_1=new Child1();\n    var child1_2=new Child1();\n\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    child1_2.nameArr.push(\"name3\");\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    console.table(child1_1);\n    console.table(child1_2);\n```\n\n因为在Child1的构造函数的原型上继承的Parent实例,又因为`child1_1`和`child1_2` 共享原型，故`child1_1`和`child1_2`的原型都指向了这个Parent实例。所以只是**引用继承**。所以在`child1_2.nameArr.push(\"name3\");`操作后，会导致`child1_1.nameArr`里也出现`name3`。\n并且**采用new操作符，将继承Parent的所有公共属性（被this引用，可供外部使用点操作或中括号操作访问的属性）和原型**。\n\n这里顺便提一下new操作都做了些什么\n\n1、创建了一个新对象，并用this对其进行引用，同时使其继承原函数的原型。\n2、将原函数内部使用this引用的属性和方法添加到新对象。\n3、返回this.\n\n```\n    function Parent(){\n        var someWords=\"hello!\";\n        this.nameArr=[\"name0\",\"name1\",\"name2\"];\n    }\n    Parent.prototype.sayName = function() {\n        console.log(this.nameArr);\n    };\n    Parent.prototype.sex=\"famle\"\n    var child1_1=new Parent();\n    var child1_2=new Parent();\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    child1_2.nameArr.push(\"name3\");\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    console.table(child1_1);\n    console.table(child1_2);\n```\n\n\n## 二、借用构造函数模式 ##\n\n```\n\t  function Parent(str){\n        this.name=str||\"Liz\";\n    }\n    Parent.prototype.sayName = function() {\n        console.log(this.name);\n    };\n    function Child1 (str) {\n        Parent.apply(this,[str]);\n        this.sex=\"female\";\n    };\n    function Child2 (str) {\n        Parent.apply(this,[str]);\n        this.sex=\"male\";\n    };\n    var child1=new Child2(\"Liz\");\n    var child2=new Child2(\"Amy\");\n    console.log(child1.name);\n\n```\n\n通过**apply**和**call**方法，我们可以**继承到Parent的属性**，而且获得的是**副本**。apply和call并**不能继承Parent的原型**，所以还得继续设置。\n\n\n\n## 三、借用和设置原型 ##\n\n\n```\n  function Parent() {\n        this.name = \"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'male';\n        this.name=\"Lucy\";\n    };\n    Child1.prototype=new Parent();\n    Child2.prototype=new Parent();\n    Child2.prototype.age=\"22\";\n    \n\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n```\n\n通过**apply**和**call**方法**继承Parent的属性**获得的是独立的**副本**。为了弥补apply和call并**不能继承Parent的原型**的缺点，再次使用了new操作符在Child1的构造函数的原型上继承的Parent。这样做确实获得了独立的属性和共用的原型，但是属性我们继承了两次，有些累赘了，那就继续优化吧。\n\n\n\n## 四、共享原型 ##\n\n```\n  function Parent() {\n        this.name = \"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'male';\n        this.name=\"Lucy\";\n    };\n    Child1.prototype=Parent.prototype;\n    Child2.prototype=Parent.prototype;\n    //Child2.prototype.age=\"22\";\n    \n\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n```\n**apply**和**call**方法**继承Parent的属性**获得的是独立的**副本**。\n使用子孙实例与祖先**共享原型**确实实现了，**独立副本共用原型**的效果，但是问题又来了，这样我们在操作子孙元素的Prototype属性时很容易误覆盖了祖先的原型···太不安全了···继续改进，我们需要到达祖先原型的桥梁，但是我们不能让他太容易就到达···毕竟我们在子孙对象上操作时，最多操作子孙的原型。\n\n\n\n## 五、临时构造函数 ##\n\n```\n\n \n   function Parent(str) {\n        this.name = str||\"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this,[s1]);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this,[s1]);\n        this.sex=s2||'male';\n    };\n    var Func=function (){};\n    Func.prototype=Parent.prototype;\n    Child1.prototype=new Func();\n    Child2.prototype=new Func();\n    Child2.prototype.age=\"22\";\n\n    Parent.prototype.constructor=Parent;\n    Child1.prototype.constructor=Child1;\n    Child2.prototype.constructor=Child2;\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n\n```\n\n在Parent对象与Child对象间采用空Func（）作为**原型链纽带**，使我们可以找到Parent的原型，在操作Child.prototype时也只是影响到了空Func（），对Parent的原型不会造成影响，除非你故意要越过Func。为了避免constructor的怪异表现，在修改原型指向后要记得将各自的构造函数正确指定。\n\n\n\n## Tips ##\n\n一些杂七杂八的话。\nprototype是函数独有的属性。\n`__proto__`是实际对象的属性。\n","source":"_posts/几种继承方式的比较.md","raw":"---\ntitle: 几种继承方式的比较\ndate: 2017-03-12 13:51:55\ncategories: JavaScript\ntags: JavaScript\n---\n\nJavaScript的语言设计导致没有class之类的继承方式，但由于实际开发的需要，涌现了多种继承方式。通过比较多种继承方式，有利于进一步理解JavaScript语言的特性。\n<!--more-->\n\n## 一、 默认模式 ##\n\n```\n    function Parent(){\n    \tthis.nameArr=[\"name0\",\"name1\",\"name2\"];\n    }\n    Parent.prototype.sayName = function() {\n    \tconsole.log(this.nameArr);\n    };\n    function Child1(){};\n    Child1.prototype = new Parent();\n\n    var child1_1=new Child1();\n    var child1_2=new Child1();\n\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    child1_2.nameArr.push(\"name3\");\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    console.table(child1_1);\n    console.table(child1_2);\n```\n\n因为在Child1的构造函数的原型上继承的Parent实例,又因为`child1_1`和`child1_2` 共享原型，故`child1_1`和`child1_2`的原型都指向了这个Parent实例。所以只是**引用继承**。所以在`child1_2.nameArr.push(\"name3\");`操作后，会导致`child1_1.nameArr`里也出现`name3`。\n并且**采用new操作符，将继承Parent的所有公共属性（被this引用，可供外部使用点操作或中括号操作访问的属性）和原型**。\n\n这里顺便提一下new操作都做了些什么\n\n1、创建了一个新对象，并用this对其进行引用，同时使其继承原函数的原型。\n2、将原函数内部使用this引用的属性和方法添加到新对象。\n3、返回this.\n\n```\n    function Parent(){\n        var someWords=\"hello!\";\n        this.nameArr=[\"name0\",\"name1\",\"name2\"];\n    }\n    Parent.prototype.sayName = function() {\n        console.log(this.nameArr);\n    };\n    Parent.prototype.sex=\"famle\"\n    var child1_1=new Parent();\n    var child1_2=new Parent();\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    child1_2.nameArr.push(\"name3\");\n    console.log(child1_1.nameArr);\n    console.log(child1_2.nameArr);\n    console.table(child1_1);\n    console.table(child1_2);\n```\n\n\n## 二、借用构造函数模式 ##\n\n```\n\t  function Parent(str){\n        this.name=str||\"Liz\";\n    }\n    Parent.prototype.sayName = function() {\n        console.log(this.name);\n    };\n    function Child1 (str) {\n        Parent.apply(this,[str]);\n        this.sex=\"female\";\n    };\n    function Child2 (str) {\n        Parent.apply(this,[str]);\n        this.sex=\"male\";\n    };\n    var child1=new Child2(\"Liz\");\n    var child2=new Child2(\"Amy\");\n    console.log(child1.name);\n\n```\n\n通过**apply**和**call**方法，我们可以**继承到Parent的属性**，而且获得的是**副本**。apply和call并**不能继承Parent的原型**，所以还得继续设置。\n\n\n\n## 三、借用和设置原型 ##\n\n\n```\n  function Parent() {\n        this.name = \"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'male';\n        this.name=\"Lucy\";\n    };\n    Child1.prototype=new Parent();\n    Child2.prototype=new Parent();\n    Child2.prototype.age=\"22\";\n    \n\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n```\n\n通过**apply**和**call**方法**继承Parent的属性**获得的是独立的**副本**。为了弥补apply和call并**不能继承Parent的原型**的缺点，再次使用了new操作符在Child1的构造函数的原型上继承的Parent。这样做确实获得了独立的属性和共用的原型，但是属性我们继承了两次，有些累赘了，那就继续优化吧。\n\n\n\n## 四、共享原型 ##\n\n```\n  function Parent() {\n        this.name = \"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this);\n        this.sex=s2||'male';\n        this.name=\"Lucy\";\n    };\n    Child1.prototype=Parent.prototype;\n    Child2.prototype=Parent.prototype;\n    //Child2.prototype.age=\"22\";\n    \n\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n```\n**apply**和**call**方法**继承Parent的属性**获得的是独立的**副本**。\n使用子孙实例与祖先**共享原型**确实实现了，**独立副本共用原型**的效果，但是问题又来了，这样我们在操作子孙元素的Prototype属性时很容易误覆盖了祖先的原型···太不安全了···继续改进，我们需要到达祖先原型的桥梁，但是我们不能让他太容易就到达···毕竟我们在子孙对象上操作时，最多操作子孙的原型。\n\n\n\n## 五、临时构造函数 ##\n\n```\n\n \n   function Parent(str) {\n        this.name = str||\"Xzz\";\n    }\n    Parent.prototype.age=\"21\";\n    Parent.prototype.sayName = function() {\n        return this.name;\n    };\n\n    function Child1(s1,s2){\n        Parent.apply(this,[s1]);\n        this.sex=s2||'female';\n    };\n    function Child2(s1,s2){\n        Parent.apply(this,[s1]);\n        this.sex=s2||'male';\n    };\n    var Func=function (){};\n    Func.prototype=Parent.prototype;\n    Child1.prototype=new Func();\n    Child2.prototype=new Func();\n    Child2.prototype.age=\"22\";\n\n    Parent.prototype.constructor=Parent;\n    Child1.prototype.constructor=Child1;\n    Child2.prototype.constructor=Child2;\n\n    var child1=new Child1(\"Liz\");\n    var child2=new Child2(\"Amy\");\n\n    \n\n    console.log(child1.name);\n    console.log(child1.age);\n    console.log(child1);    \n\n    console.log(child2.name);\n    console.log(child2.age);\n    console.log(child2);\n\n```\n\n在Parent对象与Child对象间采用空Func（）作为**原型链纽带**，使我们可以找到Parent的原型，在操作Child.prototype时也只是影响到了空Func（），对Parent的原型不会造成影响，除非你故意要越过Func。为了避免constructor的怪异表现，在修改原型指向后要记得将各自的构造函数正确指定。\n\n\n\n## Tips ##\n\n一些杂七杂八的话。\nprototype是函数独有的属性。\n`__proto__`是实际对象的属性。\n","slug":"几种继承方式的比较","published":1,"updated":"2017-06-02T16:13:51.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2zh002sdoex4tycq9yd","content":"<p>JavaScript的语言设计导致没有class之类的继承方式，但由于实际开发的需要，涌现了多种继承方式。通过比较多种继承方式，有利于进一步理解JavaScript语言的特性。<br><a id=\"more\"></a></p>\n<h2 id=\"一、-默认模式\"><a href=\"#一、-默认模式\" class=\"headerlink\" title=\"一、 默认模式\"></a>一、 默认模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent()&#123;</div><div class=\"line\">\tthis.nameArr=[&quot;name0&quot;,&quot;name1&quot;,&quot;name2&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype.sayName = function() &#123;</div><div class=\"line\">\tconsole.log(this.nameArr);</div><div class=\"line\">&#125;;</div><div class=\"line\">function Child1()&#123;&#125;;</div><div class=\"line\">Child1.prototype = new Parent();</div><div class=\"line\"></div><div class=\"line\">var child1_1=new Child1();</div><div class=\"line\">var child1_2=new Child1();</div><div class=\"line\"></div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">child1_2.nameArr.push(&quot;name3&quot;);</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">console.table(child1_1);</div><div class=\"line\">console.table(child1_2);</div></pre></td></tr></table></figure>\n<p>因为在Child1的构造函数的原型上继承的Parent实例,又因为<code>child1_1</code>和<code>child1_2</code> 共享原型，故<code>child1_1</code>和<code>child1_2</code>的原型都指向了这个Parent实例。所以只是<strong>引用继承</strong>。所以在<code>child1_2.nameArr.push(&quot;name3&quot;);</code>操作后，会导致<code>child1_1.nameArr</code>里也出现<code>name3</code>。<br>并且<strong>采用new操作符，将继承Parent的所有公共属性（被this引用，可供外部使用点操作或中括号操作访问的属性）和原型</strong>。</p>\n<p>这里顺便提一下new操作都做了些什么</p>\n<p>1、创建了一个新对象，并用this对其进行引用，同时使其继承原函数的原型。<br>2、将原函数内部使用this引用的属性和方法添加到新对象。<br>3、返回this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent()&#123;</div><div class=\"line\">    var someWords=&quot;hello!&quot;;</div><div class=\"line\">    this.nameArr=[&quot;name0&quot;,&quot;name1&quot;,&quot;name2&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype.sayName = function() &#123;</div><div class=\"line\">    console.log(this.nameArr);</div><div class=\"line\">&#125;;</div><div class=\"line\">Parent.prototype.sex=&quot;famle&quot;</div><div class=\"line\">var child1_1=new Parent();</div><div class=\"line\">var child1_2=new Parent();</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">child1_2.nameArr.push(&quot;name3&quot;);</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">console.table(child1_1);</div><div class=\"line\">console.table(child1_2);</div></pre></td></tr></table></figure>\n<h2 id=\"二、借用构造函数模式\"><a href=\"#二、借用构造函数模式\" class=\"headerlink\" title=\"二、借用构造函数模式\"></a>二、借用构造函数模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent(str)&#123;</div><div class=\"line\">     this.name=str||&quot;Liz&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\"> Parent.prototype.sayName = function() &#123;</div><div class=\"line\">     console.log(this.name);</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child1 (str) &#123;</div><div class=\"line\">     Parent.apply(this,[str]);</div><div class=\"line\">     this.sex=&quot;female&quot;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child2 (str) &#123;</div><div class=\"line\">     Parent.apply(this,[str]);</div><div class=\"line\">     this.sex=&quot;male&quot;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var child1=new Child2(&quot;Liz&quot;);</div><div class=\"line\"> var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"> console.log(child1.name);</div></pre></td></tr></table></figure>\n<p>通过<strong>apply</strong>和<strong>call</strong>方法，我们可以<strong>继承到Parent的属性</strong>，而且获得的是<strong>副本</strong>。apply和call并<strong>不能继承Parent的原型</strong>，所以还得继续设置。</p>\n<h2 id=\"三、借用和设置原型\"><a href=\"#三、借用和设置原型\" class=\"headerlink\" title=\"三、借用和设置原型\"></a>三、借用和设置原型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">      this.name = &quot;Xzz&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\">  Parent.prototype.sayName = function() &#123;</div><div class=\"line\">      return this.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  function Child1(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;female&apos;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  function Child2(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;male&apos;;</div><div class=\"line\">      this.name=&quot;Lucy&quot;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Child1.prototype=new Parent();</div><div class=\"line\">  Child2.prototype=new Parent();</div><div class=\"line\">  Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\">  var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">  console.log(child1.name);</div><div class=\"line\">  console.log(child1.age);</div><div class=\"line\">  console.log(child1);    </div><div class=\"line\"></div><div class=\"line\">  console.log(child2.name);</div><div class=\"line\">  console.log(child2.age);</div><div class=\"line\">  console.log(child2);</div></pre></td></tr></table></figure>\n<p>通过<strong>apply</strong>和<strong>call</strong>方法<strong>继承Parent的属性</strong>获得的是独立的<strong>副本</strong>。为了弥补apply和call并<strong>不能继承Parent的原型</strong>的缺点，再次使用了new操作符在Child1的构造函数的原型上继承的Parent。这样做确实获得了独立的属性和共用的原型，但是属性我们继承了两次，有些累赘了，那就继续优化吧。</p>\n<h2 id=\"四、共享原型\"><a href=\"#四、共享原型\" class=\"headerlink\" title=\"四、共享原型\"></a>四、共享原型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">      this.name = &quot;Xzz&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\">  Parent.prototype.sayName = function() &#123;</div><div class=\"line\">      return this.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  function Child1(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;female&apos;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  function Child2(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;male&apos;;</div><div class=\"line\">      this.name=&quot;Lucy&quot;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Child1.prototype=Parent.prototype;</div><div class=\"line\">  Child2.prototype=Parent.prototype;</div><div class=\"line\">  //Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\">  var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">  console.log(child1.name);</div><div class=\"line\">  console.log(child1.age);</div><div class=\"line\">  console.log(child1);    </div><div class=\"line\"></div><div class=\"line\">  console.log(child2.name);</div><div class=\"line\">  console.log(child2.age);</div><div class=\"line\">  console.log(child2);</div></pre></td></tr></table></figure>\n<p><strong>apply</strong>和<strong>call</strong>方法<strong>继承Parent的属性</strong>获得的是独立的<strong>副本</strong>。<br>使用子孙实例与祖先<strong>共享原型</strong>确实实现了，<strong>独立副本共用原型</strong>的效果，但是问题又来了，这样我们在操作子孙元素的Prototype属性时很容易误覆盖了祖先的原型···太不安全了···继续改进，我们需要到达祖先原型的桥梁，但是我们不能让他太容易就到达···毕竟我们在子孙对象上操作时，最多操作子孙的原型。</p>\n<h2 id=\"五、临时构造函数\"><a href=\"#五、临时构造函数\" class=\"headerlink\" title=\"五、临时构造函数\"></a>五、临时构造函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">function Parent(str) &#123;</div><div class=\"line\">     this.name = str||&quot;Xzz&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\"> Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\"> Parent.prototype.sayName = function() &#123;</div><div class=\"line\">     return this.name;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> function Child1(s1,s2)&#123;</div><div class=\"line\">     Parent.apply(this,[s1]);</div><div class=\"line\">     this.sex=s2||&apos;female&apos;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child2(s1,s2)&#123;</div><div class=\"line\">     Parent.apply(this,[s1]);</div><div class=\"line\">     this.sex=s2||&apos;male&apos;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var Func=function ()&#123;&#125;;</div><div class=\"line\"> Func.prototype=Parent.prototype;</div><div class=\"line\"> Child1.prototype=new Func();</div><div class=\"line\"> Child2.prototype=new Func();</div><div class=\"line\"> Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\"></div><div class=\"line\"> Parent.prototype.constructor=Parent;</div><div class=\"line\"> Child1.prototype.constructor=Child1;</div><div class=\"line\"> Child2.prototype.constructor=Child2;</div><div class=\"line\"></div><div class=\"line\"> var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\"> var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"> console.log(child1.name);</div><div class=\"line\"> console.log(child1.age);</div><div class=\"line\"> console.log(child1);    </div><div class=\"line\"></div><div class=\"line\"> console.log(child2.name);</div><div class=\"line\"> console.log(child2.age);</div><div class=\"line\"> console.log(child2);</div></pre></td></tr></table></figure>\n<p>在Parent对象与Child对象间采用空Func（）作为<strong>原型链纽带</strong>，使我们可以找到Parent的原型，在操作Child.prototype时也只是影响到了空Func（），对Parent的原型不会造成影响，除非你故意要越过Func。为了避免constructor的怪异表现，在修改原型指向后要记得将各自的构造函数正确指定。</p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p>一些杂七杂八的话。<br>prototype是函数独有的属性。<br><code>__proto__</code>是实际对象的属性。</p>\n","excerpt":"<p>JavaScript的语言设计导致没有class之类的继承方式，但由于实际开发的需要，涌现了多种继承方式。通过比较多种继承方式，有利于进一步理解JavaScript语言的特性。<br>","more":"</p>\n<h2 id=\"一、-默认模式\"><a href=\"#一、-默认模式\" class=\"headerlink\" title=\"一、 默认模式\"></a>一、 默认模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent()&#123;</div><div class=\"line\">\tthis.nameArr=[&quot;name0&quot;,&quot;name1&quot;,&quot;name2&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype.sayName = function() &#123;</div><div class=\"line\">\tconsole.log(this.nameArr);</div><div class=\"line\">&#125;;</div><div class=\"line\">function Child1()&#123;&#125;;</div><div class=\"line\">Child1.prototype = new Parent();</div><div class=\"line\"></div><div class=\"line\">var child1_1=new Child1();</div><div class=\"line\">var child1_2=new Child1();</div><div class=\"line\"></div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">child1_2.nameArr.push(&quot;name3&quot;);</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">console.table(child1_1);</div><div class=\"line\">console.table(child1_2);</div></pre></td></tr></table></figure>\n<p>因为在Child1的构造函数的原型上继承的Parent实例,又因为<code>child1_1</code>和<code>child1_2</code> 共享原型，故<code>child1_1</code>和<code>child1_2</code>的原型都指向了这个Parent实例。所以只是<strong>引用继承</strong>。所以在<code>child1_2.nameArr.push(&quot;name3&quot;);</code>操作后，会导致<code>child1_1.nameArr</code>里也出现<code>name3</code>。<br>并且<strong>采用new操作符，将继承Parent的所有公共属性（被this引用，可供外部使用点操作或中括号操作访问的属性）和原型</strong>。</p>\n<p>这里顺便提一下new操作都做了些什么</p>\n<p>1、创建了一个新对象，并用this对其进行引用，同时使其继承原函数的原型。<br>2、将原函数内部使用this引用的属性和方法添加到新对象。<br>3、返回this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent()&#123;</div><div class=\"line\">    var someWords=&quot;hello!&quot;;</div><div class=\"line\">    this.nameArr=[&quot;name0&quot;,&quot;name1&quot;,&quot;name2&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype.sayName = function() &#123;</div><div class=\"line\">    console.log(this.nameArr);</div><div class=\"line\">&#125;;</div><div class=\"line\">Parent.prototype.sex=&quot;famle&quot;</div><div class=\"line\">var child1_1=new Parent();</div><div class=\"line\">var child1_2=new Parent();</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">child1_2.nameArr.push(&quot;name3&quot;);</div><div class=\"line\">console.log(child1_1.nameArr);</div><div class=\"line\">console.log(child1_2.nameArr);</div><div class=\"line\">console.table(child1_1);</div><div class=\"line\">console.table(child1_2);</div></pre></td></tr></table></figure>\n<h2 id=\"二、借用构造函数模式\"><a href=\"#二、借用构造函数模式\" class=\"headerlink\" title=\"二、借用构造函数模式\"></a>二、借用构造函数模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent(str)&#123;</div><div class=\"line\">     this.name=str||&quot;Liz&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\"> Parent.prototype.sayName = function() &#123;</div><div class=\"line\">     console.log(this.name);</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child1 (str) &#123;</div><div class=\"line\">     Parent.apply(this,[str]);</div><div class=\"line\">     this.sex=&quot;female&quot;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child2 (str) &#123;</div><div class=\"line\">     Parent.apply(this,[str]);</div><div class=\"line\">     this.sex=&quot;male&quot;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var child1=new Child2(&quot;Liz&quot;);</div><div class=\"line\"> var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"> console.log(child1.name);</div></pre></td></tr></table></figure>\n<p>通过<strong>apply</strong>和<strong>call</strong>方法，我们可以<strong>继承到Parent的属性</strong>，而且获得的是<strong>副本</strong>。apply和call并<strong>不能继承Parent的原型</strong>，所以还得继续设置。</p>\n<h2 id=\"三、借用和设置原型\"><a href=\"#三、借用和设置原型\" class=\"headerlink\" title=\"三、借用和设置原型\"></a>三、借用和设置原型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">      this.name = &quot;Xzz&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\">  Parent.prototype.sayName = function() &#123;</div><div class=\"line\">      return this.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  function Child1(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;female&apos;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  function Child2(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;male&apos;;</div><div class=\"line\">      this.name=&quot;Lucy&quot;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Child1.prototype=new Parent();</div><div class=\"line\">  Child2.prototype=new Parent();</div><div class=\"line\">  Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\">  var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">  console.log(child1.name);</div><div class=\"line\">  console.log(child1.age);</div><div class=\"line\">  console.log(child1);    </div><div class=\"line\"></div><div class=\"line\">  console.log(child2.name);</div><div class=\"line\">  console.log(child2.age);</div><div class=\"line\">  console.log(child2);</div></pre></td></tr></table></figure>\n<p>通过<strong>apply</strong>和<strong>call</strong>方法<strong>继承Parent的属性</strong>获得的是独立的<strong>副本</strong>。为了弥补apply和call并<strong>不能继承Parent的原型</strong>的缺点，再次使用了new操作符在Child1的构造函数的原型上继承的Parent。这样做确实获得了独立的属性和共用的原型，但是属性我们继承了两次，有些累赘了，那就继续优化吧。</p>\n<h2 id=\"四、共享原型\"><a href=\"#四、共享原型\" class=\"headerlink\" title=\"四、共享原型\"></a>四、共享原型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">      this.name = &quot;Xzz&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\">  Parent.prototype.sayName = function() &#123;</div><div class=\"line\">      return this.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  function Child1(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;female&apos;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  function Child2(s1,s2)&#123;</div><div class=\"line\">      Parent.apply(this);</div><div class=\"line\">      this.sex=s2||&apos;male&apos;;</div><div class=\"line\">      this.name=&quot;Lucy&quot;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Child1.prototype=Parent.prototype;</div><div class=\"line\">  Child2.prototype=Parent.prototype;</div><div class=\"line\">  //Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\">  var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">  console.log(child1.name);</div><div class=\"line\">  console.log(child1.age);</div><div class=\"line\">  console.log(child1);    </div><div class=\"line\"></div><div class=\"line\">  console.log(child2.name);</div><div class=\"line\">  console.log(child2.age);</div><div class=\"line\">  console.log(child2);</div></pre></td></tr></table></figure>\n<p><strong>apply</strong>和<strong>call</strong>方法<strong>继承Parent的属性</strong>获得的是独立的<strong>副本</strong>。<br>使用子孙实例与祖先<strong>共享原型</strong>确实实现了，<strong>独立副本共用原型</strong>的效果，但是问题又来了，这样我们在操作子孙元素的Prototype属性时很容易误覆盖了祖先的原型···太不安全了···继续改进，我们需要到达祖先原型的桥梁，但是我们不能让他太容易就到达···毕竟我们在子孙对象上操作时，最多操作子孙的原型。</p>\n<h2 id=\"五、临时构造函数\"><a href=\"#五、临时构造函数\" class=\"headerlink\" title=\"五、临时构造函数\"></a>五、临时构造函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">function Parent(str) &#123;</div><div class=\"line\">     this.name = str||&quot;Xzz&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\"> Parent.prototype.age=&quot;21&quot;;</div><div class=\"line\"> Parent.prototype.sayName = function() &#123;</div><div class=\"line\">     return this.name;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> function Child1(s1,s2)&#123;</div><div class=\"line\">     Parent.apply(this,[s1]);</div><div class=\"line\">     this.sex=s2||&apos;female&apos;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> function Child2(s1,s2)&#123;</div><div class=\"line\">     Parent.apply(this,[s1]);</div><div class=\"line\">     this.sex=s2||&apos;male&apos;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var Func=function ()&#123;&#125;;</div><div class=\"line\"> Func.prototype=Parent.prototype;</div><div class=\"line\"> Child1.prototype=new Func();</div><div class=\"line\"> Child2.prototype=new Func();</div><div class=\"line\"> Child2.prototype.age=&quot;22&quot;;</div><div class=\"line\"></div><div class=\"line\"> Parent.prototype.constructor=Parent;</div><div class=\"line\"> Child1.prototype.constructor=Child1;</div><div class=\"line\"> Child2.prototype.constructor=Child2;</div><div class=\"line\"></div><div class=\"line\"> var child1=new Child1(&quot;Liz&quot;);</div><div class=\"line\"> var child2=new Child2(&quot;Amy&quot;);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"> console.log(child1.name);</div><div class=\"line\"> console.log(child1.age);</div><div class=\"line\"> console.log(child1);    </div><div class=\"line\"></div><div class=\"line\"> console.log(child2.name);</div><div class=\"line\"> console.log(child2.age);</div><div class=\"line\"> console.log(child2);</div></pre></td></tr></table></figure>\n<p>在Parent对象与Child对象间采用空Func（）作为<strong>原型链纽带</strong>，使我们可以找到Parent的原型，在操作Child.prototype时也只是影响到了空Func（），对Parent的原型不会造成影响，除非你故意要越过Func。为了避免constructor的怪异表现，在修改原型指向后要记得将各自的构造函数正确指定。</p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p>一些杂七杂八的话。<br>prototype是函数独有的属性。<br><code>__proto__</code>是实际对象的属性。</p>"},{"title":"垂直居中和水平居中总结","date":"2017-03-06T14:01:35.000Z","_content":"\n单行、table、absolute垂直居中和水平居中\n<!--more-->\n#### 一 、table-cell####\n\n```\n#container{     \n\twidth: 1300px;\n    height: 700px;\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n \n#center{\n\tdisplay:inline/block/inline-block;\n }\n```\n\n以上代码可使块级子元素水平垂直居中，为inline-block的子元素只能垂直居中，若也想其水平垂直居中确保在父元素样式中添加 text-align: center。**关键必须设置其父元素固定宽高**。即使有多个子元素也一样可以垂直水平居中。\n\n当子元素都为行内元素（行内元素不能包裹块级元素，所以就没有加img啦），效果和块级元素一样各成一行，我也觉得不可思议。\n![这里写图片描述](http://img.blog.csdn.net/20160602212449220)\n\n当子元素都为块级元素\n![这里写图片描述](http://img.blog.csdn.net/20160602211731975)\n\n当子元素都为行内块元素\n![这里写图片描述](http://img.blog.csdn.net/20160602211834930)\n咳咳，看着他们乖乖的排列真开心啊~~~\n\n\n\n#### 二、CSS3 transform+absolute （法一）####\n\n```\n#container{     \n\t    position: relative;\n}\n \n#center{\n\tposition: absolute;\n    left: 50%;\n    top:50%;\n    -webkit-transform: translate3D(-50%,-50%,0%);\n    transform: translate3D(-50%,-50%,0%);\n }\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20160602213920020)\n\n优势在于不需要知道父元素和子元素的宽高。\n\n完美二维居中，屡试不爽，然，常在河边走，哪有不湿鞋···这玩意儿有时会导致其内部**文字模糊**···咳咳，死穴。搞搞图片啥的就行了。\n\n\n\n\n\n#### 三、CSS3 transform+absolute （法二）####\n\n```\n#container{    \n\t\twidth: 100%;\n        height: 100%; \n\t    position: relative;\n}\n \n#center{\n\tposition: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    width: 300px;\n    height: 400px;\n }\n```\n这样依然可以玩居中，而且不用担心兼容性问题，唯一麻烦些的也就是要**确定子元素宽高**。\n![这里写图片描述](http://img.blog.csdn.net/20160602214953238)\n\n\n\n#### 四、顺便提一提Flex ####\n\n在IE上兼容很不理想，虽然其他浏览器灰常完美，但是没法···水桶的容量总是取决于最短的木板·····\n\n```\n#container{    \n\twidth: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;/*         /column/*-reverse        */\n}\n \n#center{\n    flex: 1;\n }\n```\n![这里写图片描述](http://img.blog.csdn.net/20160602220113363)\n\n\n\n#### 五、line-height==height ####\n\n其实无所谓line-height是否等于height，文字始终是在line-height垂直中间的","source":"_posts/垂直居中和水平居中总结.md","raw":"---\ntitle: 垂直居中和水平居中总结\ndate: 2017-03-06 22:01:35\ncategories: CSS\ntags: CSS \n---\n\n单行、table、absolute垂直居中和水平居中\n<!--more-->\n#### 一 、table-cell####\n\n```\n#container{     \n\twidth: 1300px;\n    height: 700px;\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n \n#center{\n\tdisplay:inline/block/inline-block;\n }\n```\n\n以上代码可使块级子元素水平垂直居中，为inline-block的子元素只能垂直居中，若也想其水平垂直居中确保在父元素样式中添加 text-align: center。**关键必须设置其父元素固定宽高**。即使有多个子元素也一样可以垂直水平居中。\n\n当子元素都为行内元素（行内元素不能包裹块级元素，所以就没有加img啦），效果和块级元素一样各成一行，我也觉得不可思议。\n![这里写图片描述](http://img.blog.csdn.net/20160602212449220)\n\n当子元素都为块级元素\n![这里写图片描述](http://img.blog.csdn.net/20160602211731975)\n\n当子元素都为行内块元素\n![这里写图片描述](http://img.blog.csdn.net/20160602211834930)\n咳咳，看着他们乖乖的排列真开心啊~~~\n\n\n\n#### 二、CSS3 transform+absolute （法一）####\n\n```\n#container{     \n\t    position: relative;\n}\n \n#center{\n\tposition: absolute;\n    left: 50%;\n    top:50%;\n    -webkit-transform: translate3D(-50%,-50%,0%);\n    transform: translate3D(-50%,-50%,0%);\n }\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20160602213920020)\n\n优势在于不需要知道父元素和子元素的宽高。\n\n完美二维居中，屡试不爽，然，常在河边走，哪有不湿鞋···这玩意儿有时会导致其内部**文字模糊**···咳咳，死穴。搞搞图片啥的就行了。\n\n\n\n\n\n#### 三、CSS3 transform+absolute （法二）####\n\n```\n#container{    \n\t\twidth: 100%;\n        height: 100%; \n\t    position: relative;\n}\n \n#center{\n\tposition: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    width: 300px;\n    height: 400px;\n }\n```\n这样依然可以玩居中，而且不用担心兼容性问题，唯一麻烦些的也就是要**确定子元素宽高**。\n![这里写图片描述](http://img.blog.csdn.net/20160602214953238)\n\n\n\n#### 四、顺便提一提Flex ####\n\n在IE上兼容很不理想，虽然其他浏览器灰常完美，但是没法···水桶的容量总是取决于最短的木板·····\n\n```\n#container{    \n\twidth: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;/*         /column/*-reverse        */\n}\n \n#center{\n    flex: 1;\n }\n```\n![这里写图片描述](http://img.blog.csdn.net/20160602220113363)\n\n\n\n#### 五、line-height==height ####\n\n其实无所谓line-height是否等于height，文字始终是在line-height垂直中间的","slug":"垂直居中和水平居中总结","published":1,"updated":"2017-06-02T16:13:47.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2zt002xdoexz2wvr8j8","content":"<p>单行、table、absolute垂直居中和水平居中<br><a id=\"more\"></a></p>\n<h4 id=\"一-、table-cell\"><a href=\"#一-、table-cell\" class=\"headerlink\" title=\"一 、table-cell\"></a>一 、table-cell</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;     </div><div class=\"line\">\twidth: 1300px;</div><div class=\"line\">    height: 700px;</div><div class=\"line\">    display: table-cell;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    vertical-align: middle;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tdisplay:inline/block/inline-block;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>以上代码可使块级子元素水平垂直居中，为inline-block的子元素只能垂直居中，若也想其水平垂直居中确保在父元素样式中添加 text-align: center。<strong>关键必须设置其父元素固定宽高</strong>。即使有多个子元素也一样可以垂直水平居中。</p>\n<p>当子元素都为行内元素（行内元素不能包裹块级元素，所以就没有加img啦），效果和块级元素一样各成一行，我也觉得不可思议。<br><img src=\"http://img.blog.csdn.net/20160602212449220\" alt=\"这里写图片描述\"></p>\n<p>当子元素都为块级元素<br><img src=\"http://img.blog.csdn.net/20160602211731975\" alt=\"这里写图片描述\"></p>\n<p>当子元素都为行内块元素<br><img src=\"http://img.blog.csdn.net/20160602211834930\" alt=\"这里写图片描述\"><br>咳咳，看着他们乖乖的排列真开心啊~~~</p>\n<h4 id=\"二、CSS3-transform-absolute-（法一）\"><a href=\"#二、CSS3-transform-absolute-（法一）\" class=\"headerlink\" title=\"二、CSS3 transform+absolute （法一）\"></a>二、CSS3 transform+absolute （法一）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;     </div><div class=\"line\">\t    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">    left: 50%;</div><div class=\"line\">    top:50%;</div><div class=\"line\">    -webkit-transform: translate3D(-50%,-50%,0%);</div><div class=\"line\">    transform: translate3D(-50%,-50%,0%);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160602213920020\" alt=\"这里写图片描述\"></p>\n<p>优势在于不需要知道父元素和子元素的宽高。</p>\n<p>完美二维居中，屡试不爽，然，常在河边走，哪有不湿鞋···这玩意儿有时会导致其内部<strong>文字模糊</strong>···咳咳，死穴。搞搞图片啥的就行了。</p>\n<h4 id=\"三、CSS3-transform-absolute-（法二）\"><a href=\"#三、CSS3-transform-absolute-（法二）\" class=\"headerlink\" title=\"三、CSS3 transform+absolute （法二）\"></a>三、CSS3 transform+absolute （法二）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;    </div><div class=\"line\">\t\twidth: 100%;</div><div class=\"line\">        height: 100%; </div><div class=\"line\">\t    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">    left: 0;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    bottom: 0;</div><div class=\"line\">    margin: auto;</div><div class=\"line\">    width: 300px;</div><div class=\"line\">    height: 400px;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这样依然可以玩居中，而且不用担心兼容性问题，唯一麻烦些的也就是要<strong>确定子元素宽高</strong>。<br><img src=\"http://img.blog.csdn.net/20160602214953238\" alt=\"这里写图片描述\"></p>\n<h4 id=\"四、顺便提一提Flex\"><a href=\"#四、顺便提一提Flex\" class=\"headerlink\" title=\"四、顺便提一提Flex\"></a>四、顺便提一提Flex</h4><p>在IE上兼容很不理想，虽然其他浏览器灰常完美，但是没法···水桶的容量总是取决于最短的木板·····</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;    </div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    display: flex;</div><div class=\"line\">    flex-direction: row;/*         /column/*-reverse        */</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">    flex: 1;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160602220113363\" alt=\"这里写图片描述\"></p>\n<h4 id=\"五、line-height-height\"><a href=\"#五、line-height-height\" class=\"headerlink\" title=\"五、line-height==height\"></a>五、line-height==height</h4><p>其实无所谓line-height是否等于height，文字始终是在line-height垂直中间的</p>\n","excerpt":"<p>单行、table、absolute垂直居中和水平居中<br>","more":"</p>\n<h4 id=\"一-、table-cell\"><a href=\"#一-、table-cell\" class=\"headerlink\" title=\"一 、table-cell\"></a>一 、table-cell</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;     </div><div class=\"line\">\twidth: 1300px;</div><div class=\"line\">    height: 700px;</div><div class=\"line\">    display: table-cell;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    vertical-align: middle;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tdisplay:inline/block/inline-block;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>以上代码可使块级子元素水平垂直居中，为inline-block的子元素只能垂直居中，若也想其水平垂直居中确保在父元素样式中添加 text-align: center。<strong>关键必须设置其父元素固定宽高</strong>。即使有多个子元素也一样可以垂直水平居中。</p>\n<p>当子元素都为行内元素（行内元素不能包裹块级元素，所以就没有加img啦），效果和块级元素一样各成一行，我也觉得不可思议。<br><img src=\"http://img.blog.csdn.net/20160602212449220\" alt=\"这里写图片描述\"></p>\n<p>当子元素都为块级元素<br><img src=\"http://img.blog.csdn.net/20160602211731975\" alt=\"这里写图片描述\"></p>\n<p>当子元素都为行内块元素<br><img src=\"http://img.blog.csdn.net/20160602211834930\" alt=\"这里写图片描述\"><br>咳咳，看着他们乖乖的排列真开心啊~~~</p>\n<h4 id=\"二、CSS3-transform-absolute-（法一）\"><a href=\"#二、CSS3-transform-absolute-（法一）\" class=\"headerlink\" title=\"二、CSS3 transform+absolute （法一）\"></a>二、CSS3 transform+absolute （法一）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;     </div><div class=\"line\">\t    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">    left: 50%;</div><div class=\"line\">    top:50%;</div><div class=\"line\">    -webkit-transform: translate3D(-50%,-50%,0%);</div><div class=\"line\">    transform: translate3D(-50%,-50%,0%);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160602213920020\" alt=\"这里写图片描述\"></p>\n<p>优势在于不需要知道父元素和子元素的宽高。</p>\n<p>完美二维居中，屡试不爽，然，常在河边走，哪有不湿鞋···这玩意儿有时会导致其内部<strong>文字模糊</strong>···咳咳，死穴。搞搞图片啥的就行了。</p>\n<h4 id=\"三、CSS3-transform-absolute-（法二）\"><a href=\"#三、CSS3-transform-absolute-（法二）\" class=\"headerlink\" title=\"三、CSS3 transform+absolute （法二）\"></a>三、CSS3 transform+absolute （法二）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;    </div><div class=\"line\">\t\twidth: 100%;</div><div class=\"line\">        height: 100%; </div><div class=\"line\">\t    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">    left: 0;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    bottom: 0;</div><div class=\"line\">    margin: auto;</div><div class=\"line\">    width: 300px;</div><div class=\"line\">    height: 400px;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这样依然可以玩居中，而且不用担心兼容性问题，唯一麻烦些的也就是要<strong>确定子元素宽高</strong>。<br><img src=\"http://img.blog.csdn.net/20160602214953238\" alt=\"这里写图片描述\"></p>\n<h4 id=\"四、顺便提一提Flex\"><a href=\"#四、顺便提一提Flex\" class=\"headerlink\" title=\"四、顺便提一提Flex\"></a>四、顺便提一提Flex</h4><p>在IE上兼容很不理想，虽然其他浏览器灰常完美，但是没法···水桶的容量总是取决于最短的木板·····</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#container&#123;    </div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    display: flex;</div><div class=\"line\">    flex-direction: row;/*         /column/*-reverse        */</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">#center&#123;</div><div class=\"line\">    flex: 1;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20160602220113363\" alt=\"这里写图片描述\"></p>\n<h4 id=\"五、line-height-height\"><a href=\"#五、line-height-height\" class=\"headerlink\" title=\"五、line-height==height\"></a>五、line-height==height</h4><p>其实无所谓line-height是否等于height，文字始终是在line-height垂直中间的</p>"},{"title":"模块式开发的一些思考","date":"2017-03-16T14:13:56.000Z","_content":"反思最近模块式开发过程中遇到的问题，总结下自己对代码管理的心得。\n<!--more-->\n#### 我们为什么需要模块化编程\n\n- 规划功能代码块，增加代码复用率，降低代码量\n- 便于后期维护，便于二次优化及后续功能加强\n\n#### 如何进行功能模块分化\n\n自有古训，过犹不及。模块化管理代码固然优秀，但是需要把握细分程度，否则整个工程都在调用API，文件一堆有一堆，繁锁又鸡肋。\n举例来说：\n现在要开发一个用户注册模块，功能要求如下：\n\n- 用户名检查（长度5-12位，以字母开头，由数字、字母、下划线组成）\n- 邮箱检查\n- 密码检查（长度6-18位）\n- 二次密码是否一致检查\n\n\n功能模块分析：\n\n- 底层功能模块： validator模块（进行长度和二进制检查，符合规则返回对应flag）\n- 状态控制模块：active模块（不同的表示状态，显示检查通过状态信息）\n- 中间层调用模块： check模块（针对form表单的input元素进行check，调用validator，根据其返回结果调用active模块）\n\n#### 为什么要如此划分\n\n- validator不一定只用于注册检查，整个工程里需要进行筛选的功能都可以放在这里。相当于做了一个匹配库。甚至都不用自己写，github有很多这样的优秀功能库。大大减轻了开发难度。\n- 同样active也不一定只用于注册页，相当于自己的自定义动作库。针对自己工程里面的反应动作进行风格整合，按需调用。这里的优势在于，相似动作都在这个模块，修改需求及后期扩展功能都非常便捷，只需要找到这个文件进行多向开发即可，再也不用满js文件找方法啦~\n- 中间层，与MVC的C有异曲同工之妙。MVC中C的作用就是控制M层的数据走向，按规范传递数据到V层。这里的check就是将数据送入Validator检测中心，得到检测结果是有毒还是安全。再根据检测结果，调用Active做允许服用操作还是舍弃操作~","source":"_posts/模块式开发的一些思考.md","raw":"---\ntitle: 模块式开发的一些思考\ndate: 2017-03-16 22:13:56\ncategories: Programming\ntags: 思考\n---\n反思最近模块式开发过程中遇到的问题，总结下自己对代码管理的心得。\n<!--more-->\n#### 我们为什么需要模块化编程\n\n- 规划功能代码块，增加代码复用率，降低代码量\n- 便于后期维护，便于二次优化及后续功能加强\n\n#### 如何进行功能模块分化\n\n自有古训，过犹不及。模块化管理代码固然优秀，但是需要把握细分程度，否则整个工程都在调用API，文件一堆有一堆，繁锁又鸡肋。\n举例来说：\n现在要开发一个用户注册模块，功能要求如下：\n\n- 用户名检查（长度5-12位，以字母开头，由数字、字母、下划线组成）\n- 邮箱检查\n- 密码检查（长度6-18位）\n- 二次密码是否一致检查\n\n\n功能模块分析：\n\n- 底层功能模块： validator模块（进行长度和二进制检查，符合规则返回对应flag）\n- 状态控制模块：active模块（不同的表示状态，显示检查通过状态信息）\n- 中间层调用模块： check模块（针对form表单的input元素进行check，调用validator，根据其返回结果调用active模块）\n\n#### 为什么要如此划分\n\n- validator不一定只用于注册检查，整个工程里需要进行筛选的功能都可以放在这里。相当于做了一个匹配库。甚至都不用自己写，github有很多这样的优秀功能库。大大减轻了开发难度。\n- 同样active也不一定只用于注册页，相当于自己的自定义动作库。针对自己工程里面的反应动作进行风格整合，按需调用。这里的优势在于，相似动作都在这个模块，修改需求及后期扩展功能都非常便捷，只需要找到这个文件进行多向开发即可，再也不用满js文件找方法啦~\n- 中间层，与MVC的C有异曲同工之妙。MVC中C的作用就是控制M层的数据走向，按规范传递数据到V层。这里的check就是将数据送入Validator检测中心，得到检测结果是有毒还是安全。再根据检测结果，调用Active做允许服用操作还是舍弃操作~","slug":"模块式开发的一些思考","published":1,"updated":"2017-06-02T16:13:43.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx2zv0030doex00t2bq2s","content":"<p>反思最近模块式开发过程中遇到的问题，总结下自己对代码管理的心得。<br><a id=\"more\"></a></p>\n<h4 id=\"我们为什么需要模块化编程\"><a href=\"#我们为什么需要模块化编程\" class=\"headerlink\" title=\"我们为什么需要模块化编程\"></a>我们为什么需要模块化编程</h4><ul>\n<li>规划功能代码块，增加代码复用率，降低代码量</li>\n<li>便于后期维护，便于二次优化及后续功能加强</li>\n</ul>\n<h4 id=\"如何进行功能模块分化\"><a href=\"#如何进行功能模块分化\" class=\"headerlink\" title=\"如何进行功能模块分化\"></a>如何进行功能模块分化</h4><p>自有古训，过犹不及。模块化管理代码固然优秀，但是需要把握细分程度，否则整个工程都在调用API，文件一堆有一堆，繁锁又鸡肋。<br>举例来说：<br>现在要开发一个用户注册模块，功能要求如下：</p>\n<ul>\n<li>用户名检查（长度5-12位，以字母开头，由数字、字母、下划线组成）</li>\n<li>邮箱检查</li>\n<li>密码检查（长度6-18位）</li>\n<li>二次密码是否一致检查</li>\n</ul>\n<p>功能模块分析：</p>\n<ul>\n<li>底层功能模块： validator模块（进行长度和二进制检查，符合规则返回对应flag）</li>\n<li>状态控制模块：active模块（不同的表示状态，显示检查通过状态信息）</li>\n<li>中间层调用模块： check模块（针对form表单的input元素进行check，调用validator，根据其返回结果调用active模块）</li>\n</ul>\n<h4 id=\"为什么要如此划分\"><a href=\"#为什么要如此划分\" class=\"headerlink\" title=\"为什么要如此划分\"></a>为什么要如此划分</h4><ul>\n<li>validator不一定只用于注册检查，整个工程里需要进行筛选的功能都可以放在这里。相当于做了一个匹配库。甚至都不用自己写，github有很多这样的优秀功能库。大大减轻了开发难度。</li>\n<li>同样active也不一定只用于注册页，相当于自己的自定义动作库。针对自己工程里面的反应动作进行风格整合，按需调用。这里的优势在于，相似动作都在这个模块，修改需求及后期扩展功能都非常便捷，只需要找到这个文件进行多向开发即可，再也不用满js文件找方法啦~</li>\n<li>中间层，与MVC的C有异曲同工之妙。MVC中C的作用就是控制M层的数据走向，按规范传递数据到V层。这里的check就是将数据送入Validator检测中心，得到检测结果是有毒还是安全。再根据检测结果，调用Active做允许服用操作还是舍弃操作~</li>\n</ul>\n","excerpt":"<p>反思最近模块式开发过程中遇到的问题，总结下自己对代码管理的心得。<br>","more":"</p>\n<h4 id=\"我们为什么需要模块化编程\"><a href=\"#我们为什么需要模块化编程\" class=\"headerlink\" title=\"我们为什么需要模块化编程\"></a>我们为什么需要模块化编程</h4><ul>\n<li>规划功能代码块，增加代码复用率，降低代码量</li>\n<li>便于后期维护，便于二次优化及后续功能加强</li>\n</ul>\n<h4 id=\"如何进行功能模块分化\"><a href=\"#如何进行功能模块分化\" class=\"headerlink\" title=\"如何进行功能模块分化\"></a>如何进行功能模块分化</h4><p>自有古训，过犹不及。模块化管理代码固然优秀，但是需要把握细分程度，否则整个工程都在调用API，文件一堆有一堆，繁锁又鸡肋。<br>举例来说：<br>现在要开发一个用户注册模块，功能要求如下：</p>\n<ul>\n<li>用户名检查（长度5-12位，以字母开头，由数字、字母、下划线组成）</li>\n<li>邮箱检查</li>\n<li>密码检查（长度6-18位）</li>\n<li>二次密码是否一致检查</li>\n</ul>\n<p>功能模块分析：</p>\n<ul>\n<li>底层功能模块： validator模块（进行长度和二进制检查，符合规则返回对应flag）</li>\n<li>状态控制模块：active模块（不同的表示状态，显示检查通过状态信息）</li>\n<li>中间层调用模块： check模块（针对form表单的input元素进行check，调用validator，根据其返回结果调用active模块）</li>\n</ul>\n<h4 id=\"为什么要如此划分\"><a href=\"#为什么要如此划分\" class=\"headerlink\" title=\"为什么要如此划分\"></a>为什么要如此划分</h4><ul>\n<li>validator不一定只用于注册检查，整个工程里需要进行筛选的功能都可以放在这里。相当于做了一个匹配库。甚至都不用自己写，github有很多这样的优秀功能库。大大减轻了开发难度。</li>\n<li>同样active也不一定只用于注册页，相当于自己的自定义动作库。针对自己工程里面的反应动作进行风格整合，按需调用。这里的优势在于，相似动作都在这个模块，修改需求及后期扩展功能都非常便捷，只需要找到这个文件进行多向开发即可，再也不用满js文件找方法啦~</li>\n<li>中间层，与MVC的C有异曲同工之妙。MVC中C的作用就是控制M层的数据走向，按规范传递数据到V层。这里的check就是将数据送入Validator检测中心，得到检测结果是有毒还是安全。再根据检测结果，调用Active做允许服用操作还是舍弃操作~</li>\n</ul>"},{"title":"烂熟于心的客户端JavaScript","date":"2017-01-13T09:54:04.000Z","_content":"\n鄙人之见，客户端JavaScript才更为全面地诠释了JS诞生的真正意义。向客户提供更为灵活的交互服务，更大限度的无作用地做数据存取，与服务端交换数据，及页面间通信。毕竟Web才是JavaScript的主战场，即为前端，何不将客户端JS烂熟于心？\n<!--more-->\n## JavaScript的单线程模型\n客户端和服务端的JavaScript都采用了单线程的工作方式，确保两个事件处理程序不会同时进行，避免了所有多线程所要面对的诸如死锁，竞争条件等恼人的问题。这里简单阐述下，浏览器解析文档时，先创建dom树和render树，当遇到script标签时，解析将暂停，而去执行script标签中的代码。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。\n\n## JavaScript载入的时间线\n\n\n- Web浏览器创建Document对象，并且开始解析Web页面，解析HTML。在这个阶段document.readystate属性的值是\"loading\"。\n- 当HTML解析器遇到没有async和defer属性的＜script＞元素时，它把这些元素添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且**在脚本下载和执行时解析器会暂停**。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。\n- 当解析器遇到设置了async属性的＜script＞元素时，它开始下载脚本文本，并继续解析文档。脚本会在它下载完成后尽快执行，但是**解析器没有停下来**等它下载。\n- 当文档完成解析，document.readyState属性变成\"interactive\"。\n- 所有有defer属性的脚本，会按它们在文档的里的出现顺序执行。\n- 当所有内容完成载入时（包括图片），并且所有异步脚本完成载入和执行，document.readyState属性改变为\"complete\"，Web浏览器触发Window对象上的load事件。\n- 从此刻起，会调用异步事件，以异步响应用户输入事件、网络事件、计时器过期等。从事件注册阶段进入事件驱动阶段。\n\n## 怪异模式和标准模式\nMicrosoft在发布IE6的时候，增加了IE5里没有的很多CSS标准特性。但为了确保与已有Web内容的后向兼容性，它定义了这两种不同的渲染模式。`＜!DOCTYPE html＞`中的DOCTYPE就是告诉浏览器以标准模式渲染文档，如果这个值被缺省，将导致文档以怪异模式进行渲染。\n如需知道文档以何种模式进行渲染，只需要检查document.compatMode属性\n- CSS1Compat 标准模式\n- BackCompat or undefined 怪异模式\n\n## 浏览器种类\n浏览器厂商很多，所提供的浏览器类型和版本也不同，我们时常需要对浏览器类型和版本进行检测这里需要用到Navigator.\n\n## 同源策略\n同源策略是对JavaScript代码能够操作哪些Web内容的一条完整的安全限制文档的来源包含协议、主机，以及载入文档的URL端口。\n- 从不同Web服务器载入的文档具有不同的来源。\n- 通过同一主机的不同端口载入的文档具有不同的来源。\n- 使用http:协议载入的文档和使用https:协议载入的文档具有不同的来源。\n\n不严格同源：\n- 两个二级子域想要相互访问，可设置document.domain属性为顶级域\n- 跨域资源共享CORS（Cross-Origin Resource Sharing),服务器用头信息显式地列出源，或使用通配符来匹配所有的源并允许由任何地址请求文件。\n- 跨文档消息（cross-document messaging），允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，而不管脚本的来源是否不同。例如调用Window对象上的postMessage()方法，可以异步传递消息事件（可以用onmessage事件句处理程序函数来处理它）到窗口的文档里。\n\n其他跨域通信：\n- 借用`<script>`发送HTTP请求，JSONP;\n- 服务器转发;\n\n## Web安全相关，XSS及拒绝服务攻击\n- XSS也就是跨站脚本（Cross-site scripting），即攻击者向目标Web站点注入HTML标签引用其他站点的恶意脚本实施攻击。如果Web页面动态地产生文档内容，且没有对嵌入的HTML标签进行安全排查，那么这个Web页面很容易遭到跨站脚本攻击。解决方案即对所有嵌入的内容进行“消毒”，采用正则匹配等方式，移除HTML标签的尖括号。\n- 拒绝服务攻击，即恶意网站通过使用window.setInterval()这样的方法来占用CPU，导致系统内存不足，拒绝服务。拒绝服务最可能发生在跨站攻击的基础上，毕竟谁会傻乎乎的给自己的网站搞个拒绝服务攻击，这样谁还会再次访问这样一个问题网站？\n\n## 解析URL\n实际开发过程中，经常需要通过解析URL与服务器通信。这里就必须用到Location对象的search属性。\n```\nfunction urlArgs(){\n\tvar args={};//定义一个空对象\n\tvar query=location.search.substring(1);//查找到查询串，并去掉'?'\n\tvar pairs=query.split(\"＆\");//根据\"＆\"符号将查询字符串分隔为片段\n\tfor(var i=0;i<pairs.length;i++){//对于每个片段\n\t\tvar pos=pairs[i].indexOf('=');//查找\"name=value\"\n\t\tif(pos==-1)continue;//如果没有找到的话，就跳过\n\t\tvar name=pairs[i].substring(0,pos);//提取name\n\t\tvar value=pairs[i].substring(pos+1);//提取value\n\t\tvalue=decodeURIComponent(value);//对value进行解码\n\t\targs[name]=value;//存储为属性\n\t}\n\treturn args;//返回解析后的参数\n}\n```\n\n## 事件驱动\n理解客服端JavaScript的事件机制是学习客户端JavaScript非常重要的一部分。其实W3C标准事件机制本身并不复杂，只是由于Microsoft对IE的“特别定制”，搞得JavaScript程序员比较痛苦。以下称使用addEventListener注册的事件为标准，使用attachEvent注册的事件为IE。\n关注下事件机制运作中的重要部分：\n- addEventListener及attachEvent。IE8及之前的IE版本只支持attachEvent，其作用与addEventListener一致，只是参数及运作机制部分有差异;\n\t- 注册次数差异。addEventListener不允许相同事件反复注册，即使变换顺序也只能注册一次，而attachEvent则允许多次注册同名事件;\n\t- 参数差异。addEventListener的第一个参数为传入注册事件type，attachEvent第一个参数值应为“on”+type。第二个参数都是事件处理程序。addEventListener第三个参数为bool值，默认false，规定事件处理程序在事件传播冒泡阶段执行，由于IE没有捕获阶段，故没有第三个参数;\n\t- 执行顺序差异。 addEventListener将会按照事件注册顺序依次执行，而attachEvent则不确定;\n\t- 执行目标差异。使用addEventListener注册的事件，调用的处理程序使用事件目标作为它们的this值。而attachEvent注册的事件的this值是全局对象，需要通过`handler.call(target,event)`来重新绑定this到调用处理程序使用的事件目标;\n\n- 事件传播。事件传播分为三个阶段\n\t- 事件捕获（由父级向子级传播，IE没有这个阶段）;\n\t- 目标对象本身的事件处理程序调用;\n\t- 事件冒泡（由子级向父级传播）;\n- 阻止事件传播\n\t- 标准:调用event.stopPropagation();\n\t- IE:event.cancelBubble属性赋值为true;\n- 事件处理程序作用域。（与普通函数一样，作用域依赖于函数在哪里定义而不是在哪里调用）\n- 事件取消。（阻止默认事件）\n\t- 标准：调用event.preventDefault();\n\t- IE:event.returnValue赋值为false;\n\t- 属性注册事件：直接返回false;\n- 事件移除\n\t- 标准：在事件目标上调用removeEventListener();\n\t- IE：在事件目标上调用detachEvent()方法;","source":"_posts/烂熟于心的客户端Javascript.md","raw":"---\ntitle: 烂熟于心的客户端JavaScript\ndate: 2017-01-13 17:54:04\ncategories: JavaScript\ntags: JavaScript\n\n---\n\n鄙人之见，客户端JavaScript才更为全面地诠释了JS诞生的真正意义。向客户提供更为灵活的交互服务，更大限度的无作用地做数据存取，与服务端交换数据，及页面间通信。毕竟Web才是JavaScript的主战场，即为前端，何不将客户端JS烂熟于心？\n<!--more-->\n## JavaScript的单线程模型\n客户端和服务端的JavaScript都采用了单线程的工作方式，确保两个事件处理程序不会同时进行，避免了所有多线程所要面对的诸如死锁，竞争条件等恼人的问题。这里简单阐述下，浏览器解析文档时，先创建dom树和render树，当遇到script标签时，解析将暂停，而去执行script标签中的代码。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。\n\n## JavaScript载入的时间线\n\n\n- Web浏览器创建Document对象，并且开始解析Web页面，解析HTML。在这个阶段document.readystate属性的值是\"loading\"。\n- 当HTML解析器遇到没有async和defer属性的＜script＞元素时，它把这些元素添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且**在脚本下载和执行时解析器会暂停**。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。\n- 当解析器遇到设置了async属性的＜script＞元素时，它开始下载脚本文本，并继续解析文档。脚本会在它下载完成后尽快执行，但是**解析器没有停下来**等它下载。\n- 当文档完成解析，document.readyState属性变成\"interactive\"。\n- 所有有defer属性的脚本，会按它们在文档的里的出现顺序执行。\n- 当所有内容完成载入时（包括图片），并且所有异步脚本完成载入和执行，document.readyState属性改变为\"complete\"，Web浏览器触发Window对象上的load事件。\n- 从此刻起，会调用异步事件，以异步响应用户输入事件、网络事件、计时器过期等。从事件注册阶段进入事件驱动阶段。\n\n## 怪异模式和标准模式\nMicrosoft在发布IE6的时候，增加了IE5里没有的很多CSS标准特性。但为了确保与已有Web内容的后向兼容性，它定义了这两种不同的渲染模式。`＜!DOCTYPE html＞`中的DOCTYPE就是告诉浏览器以标准模式渲染文档，如果这个值被缺省，将导致文档以怪异模式进行渲染。\n如需知道文档以何种模式进行渲染，只需要检查document.compatMode属性\n- CSS1Compat 标准模式\n- BackCompat or undefined 怪异模式\n\n## 浏览器种类\n浏览器厂商很多，所提供的浏览器类型和版本也不同，我们时常需要对浏览器类型和版本进行检测这里需要用到Navigator.\n\n## 同源策略\n同源策略是对JavaScript代码能够操作哪些Web内容的一条完整的安全限制文档的来源包含协议、主机，以及载入文档的URL端口。\n- 从不同Web服务器载入的文档具有不同的来源。\n- 通过同一主机的不同端口载入的文档具有不同的来源。\n- 使用http:协议载入的文档和使用https:协议载入的文档具有不同的来源。\n\n不严格同源：\n- 两个二级子域想要相互访问，可设置document.domain属性为顶级域\n- 跨域资源共享CORS（Cross-Origin Resource Sharing),服务器用头信息显式地列出源，或使用通配符来匹配所有的源并允许由任何地址请求文件。\n- 跨文档消息（cross-document messaging），允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，而不管脚本的来源是否不同。例如调用Window对象上的postMessage()方法，可以异步传递消息事件（可以用onmessage事件句处理程序函数来处理它）到窗口的文档里。\n\n其他跨域通信：\n- 借用`<script>`发送HTTP请求，JSONP;\n- 服务器转发;\n\n## Web安全相关，XSS及拒绝服务攻击\n- XSS也就是跨站脚本（Cross-site scripting），即攻击者向目标Web站点注入HTML标签引用其他站点的恶意脚本实施攻击。如果Web页面动态地产生文档内容，且没有对嵌入的HTML标签进行安全排查，那么这个Web页面很容易遭到跨站脚本攻击。解决方案即对所有嵌入的内容进行“消毒”，采用正则匹配等方式，移除HTML标签的尖括号。\n- 拒绝服务攻击，即恶意网站通过使用window.setInterval()这样的方法来占用CPU，导致系统内存不足，拒绝服务。拒绝服务最可能发生在跨站攻击的基础上，毕竟谁会傻乎乎的给自己的网站搞个拒绝服务攻击，这样谁还会再次访问这样一个问题网站？\n\n## 解析URL\n实际开发过程中，经常需要通过解析URL与服务器通信。这里就必须用到Location对象的search属性。\n```\nfunction urlArgs(){\n\tvar args={};//定义一个空对象\n\tvar query=location.search.substring(1);//查找到查询串，并去掉'?'\n\tvar pairs=query.split(\"＆\");//根据\"＆\"符号将查询字符串分隔为片段\n\tfor(var i=0;i<pairs.length;i++){//对于每个片段\n\t\tvar pos=pairs[i].indexOf('=');//查找\"name=value\"\n\t\tif(pos==-1)continue;//如果没有找到的话，就跳过\n\t\tvar name=pairs[i].substring(0,pos);//提取name\n\t\tvar value=pairs[i].substring(pos+1);//提取value\n\t\tvalue=decodeURIComponent(value);//对value进行解码\n\t\targs[name]=value;//存储为属性\n\t}\n\treturn args;//返回解析后的参数\n}\n```\n\n## 事件驱动\n理解客服端JavaScript的事件机制是学习客户端JavaScript非常重要的一部分。其实W3C标准事件机制本身并不复杂，只是由于Microsoft对IE的“特别定制”，搞得JavaScript程序员比较痛苦。以下称使用addEventListener注册的事件为标准，使用attachEvent注册的事件为IE。\n关注下事件机制运作中的重要部分：\n- addEventListener及attachEvent。IE8及之前的IE版本只支持attachEvent，其作用与addEventListener一致，只是参数及运作机制部分有差异;\n\t- 注册次数差异。addEventListener不允许相同事件反复注册，即使变换顺序也只能注册一次，而attachEvent则允许多次注册同名事件;\n\t- 参数差异。addEventListener的第一个参数为传入注册事件type，attachEvent第一个参数值应为“on”+type。第二个参数都是事件处理程序。addEventListener第三个参数为bool值，默认false，规定事件处理程序在事件传播冒泡阶段执行，由于IE没有捕获阶段，故没有第三个参数;\n\t- 执行顺序差异。 addEventListener将会按照事件注册顺序依次执行，而attachEvent则不确定;\n\t- 执行目标差异。使用addEventListener注册的事件，调用的处理程序使用事件目标作为它们的this值。而attachEvent注册的事件的this值是全局对象，需要通过`handler.call(target,event)`来重新绑定this到调用处理程序使用的事件目标;\n\n- 事件传播。事件传播分为三个阶段\n\t- 事件捕获（由父级向子级传播，IE没有这个阶段）;\n\t- 目标对象本身的事件处理程序调用;\n\t- 事件冒泡（由子级向父级传播）;\n- 阻止事件传播\n\t- 标准:调用event.stopPropagation();\n\t- IE:event.cancelBubble属性赋值为true;\n- 事件处理程序作用域。（与普通函数一样，作用域依赖于函数在哪里定义而不是在哪里调用）\n- 事件取消。（阻止默认事件）\n\t- 标准：调用event.preventDefault();\n\t- IE:event.returnValue赋值为false;\n\t- 属性注册事件：直接返回false;\n- 事件移除\n\t- 标准：在事件目标上调用removeEventListener();\n\t- IE：在事件目标上调用detachEvent()方法;","slug":"烂熟于心的客户端Javascript","published":1,"updated":"2017-06-02T16:13:37.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3imx3000035doexxa3a2w0x","content":"<p>鄙人之见，客户端JavaScript才更为全面地诠释了JS诞生的真正意义。向客户提供更为灵活的交互服务，更大限度的无作用地做数据存取，与服务端交换数据，及页面间通信。毕竟Web才是JavaScript的主战场，即为前端，何不将客户端JS烂熟于心？<br><a id=\"more\"></a></p>\n<h2 id=\"JavaScript的单线程模型\"><a href=\"#JavaScript的单线程模型\" class=\"headerlink\" title=\"JavaScript的单线程模型\"></a>JavaScript的单线程模型</h2><p>客户端和服务端的JavaScript都采用了单线程的工作方式，确保两个事件处理程序不会同时进行，避免了所有多线程所要面对的诸如死锁，竞争条件等恼人的问题。这里简单阐述下，浏览器解析文档时，先创建dom树和render树，当遇到script标签时，解析将暂停，而去执行script标签中的代码。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。</p>\n<h2 id=\"JavaScript载入的时间线\"><a href=\"#JavaScript载入的时间线\" class=\"headerlink\" title=\"JavaScript载入的时间线\"></a>JavaScript载入的时间线</h2><ul>\n<li>Web浏览器创建Document对象，并且开始解析Web页面，解析HTML。在这个阶段document.readystate属性的值是”loading”。</li>\n<li>当HTML解析器遇到没有async和defer属性的＜script＞元素时，它把这些元素添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且<strong>在脚本下载和执行时解析器会暂停</strong>。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。</li>\n<li>当解析器遇到设置了async属性的＜script＞元素时，它开始下载脚本文本，并继续解析文档。脚本会在它下载完成后尽快执行，但是<strong>解析器没有停下来</strong>等它下载。</li>\n<li>当文档完成解析，document.readyState属性变成”interactive”。</li>\n<li>所有有defer属性的脚本，会按它们在文档的里的出现顺序执行。</li>\n<li>当所有内容完成载入时（包括图片），并且所有异步脚本完成载入和执行，document.readyState属性改变为”complete”，Web浏览器触发Window对象上的load事件。</li>\n<li>从此刻起，会调用异步事件，以异步响应用户输入事件、网络事件、计时器过期等。从事件注册阶段进入事件驱动阶段。</li>\n</ul>\n<h2 id=\"怪异模式和标准模式\"><a href=\"#怪异模式和标准模式\" class=\"headerlink\" title=\"怪异模式和标准模式\"></a>怪异模式和标准模式</h2><p>Microsoft在发布IE6的时候，增加了IE5里没有的很多CSS标准特性。但为了确保与已有Web内容的后向兼容性，它定义了这两种不同的渲染模式。<code>＜!DOCTYPE html＞</code>中的DOCTYPE就是告诉浏览器以标准模式渲染文档，如果这个值被缺省，将导致文档以怪异模式进行渲染。<br>如需知道文档以何种模式进行渲染，只需要检查document.compatMode属性</p>\n<ul>\n<li>CSS1Compat 标准模式</li>\n<li>BackCompat or undefined 怪异模式</li>\n</ul>\n<h2 id=\"浏览器种类\"><a href=\"#浏览器种类\" class=\"headerlink\" title=\"浏览器种类\"></a>浏览器种类</h2><p>浏览器厂商很多，所提供的浏览器类型和版本也不同，我们时常需要对浏览器类型和版本进行检测这里需要用到Navigator.</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>同源策略是对JavaScript代码能够操作哪些Web内容的一条完整的安全限制文档的来源包含协议、主机，以及载入文档的URL端口。</p>\n<ul>\n<li>从不同Web服务器载入的文档具有不同的来源。</li>\n<li>通过同一主机的不同端口载入的文档具有不同的来源。</li>\n<li>使用http:协议载入的文档和使用https:协议载入的文档具有不同的来源。</li>\n</ul>\n<p>不严格同源：</p>\n<ul>\n<li>两个二级子域想要相互访问，可设置document.domain属性为顶级域</li>\n<li>跨域资源共享CORS（Cross-Origin Resource Sharing),服务器用头信息显式地列出源，或使用通配符来匹配所有的源并允许由任何地址请求文件。</li>\n<li>跨文档消息（cross-document messaging），允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，而不管脚本的来源是否不同。例如调用Window对象上的postMessage()方法，可以异步传递消息事件（可以用onmessage事件句处理程序函数来处理它）到窗口的文档里。</li>\n</ul>\n<p>其他跨域通信：</p>\n<ul>\n<li>借用<code>&lt;script&gt;</code>发送HTTP请求，JSONP;</li>\n<li>服务器转发;</li>\n</ul>\n<h2 id=\"Web安全相关，XSS及拒绝服务攻击\"><a href=\"#Web安全相关，XSS及拒绝服务攻击\" class=\"headerlink\" title=\"Web安全相关，XSS及拒绝服务攻击\"></a>Web安全相关，XSS及拒绝服务攻击</h2><ul>\n<li>XSS也就是跨站脚本（Cross-site scripting），即攻击者向目标Web站点注入HTML标签引用其他站点的恶意脚本实施攻击。如果Web页面动态地产生文档内容，且没有对嵌入的HTML标签进行安全排查，那么这个Web页面很容易遭到跨站脚本攻击。解决方案即对所有嵌入的内容进行“消毒”，采用正则匹配等方式，移除HTML标签的尖括号。</li>\n<li>拒绝服务攻击，即恶意网站通过使用window.setInterval()这样的方法来占用CPU，导致系统内存不足，拒绝服务。拒绝服务最可能发生在跨站攻击的基础上，毕竟谁会傻乎乎的给自己的网站搞个拒绝服务攻击，这样谁还会再次访问这样一个问题网站？</li>\n</ul>\n<h2 id=\"解析URL\"><a href=\"#解析URL\" class=\"headerlink\" title=\"解析URL\"></a>解析URL</h2><p>实际开发过程中，经常需要通过解析URL与服务器通信。这里就必须用到Location对象的search属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function urlArgs()&#123;</div><div class=\"line\">\tvar args=&#123;&#125;;//定义一个空对象</div><div class=\"line\">\tvar query=location.search.substring(1);//查找到查询串，并去掉&apos;?&apos;</div><div class=\"line\">\tvar pairs=query.split(&quot;＆&quot;);//根据&quot;＆&quot;符号将查询字符串分隔为片段</div><div class=\"line\">\tfor(var i=0;i&lt;pairs.length;i++)&#123;//对于每个片段</div><div class=\"line\">\t\tvar pos=pairs[i].indexOf(&apos;=&apos;);//查找&quot;name=value&quot;</div><div class=\"line\">\t\tif(pos==-1)continue;//如果没有找到的话，就跳过</div><div class=\"line\">\t\tvar name=pairs[i].substring(0,pos);//提取name</div><div class=\"line\">\t\tvar value=pairs[i].substring(pos+1);//提取value</div><div class=\"line\">\t\tvalue=decodeURIComponent(value);//对value进行解码</div><div class=\"line\">\t\targs[name]=value;//存储为属性</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn args;//返回解析后的参数</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"事件驱动\"><a href=\"#事件驱动\" class=\"headerlink\" title=\"事件驱动\"></a>事件驱动</h2><p>理解客服端JavaScript的事件机制是学习客户端JavaScript非常重要的一部分。其实W3C标准事件机制本身并不复杂，只是由于Microsoft对IE的“特别定制”，搞得JavaScript程序员比较痛苦。以下称使用addEventListener注册的事件为标准，使用attachEvent注册的事件为IE。<br>关注下事件机制运作中的重要部分：</p>\n<ul>\n<li><p>addEventListener及attachEvent。IE8及之前的IE版本只支持attachEvent，其作用与addEventListener一致，只是参数及运作机制部分有差异;</p>\n<ul>\n<li>注册次数差异。addEventListener不允许相同事件反复注册，即使变换顺序也只能注册一次，而attachEvent则允许多次注册同名事件;</li>\n<li>参数差异。addEventListener的第一个参数为传入注册事件type，attachEvent第一个参数值应为“on”+type。第二个参数都是事件处理程序。addEventListener第三个参数为bool值，默认false，规定事件处理程序在事件传播冒泡阶段执行，由于IE没有捕获阶段，故没有第三个参数;</li>\n<li>执行顺序差异。 addEventListener将会按照事件注册顺序依次执行，而attachEvent则不确定;</li>\n<li>执行目标差异。使用addEventListener注册的事件，调用的处理程序使用事件目标作为它们的this值。而attachEvent注册的事件的this值是全局对象，需要通过<code>handler.call(target,event)</code>来重新绑定this到调用处理程序使用的事件目标;</li>\n</ul>\n</li>\n<li><p>事件传播。事件传播分为三个阶段</p>\n<ul>\n<li>事件捕获（由父级向子级传播，IE没有这个阶段）;</li>\n<li>目标对象本身的事件处理程序调用;</li>\n<li>事件冒泡（由子级向父级传播）;</li>\n</ul>\n</li>\n<li>阻止事件传播<ul>\n<li>标准:调用event.stopPropagation();</li>\n<li>IE:event.cancelBubble属性赋值为true;</li>\n</ul>\n</li>\n<li>事件处理程序作用域。（与普通函数一样，作用域依赖于函数在哪里定义而不是在哪里调用）</li>\n<li>事件取消。（阻止默认事件）<ul>\n<li>标准：调用event.preventDefault();</li>\n<li>IE:event.returnValue赋值为false;</li>\n<li>属性注册事件：直接返回false;</li>\n</ul>\n</li>\n<li>事件移除<ul>\n<li>标准：在事件目标上调用removeEventListener();</li>\n<li>IE：在事件目标上调用detachEvent()方法;</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<p>鄙人之见，客户端JavaScript才更为全面地诠释了JS诞生的真正意义。向客户提供更为灵活的交互服务，更大限度的无作用地做数据存取，与服务端交换数据，及页面间通信。毕竟Web才是JavaScript的主战场，即为前端，何不将客户端JS烂熟于心？<br>","more":"</p>\n<h2 id=\"JavaScript的单线程模型\"><a href=\"#JavaScript的单线程模型\" class=\"headerlink\" title=\"JavaScript的单线程模型\"></a>JavaScript的单线程模型</h2><p>客户端和服务端的JavaScript都采用了单线程的工作方式，确保两个事件处理程序不会同时进行，避免了所有多线程所要面对的诸如死锁，竞争条件等恼人的问题。这里简单阐述下，浏览器解析文档时，先创建dom树和render树，当遇到script标签时，解析将暂停，而去执行script标签中的代码。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。</p>\n<h2 id=\"JavaScript载入的时间线\"><a href=\"#JavaScript载入的时间线\" class=\"headerlink\" title=\"JavaScript载入的时间线\"></a>JavaScript载入的时间线</h2><ul>\n<li>Web浏览器创建Document对象，并且开始解析Web页面，解析HTML。在这个阶段document.readystate属性的值是”loading”。</li>\n<li>当HTML解析器遇到没有async和defer属性的＜script＞元素时，它把这些元素添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且<strong>在脚本下载和执行时解析器会暂停</strong>。如果外部文件载入顺序不合理，这个阶段容易出现FOUC(Flash Of Unstyle Content)。</li>\n<li>当解析器遇到设置了async属性的＜script＞元素时，它开始下载脚本文本，并继续解析文档。脚本会在它下载完成后尽快执行，但是<strong>解析器没有停下来</strong>等它下载。</li>\n<li>当文档完成解析，document.readyState属性变成”interactive”。</li>\n<li>所有有defer属性的脚本，会按它们在文档的里的出现顺序执行。</li>\n<li>当所有内容完成载入时（包括图片），并且所有异步脚本完成载入和执行，document.readyState属性改变为”complete”，Web浏览器触发Window对象上的load事件。</li>\n<li>从此刻起，会调用异步事件，以异步响应用户输入事件、网络事件、计时器过期等。从事件注册阶段进入事件驱动阶段。</li>\n</ul>\n<h2 id=\"怪异模式和标准模式\"><a href=\"#怪异模式和标准模式\" class=\"headerlink\" title=\"怪异模式和标准模式\"></a>怪异模式和标准模式</h2><p>Microsoft在发布IE6的时候，增加了IE5里没有的很多CSS标准特性。但为了确保与已有Web内容的后向兼容性，它定义了这两种不同的渲染模式。<code>＜!DOCTYPE html＞</code>中的DOCTYPE就是告诉浏览器以标准模式渲染文档，如果这个值被缺省，将导致文档以怪异模式进行渲染。<br>如需知道文档以何种模式进行渲染，只需要检查document.compatMode属性</p>\n<ul>\n<li>CSS1Compat 标准模式</li>\n<li>BackCompat or undefined 怪异模式</li>\n</ul>\n<h2 id=\"浏览器种类\"><a href=\"#浏览器种类\" class=\"headerlink\" title=\"浏览器种类\"></a>浏览器种类</h2><p>浏览器厂商很多，所提供的浏览器类型和版本也不同，我们时常需要对浏览器类型和版本进行检测这里需要用到Navigator.</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>同源策略是对JavaScript代码能够操作哪些Web内容的一条完整的安全限制文档的来源包含协议、主机，以及载入文档的URL端口。</p>\n<ul>\n<li>从不同Web服务器载入的文档具有不同的来源。</li>\n<li>通过同一主机的不同端口载入的文档具有不同的来源。</li>\n<li>使用http:协议载入的文档和使用https:协议载入的文档具有不同的来源。</li>\n</ul>\n<p>不严格同源：</p>\n<ul>\n<li>两个二级子域想要相互访问，可设置document.domain属性为顶级域</li>\n<li>跨域资源共享CORS（Cross-Origin Resource Sharing),服务器用头信息显式地列出源，或使用通配符来匹配所有的源并允许由任何地址请求文件。</li>\n<li>跨文档消息（cross-document messaging），允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，而不管脚本的来源是否不同。例如调用Window对象上的postMessage()方法，可以异步传递消息事件（可以用onmessage事件句处理程序函数来处理它）到窗口的文档里。</li>\n</ul>\n<p>其他跨域通信：</p>\n<ul>\n<li>借用<code>&lt;script&gt;</code>发送HTTP请求，JSONP;</li>\n<li>服务器转发;</li>\n</ul>\n<h2 id=\"Web安全相关，XSS及拒绝服务攻击\"><a href=\"#Web安全相关，XSS及拒绝服务攻击\" class=\"headerlink\" title=\"Web安全相关，XSS及拒绝服务攻击\"></a>Web安全相关，XSS及拒绝服务攻击</h2><ul>\n<li>XSS也就是跨站脚本（Cross-site scripting），即攻击者向目标Web站点注入HTML标签引用其他站点的恶意脚本实施攻击。如果Web页面动态地产生文档内容，且没有对嵌入的HTML标签进行安全排查，那么这个Web页面很容易遭到跨站脚本攻击。解决方案即对所有嵌入的内容进行“消毒”，采用正则匹配等方式，移除HTML标签的尖括号。</li>\n<li>拒绝服务攻击，即恶意网站通过使用window.setInterval()这样的方法来占用CPU，导致系统内存不足，拒绝服务。拒绝服务最可能发生在跨站攻击的基础上，毕竟谁会傻乎乎的给自己的网站搞个拒绝服务攻击，这样谁还会再次访问这样一个问题网站？</li>\n</ul>\n<h2 id=\"解析URL\"><a href=\"#解析URL\" class=\"headerlink\" title=\"解析URL\"></a>解析URL</h2><p>实际开发过程中，经常需要通过解析URL与服务器通信。这里就必须用到Location对象的search属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function urlArgs()&#123;</div><div class=\"line\">\tvar args=&#123;&#125;;//定义一个空对象</div><div class=\"line\">\tvar query=location.search.substring(1);//查找到查询串，并去掉&apos;?&apos;</div><div class=\"line\">\tvar pairs=query.split(&quot;＆&quot;);//根据&quot;＆&quot;符号将查询字符串分隔为片段</div><div class=\"line\">\tfor(var i=0;i&lt;pairs.length;i++)&#123;//对于每个片段</div><div class=\"line\">\t\tvar pos=pairs[i].indexOf(&apos;=&apos;);//查找&quot;name=value&quot;</div><div class=\"line\">\t\tif(pos==-1)continue;//如果没有找到的话，就跳过</div><div class=\"line\">\t\tvar name=pairs[i].substring(0,pos);//提取name</div><div class=\"line\">\t\tvar value=pairs[i].substring(pos+1);//提取value</div><div class=\"line\">\t\tvalue=decodeURIComponent(value);//对value进行解码</div><div class=\"line\">\t\targs[name]=value;//存储为属性</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn args;//返回解析后的参数</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"事件驱动\"><a href=\"#事件驱动\" class=\"headerlink\" title=\"事件驱动\"></a>事件驱动</h2><p>理解客服端JavaScript的事件机制是学习客户端JavaScript非常重要的一部分。其实W3C标准事件机制本身并不复杂，只是由于Microsoft对IE的“特别定制”，搞得JavaScript程序员比较痛苦。以下称使用addEventListener注册的事件为标准，使用attachEvent注册的事件为IE。<br>关注下事件机制运作中的重要部分：</p>\n<ul>\n<li><p>addEventListener及attachEvent。IE8及之前的IE版本只支持attachEvent，其作用与addEventListener一致，只是参数及运作机制部分有差异;</p>\n<ul>\n<li>注册次数差异。addEventListener不允许相同事件反复注册，即使变换顺序也只能注册一次，而attachEvent则允许多次注册同名事件;</li>\n<li>参数差异。addEventListener的第一个参数为传入注册事件type，attachEvent第一个参数值应为“on”+type。第二个参数都是事件处理程序。addEventListener第三个参数为bool值，默认false，规定事件处理程序在事件传播冒泡阶段执行，由于IE没有捕获阶段，故没有第三个参数;</li>\n<li>执行顺序差异。 addEventListener将会按照事件注册顺序依次执行，而attachEvent则不确定;</li>\n<li>执行目标差异。使用addEventListener注册的事件，调用的处理程序使用事件目标作为它们的this值。而attachEvent注册的事件的this值是全局对象，需要通过<code>handler.call(target,event)</code>来重新绑定this到调用处理程序使用的事件目标;</li>\n</ul>\n</li>\n<li><p>事件传播。事件传播分为三个阶段</p>\n<ul>\n<li>事件捕获（由父级向子级传播，IE没有这个阶段）;</li>\n<li>目标对象本身的事件处理程序调用;</li>\n<li>事件冒泡（由子级向父级传播）;</li>\n</ul>\n</li>\n<li>阻止事件传播<ul>\n<li>标准:调用event.stopPropagation();</li>\n<li>IE:event.cancelBubble属性赋值为true;</li>\n</ul>\n</li>\n<li>事件处理程序作用域。（与普通函数一样，作用域依赖于函数在哪里定义而不是在哪里调用）</li>\n<li>事件取消。（阻止默认事件）<ul>\n<li>标准：调用event.preventDefault();</li>\n<li>IE:event.returnValue赋值为false;</li>\n<li>属性注册事件：直接返回false;</li>\n</ul>\n</li>\n<li>事件移除<ul>\n<li>标准：在事件目标上调用removeEventListener();</li>\n<li>IE：在事件目标上调用detachEvent()方法;</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3imx2vw0001doex9dnd3c18","category_id":"cj3imx2we0005doex29s0ocrq","_id":"cj3imx2ww000fdoex9jloe82x"},{"post_id":"cj3imx2w60003doexfhiz3hdz","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2x9000ldoexhldcn0zj"},{"post_id":"cj3imx2wg0007doexe940cv9w","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2xf000rdoex91uc9qwb"},{"post_id":"cj3imx2x1000jdoexi6kl860l","category_id":"cj3imx2xb000ndoex4jj22f61","_id":"cj3imx2xm000ydoexi0d5l9y8"},{"post_id":"cj3imx2xk000wdoexe1yvioci","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2xr0014doex4w0a3k75"},{"post_id":"cj3imx2x6000kdoex1di3txbp","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2xw0019doexfmz518zx"},{"post_id":"cj3imx2xm000zdoexdedzdlvl","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2y3001cdoexsb81ac7e"},{"post_id":"cj3imx2xp0012doex7uc2z7cy","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2y8001hdoexjclbrn5z"},{"post_id":"cj3imx2xc000odoexb37slupg","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2yb001kdoexyfulyu4d"},{"post_id":"cj3imx2xs0016doexpdfeyoym","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2yg001odoexylu662qh"},{"post_id":"cj3imx2xy001adoex2w7e4vx2","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2yj001rdoexfre7hgpe"},{"post_id":"cj3imx2xe000qdoexiro58km9","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2ym001vdoex0kzcqvje"},{"post_id":"cj3imx2y4001ddoexngf8ef3k","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2yo001ydoex1h0fgweg"},{"post_id":"cj3imx2y8001idoexa0nkf60g","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2yu0022doexdj9fgbp6"},{"post_id":"cj3imx2xi000udoexf85ta0l2","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2yy0025doexsvggqg0j"},{"post_id":"cj3imx2yc001ldoexuoxwcedd","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2z00029doex0hnhz5n5"},{"post_id":"cj3imx2yh001pdoexm86zslqe","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2z3002cdoexv1wcafjo"},{"post_id":"cj3imx2yj001sdoex09wbs25c","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2z5002gdoexmwlwk3lg"},{"post_id":"cj3imx2yn001wdoexhldjt5bz","category_id":"cj3imx2ws000bdoexqb8hevfy","_id":"cj3imx2zb002kdoexrite9kr5"},{"post_id":"cj3imx2yp001zdoexntfy212u","category_id":"cj3imx2we0005doex29s0ocrq","_id":"cj3imx2zf002odoexhl9zso5q"},{"post_id":"cj3imx2yy0026doex0t2f7uor","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2zh002rdoexdh1p7xju"},{"post_id":"cj3imx2zc002ldoexqdops05r","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2zk002vdoexdogjsnh6"},{"post_id":"cj3imx2z3002ddoexedv2m6ue","category_id":"cj3imx2zb002jdoexdt57ip4f","_id":"cj3imx2zv002zdoex96y013je"},{"post_id":"cj3imx2zh002sdoex4tycq9yd","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx2zz0033doexex7ntccr"},{"post_id":"cj3imx2z6002hdoexcs8l5thz","category_id":"cj3imx2zb002jdoexdt57ip4f","_id":"cj3imx3020037doexh4pm1gls"},{"post_id":"cj3imx3000035doexxa3a2w0x","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3imx306003cdoexrflsvvt3"},{"post_id":"cj3imx2zf002pdoex6xhirq5x","category_id":"cj3imx2zx0031doex02nrks1e","_id":"cj3imx307003fdoexuug1ky2e"},{"post_id":"cj3imx2zt002xdoexz2wvr8j8","category_id":"cj3imx2zx0031doex02nrks1e","_id":"cj3imx309003idoexyni4nddb"},{"post_id":"cj3imx2zv0030doex00t2bq2s","category_id":"cj3imx306003ddoexph4inu1e","_id":"cj3imx30b003mdoexgr7v73dl"},{"post_id":"cj3imx2yv0023doexi4jc2n08","category_id":"cj3imx2xj000vdoexqg4uiidn","_id":"cj3inggzu0001okexso0mnkxl"}],"PostTag":[{"post_id":"cj3imx2vw0001doex9dnd3c18","tag_id":"cj3imx2wf0006doexpc3k9izp","_id":"cj3imx2wu000ddoexet158l86"},{"post_id":"cj3imx2w60003doexfhiz3hdz","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2xe000pdoex0kx2e4tq"},{"post_id":"cj3imx2w60003doexfhiz3hdz","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2xg000sdoexibfx7epx"},{"post_id":"cj3imx2wg0007doexe940cv9w","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2xo0011doex29hv69hk"},{"post_id":"cj3imx2wg0007doexe940cv9w","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2xr0013doexgg30mcmt"},{"post_id":"cj3imx2xm000zdoexdedzdlvl","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2xv0018doexccvwquta"},{"post_id":"cj3imx2xm000zdoexdedzdlvl","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2y2001bdoex4getabem"},{"post_id":"cj3imx2x1000jdoexi6kl860l","tag_id":"cj3imx2xl000xdoexvm55vmg5","_id":"cj3imx2y7001gdoex4w7zj6ct"},{"post_id":"cj3imx2xs0016doexpdfeyoym","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2y9001jdoex2dyzshk1"},{"post_id":"cj3imx2xs0016doexpdfeyoym","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2yg001ndoexf0gtzyrd"},{"post_id":"cj3imx2xy001adoex2w7e4vx2","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2yj001qdoex79da6b9e"},{"post_id":"cj3imx2xy001adoex2w7e4vx2","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2ym001udoex7grwmmhd"},{"post_id":"cj3imx2x6000kdoex1di3txbp","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx2yo001xdoexco1sq567"},{"post_id":"cj3imx2y8001idoexa0nkf60g","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2yt0021doexgxzkn6sr"},{"post_id":"cj3imx2y8001idoexa0nkf60g","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2yy0024doex80tp9avj"},{"post_id":"cj3imx2xc000odoexb37slupg","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx2z00028doexioyduvql"},{"post_id":"cj3imx2xc000odoexb37slupg","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2z3002bdoexd1k91yo2"},{"post_id":"cj3imx2yh001pdoexm86zslqe","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2z5002fdoexri2ivl7m"},{"post_id":"cj3imx2yh001pdoexm86zslqe","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2za002idoexoht3wqqb"},{"post_id":"cj3imx2xe000qdoexiro58km9","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx2ze002mdoexb29k4qjw"},{"post_id":"cj3imx2yj001sdoex09wbs25c","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx2zh002qdoexfs02au28"},{"post_id":"cj3imx2yj001sdoex09wbs25c","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx2zj002udoexkdphkxd2"},{"post_id":"cj3imx2xi000udoexf85ta0l2","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx2zv002ydoexkvwt1gjb"},{"post_id":"cj3imx2yy0026doex0t2f7uor","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx2zy0032doexap1mc434"},{"post_id":"cj3imx2xk000wdoexe1yvioci","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx3020036doexac3otiby"},{"post_id":"cj3imx2xk000wdoexe1yvioci","tag_id":"cj3imx2yz0027doexjmbox3w6","_id":"cj3imx3030039doex4vunsnt4"},{"post_id":"cj3imx2xp0012doex7uc2z7cy","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx305003bdoexngbsehg7"},{"post_id":"cj3imx2xp0012doex7uc2z7cy","tag_id":"cj3imx2z5002edoexa1ddgywd","_id":"cj3imx306003edoextrm3svlx"},{"post_id":"cj3imx2xp0012doex7uc2z7cy","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx308003hdoexd8sqxvl4"},{"post_id":"cj3imx2zc002ldoexqdops05r","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx309003jdoex68c8r7vf"},{"post_id":"cj3imx2y4001ddoexngf8ef3k","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx30a003ldoexwbd998c6"},{"post_id":"cj3imx2y4001ddoexngf8ef3k","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx30c003ndoexd1f86mz5"},{"post_id":"cj3imx2y4001ddoexngf8ef3k","tag_id":"cj3imx2ze002ndoexq8ks68s2","_id":"cj3imx30d003pdoex27w260kq"},{"post_id":"cj3imx2zh002sdoex4tycq9yd","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx30d003qdoex4o2x2bz0"},{"post_id":"cj3imx3000035doexxa3a2w0x","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3imx30e003rdoextq4wuum2"},{"post_id":"cj3imx2yc001ldoexuoxwcedd","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx30g003tdoexy3n63vcg"},{"post_id":"cj3imx2yc001ldoexuoxwcedd","tag_id":"cj3imx2ze002ndoexq8ks68s2","_id":"cj3imx30g003udoexbm9p6jkz"},{"post_id":"cj3imx2yc001ldoexuoxwcedd","tag_id":"cj3imx2zz0034doex94ribi6k","_id":"cj3imx30i003wdoexgah1zv7h"},{"post_id":"cj3imx2yc001ldoexuoxwcedd","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx30k003xdoex8yf25og8"},{"post_id":"cj3imx2yn001wdoexhldjt5bz","tag_id":"cj3imx2ws000cdoexb19n9ffi","_id":"cj3imx30l003zdoexfb51s9en"},{"post_id":"cj3imx2yn001wdoexhldjt5bz","tag_id":"cj3imx2ze002ndoexq8ks68s2","_id":"cj3imx30l0040doexu9qajd5s"},{"post_id":"cj3imx2yn001wdoexhldjt5bz","tag_id":"cj3imx2zz0034doex94ribi6k","_id":"cj3imx30m0042doexa1buqty2"},{"post_id":"cj3imx2yn001wdoexhldjt5bz","tag_id":"cj3imx2wy000idoex7drqejg1","_id":"cj3imx30n0043doex2b4beomi"},{"post_id":"cj3imx2yp001zdoexntfy212u","tag_id":"cj3imx30a003kdoex745zo9r9","_id":"cj3imx30n0045doexpns2408g"},{"post_id":"cj3imx2z3002ddoexedv2m6ue","tag_id":"cj3imx30c003odoextkiloa22","_id":"cj3imx30n0046doex7xl4sz43"},{"post_id":"cj3imx2z3002ddoexedv2m6ue","tag_id":"cj3imx30a003kdoex745zo9r9","_id":"cj3imx30o0047doex3t5pp1tr"},{"post_id":"cj3imx2z6002hdoexcs8l5thz","tag_id":"cj3imx30a003kdoex745zo9r9","_id":"cj3imx30o0048doexlfotfkjc"},{"post_id":"cj3imx2zf002pdoex6xhirq5x","tag_id":"cj3imx30k003ydoexnya5ndjt","_id":"cj3imx30o0049doex51a0y1jc"},{"post_id":"cj3imx2zt002xdoexz2wvr8j8","tag_id":"cj3imx30k003ydoexnya5ndjt","_id":"cj3imx30p004adoexj8syxj1y"},{"post_id":"cj3imx2zv0030doex00t2bq2s","tag_id":"cj3imx30n0044doexlfaocfr1","_id":"cj3imx30p004bdoexfaptpn35"},{"post_id":"cj3imx2yv0023doexi4jc2n08","tag_id":"cj3imx2xs0015doexb9s1bjs3","_id":"cj3inggzt0000okexl20ccwm5"}],"Tag":[{"name":"Tool","_id":"cj3imx2wf0006doexpc3k9izp"},{"name":"LeetCode","_id":"cj3imx2ws000cdoexb19n9ffi"},{"name":"数组","_id":"cj3imx2wy000idoex7drqejg1"},{"name":"总结","_id":"cj3imx2xl000xdoexvm55vmg5"},{"name":"JavaScript","_id":"cj3imx2xs0015doexb9s1bjs3"},{"name":"Tips","_id":"cj3imx2yz0027doexjmbox3w6"},{"name":"算法","_id":"cj3imx2z5002edoexa1ddgywd"},{"name":"查找","_id":"cj3imx2ze002ndoexq8ks68s2"},{"name":"树","_id":"cj3imx2zz0034doex94ribi6k"},{"name":"Tools","_id":"cj3imx30a003kdoex745zo9r9"},{"name":"git","_id":"cj3imx30c003odoextkiloa22"},{"name":"CSS","_id":"cj3imx30k003ydoexnya5ndjt"},{"name":"思考","_id":"cj3imx30n0044doexlfaocfr1"}]}}